name: CI/CD Pipeline - Build, Test, and Deploy

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # =============================================
  # PHASE 1: Code Quality and Security
  # =============================================

  code-quality:
    name: 'Code Quality & Security Audit'
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security.outcome }}
      quality-status: ${{ steps.quality.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Cache quality results
        uses: actions/cache@v4
        with:
          path: |
            .eslintcache
            coverage/
          key: quality-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.js') }}
          restore-keys: |
            quality-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            quality-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: Security audit
        id: security
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level high

          echo "🔍 Checking for hardcoded secrets..."
          if grep -r "firebase.*config.*apiKey.*:" --exclude-dir=node_modules .; then
            echo "❌ Found hardcoded Firebase config"
            exit 1
          fi

          echo "✅ Security audit passed"

      - name: Code quality check
        id: quality
        run: |
          echo "🧹 Running linting..."
          npm run lint

          echo "🎨 Checking code formatting..."
          npm run format:check

          echo "✅ Code quality check passed"

      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: |
            .eslintcache
          retention-days: 7

  # =============================================
  # PHASE 2: Testing Matrix
  # =============================================

  unit-integration-tests:
    name: 'Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: code-quality

    strategy:
      matrix:
        test-type: [unit, integration, accessibility, performance]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            coverage/
            test-results/
          key: tests-${{ env.CACHE_VERSION }}-${{ matrix.test-type }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('tests/**/*') }}

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              echo "🧪 Running unit tests..."
              npm run test:unit
              ;;
            "integration")
              echo "🔗 Running integration tests..."
              npm run test:integration
              ;;
            "accessibility")
              echo "♿ Running accessibility tests..."
              npm run test:a11y
              ;;
            "performance")
              echo "⚡ Running performance tests..."
              npm run test:performance
              ;;
          esac

      - name: Generate test coverage
        if: matrix.test-type == 'unit'
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
          retention-days: 30

  # =============================================
  # PHASE 3: E2E Testing
  # =============================================

  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: [code-quality, unit-integration-tests]

    strategy:
      matrix:
        browser: [chromium, firefox]
        test-suite: [critical, security, mobile]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }} --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Start development server
        run: |
          npm run dev &
          npx wait-on http://localhost:5173 --timeout 120000

      - name: Run E2E tests - ${{ matrix.test-suite }}
        run: |
          case "${{ matrix.test-suite }}" in
            "critical")
              echo "🎯 Running critical user flow tests..."
              npm run test:e2e:critical -- --project=${{ matrix.browser }}
              ;;
            "security")
              echo "🔒 Running security validation tests..."
              npm run test:e2e:security -- --project=${{ matrix.browser }}
              ;;
            "mobile")
              echo "📱 Running mobile responsiveness tests..."
              npm run test:e2e:mobile -- --project=${{ matrix.browser }}
              ;;
          esac

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.test-suite }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # =============================================
  # PHASE 4: Build and Optimization
  # =============================================

  build:
    name: 'Build & Optimize'
    runs-on: ubuntu-latest
    needs: [code-quality, unit-integration-tests]

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist/
            public/assets/css/
          key: build-${{ env.CACHE_VERSION }}-${{ matrix.environment }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('public/**/*', 'scripts/**/*') }}

      - name: Build for ${{ matrix.environment }}
        run: |
          echo "🏗️ Building for ${{ matrix.environment }}..."
          case "${{ matrix.environment }}" in
            "staging")
              npm run build:staging
              ;;
            "production")
              npm run build:prod
              ;;
          esac

      - name: Optimize assets
        run: |
          echo "⚡ Optimizing assets..."
          npm run enhance:performance
          npm run enhance:ux

      - name: Generate PWA assets
        run: |
          echo "📱 Generating PWA assets..."
          npm run pwa:generate

      - name: Build quality report
        run: |
          echo "📊 Generating build quality report..."
          echo "Build completed for ${{ matrix.environment }}" > build-report.txt
          echo "Build time: $(date)" >> build-report.txt
          echo "Environment: ${{ matrix.environment }}" >> build-report.txt

          if [ -d "dist" ]; then
            echo "Build size: $(du -sh dist | cut -f1)" >> build-report.txt
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: |
            dist/
            public/
            build-report.txt
          retention-days: 30

  # =============================================
  # PHASE 5: Lighthouse Performance Testing
  # =============================================

  lighthouse:
    name: 'Lighthouse Performance'
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: ./

      - name: Start server for testing
        run: |
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  # =============================================
  # PHASE 6: Security Scanning
  # =============================================

  security-scan:
    name: 'Advanced Security Scan'
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          echo "🔐 Running comprehensive security audit..."
          npm run security:audit

      - name: Scan for vulnerabilities
        uses: securecodewarrior/github-action-add-sarif@v1
        if: always()
        with:
          sarif-file: 'security-scan-results.sarif'

  # =============================================
  # PHASE 7: Deployment
  # =============================================

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [e2e-tests, build, lighthouse]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download staging build
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: ./

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          firebase use staging
          firebase deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run post-deployment verification
        run: |
          echo "✅ Running post-deployment verification..."
          npm run deploy:verify

      - name: Staging deployment complete
        run: echo "✅ Staging deployment completed successfully"

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [e2e-tests, build, lighthouse, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download production build
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: ./

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Production
        run: |
          echo "🚀 Deploying to production environment..."
          firebase use production
          firebase deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run post-deployment verification
        run: |
          echo "✅ Running post-deployment verification..."
          npm run deploy:verify

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated production deployment

            Changes included:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Production deployment complete
        run: echo "✅ Production deployment completed successfully"

  # =============================================
  # PHASE 8: Post-Deployment Monitoring
  # =============================================

  post-deployment-monitoring:
    name: 'Post-Deployment Monitoring'
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run health checks
        run: |
          echo "🏥 Running post-deployment health checks..."

          # Wait for deployment to be available
          sleep 30

          # Run verification scripts
          npm run deploy:verify

      - name: Monitor performance
        run: |
          echo "📊 Monitoring post-deployment performance..."
          npm run test:performance

      - name: Generate deployment report
        run: |
          echo "📝 Generating deployment report..."
          echo "Deployment Report" > deployment-report.md
          echo "=================" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "**Date:** $(date)" >> deployment-report.md
          echo "**Environment:** ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}" >> deployment-report.md
          echo "**Commit:** ${{ github.sha }}" >> deployment-report.md
          echo "**Branch:** ${{ github.ref_name }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "**Quality Gates Passed:**" >> deployment-report.md
          echo "- ✅ Code Quality & Security Audit" >> deployment-report.md
          echo "- ✅ Unit & Integration Tests" >> deployment-report.md
          echo "- ✅ E2E Testing (Critical, Security, Mobile)" >> deployment-report.md
          echo "- ✅ Build & Optimization" >> deployment-report.md
          echo "- ✅ Lighthouse Performance Testing" >> deployment-report.md
          echo "- ✅ Advanced Security Scanning" >> deployment-report.md
          echo "- ✅ Deployment Verification" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90

  # =============================================
  # PHASE 9: Cleanup and Notification
  # =============================================

  cleanup-and-notify:
    name: 'Cleanup & Final Notification'
    runs-on: ubuntu-latest
    needs: [post-deployment-monitoring]
    if: always()

    steps:
      - name: Cleanup old artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            eslint-results
            test-results-*
            e2e-results-*
          failOnError: false

      - name: Generate pipeline summary
        run: |
          echo "🎉 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "========================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Total Runtime:** ${{ github.event.repository.pushed_at }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quality Assurance:**" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality, security, and testing completed" >> $GITHUB_STEP_SUMMARY
          echo "- Cross-browser E2E testing passed" >> $GITHUB_STEP_SUMMARY
          echo "- Performance budgets enforced" >> $GITHUB_STEP_SUMMARY
          echo "- Security scanning completed" >> $GITHUB_STEP_SUMMARY

      - name: Pipeline complete
        run: echo "✅ CI/CD Pipeline completed successfully"
