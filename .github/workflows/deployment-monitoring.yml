name: Deployment Monitoring

on:
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'full'
        type: choice
        options:
          - health
          - performance
          - security
          - full

env:
  NODE_VERSION: '18'

jobs:
  # =============================================
  # Health monitoring
  # =============================================

  health_check:
    name: 'Health Check'
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'full' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Check website availability
        run: |
          echo "üåê Checking website availability..."

          URLS=(
            "https://3ballnetwork.web.app"
            "https://3ballnetwork.web.app/health"
            "https://3ballnetwork.web.app/api/status"
          )

          for url in "${URLS[@]}"; do
            echo "Checking: $url"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "‚úÖ $url - OK ($response)"
            else
              echo "‚ùå $url - FAIL ($response)"
              exit 1
            fi
          done

      - name: Check database connectivity
        run: |
          echo "üóÑÔ∏è Checking database connectivity..."
          node -e "
            const admin = require('firebase-admin');
            
            // Initialize with service account (use environment variables in real deployment)
            admin.initializeApp({
              credential: admin.credential.cert({
                projectId: process.env.FIREBASE_PROJECT_ID,
                clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
                privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n')
              })
            });
            
            // Test Firestore connection
            admin.firestore().collection('health-check').doc('test').set({
              timestamp: admin.firestore.FieldValue.serverTimestamp(),
              status: 'healthy'
            }).then(() => {
              console.log('‚úÖ Firestore - Connected');
              process.exit(0);
            }).catch(err => {
              console.error('‚ùå Firestore - Connection failed:', err.message);
              process.exit(1);
            });
          "

      - name: Check authentication service
        run: |
          echo "üîê Checking authentication service..."
          node -e "
            const admin = require('firebase-admin');
            
            // Test Auth service
            admin.auth().listUsers(1).then(() => {
              console.log('‚úÖ Firebase Auth - Available');
            }).catch(err => {
              console.error('‚ùå Firebase Auth - Error:', err.message);
              process.exit(1);
            });
          "

  # =============================================
  # Performance monitoring
  # =============================================

  performance_check:
    name: 'Performance Check'
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'full'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse performance audit
        run: |
          echo "‚ö° Running Lighthouse performance audit..."

          lhci autorun \
            --config=lighthouserc.js \
            --upload.target=temporary-public-storage

      - name: Check Core Web Vitals
        run: |
          echo "üìä Checking Core Web Vitals..."
          node -e "
            const lighthouse = require('lighthouse');
            const chromeLauncher = require('chrome-launcher');
            
            (async () => {
              const chrome = await chromeLauncher.launch({chromeFlags: ['--headless']});
              const options = {logLevel: 'info', output: 'json', onlyCategories: ['performance'], port: chrome.port};
              const runnerResult = await lighthouse('https://3ballnetwork.web.app', options);
              
              const audits = runnerResult.lhr.audits;
              const cwv = {
                'Largest Contentful Paint': audits['largest-contentful-paint']?.displayValue,
                'First Input Delay': audits['max-potential-fid']?.displayValue,
                'Cumulative Layout Shift': audits['cumulative-layout-shift']?.displayValue,
                'Time to Interactive': audits['interactive']?.displayValue,
                'Speed Index': audits['speed-index']?.displayValue
              };
              
              console.log('üìà Core Web Vitals:');
              Object.entries(cwv).forEach(([metric, value]) => {
                console.log(\`  \${metric}: \${value || 'N/A'}\`);
              });
              
              await chrome.kill();
            })();
          "

      - name: Check page load times
        run: |
          echo "‚è±Ô∏è Checking page load times..."

          PAGES=(
            "/"
            "/login"
            "/register"
            "/coach"
            "/player"
            "/scout"
          )

          for page in "${PAGES[@]}"; do
            echo "Testing: https://3ballnetwork.web.app$page"
            
            time=$(curl -w "@curl-format.txt" -s -o /dev/null "https://3ballnetwork.web.app$page")
            echo "Load time: $time seconds"
            
            # Alert if load time > 3 seconds
            if (( $(echo "$time > 3.0" | bc -l) )); then
              echo "‚ö†Ô∏è Slow load time detected: $time seconds"
            fi
          done

  # =============================================
  # Security monitoring
  # =============================================

  security_check:
    name: 'Security Check'
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'full'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Check SSL certificate
        run: |
          echo "üîí Checking SSL certificate..."

          ssl_info=$(echo | openssl s_client -servername 3ballnetwork.web.app -connect 3ballnetwork.web.app:443 2>/dev/null | openssl x509 -noout -dates)

          echo "SSL Certificate Information:"
          echo "$ssl_info"

          # Check if certificate is expiring within 30 days
          expiry_date=$(echo "$ssl_info" | grep "notAfter" | cut -d= -f2)
          expiry_epoch=$(date -d "$expiry_date" +%s)
          current_epoch=$(date +%s)
          days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))

          if [ $days_until_expiry -lt 30 ]; then
            echo "‚ö†Ô∏è SSL certificate expires in $days_until_expiry days"
            exit 1
          else
            echo "‚úÖ SSL certificate valid for $days_until_expiry days"
          fi

      - name: Check security headers
        run: |
          echo "üõ°Ô∏è Checking security headers..."

          headers=$(curl -s -I https://3ballnetwork.web.app)

          required_headers=(
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
            "Content-Security-Policy"
          )

          for header in "${required_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "‚úÖ $header - Present"
            else
              echo "‚ö†Ô∏è $header - Missing"
            fi
          done

      - name: Run security audit
        run: |
          echo "üîç Running security audit..."
          npm audit --audit-level high

      - name: Check for exposed secrets
        run: |
          echo "üîê Checking for exposed secrets..."

          # Check common URLs for exposed files
          sensitive_files=(
            "/.env"
            "/.env.local"
            "/.env.production"
            "/config.json"
            "/firebase-config.json"
          )

          for file in "${sensitive_files[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://3ballnetwork.web.app$file")
            
            if [ "$response" = "200" ]; then
              echo "‚ùå Exposed file detected: $file"
              exit 1
            else
              echo "‚úÖ $file - Protected"
            fi
          done

  # =============================================
  # Uptime monitoring
  # =============================================

  uptime_monitoring:
    name: 'Uptime Monitoring'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Monitor uptime
        run: |
          echo "üìä Monitoring uptime..."

          start_time=$(date +%s)
          url="https://3ballnetwork.web.app"

          # Check multiple times over 5 minutes
          for i in {1..5}; do
            echo "Check $i/5..."
            
            response_time=$(curl -w "%{time_total}" -s -o /dev/null "$url")
            response_code=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            
            echo "Response time: ${response_time}s"
            echo "Response code: $response_code"
            
            if [ "$response_code" != "200" ]; then
              echo "‚ùå Service unavailable (HTTP $response_code)"
              exit 1
            fi
            
            # Wait 1 minute between checks
            if [ $i -lt 5 ]; then
              sleep 60
            fi
          done

          echo "‚úÖ All uptime checks passed"

      - name: Log monitoring results
        run: |
          echo "üìù Logging monitoring results..."

          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          cat > monitoring-report.json << EOF
          {
            "timestamp": "$timestamp",
            "type": "scheduled_monitoring",
            "results": {
              "health_check": "passed",
              "uptime_check": "passed",
              "ssl_status": "valid",
              "response_time": "< 3s"
            },
            "next_check": "$(date -u -d '+15 minutes' +"%Y-%m-%d %H:%M:%S UTC")"
          }
          EOF

      - name: Upload monitoring report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_id }}
          path: monitoring-report.json
          retention-days: 30

  # =============================================
  # Alert notifications
  # =============================================

  alert_notifications:
    name: 'Alert Notifications'
    runs-on: ubuntu-latest
    needs: [health_check, performance_check, security_check, uptime_monitoring]
    if: always()
    outputs:
      alert_level: ${{ steps.evaluate.outputs.alert_level }}

    steps:
      - name: Evaluate monitoring results
        id: evaluate
        run: |
          echo "üö® Evaluating monitoring results..."

          health_status="${{ needs.health_check.result }}"
          performance_status="${{ needs.performance_check.result }}"
          security_status="${{ needs.security_check.result }}"
          uptime_status="${{ needs.uptime_monitoring.result }}"

          echo "Health Check: $health_status"
          echo "Performance Check: $performance_status"
          echo "Security Check: $security_status"
          echo "Uptime Monitoring: $uptime_status"

          # Determine overall status
          if [[ "$health_status" == "failure" || "$uptime_status" == "failure" ]]; then
            echo "alert_level=critical" >> $GITHUB_OUTPUT
          elif [[ "$performance_status" == "failure" || "$security_status" == "failure" ]]; then
            echo "alert_level=warning" >> $GITHUB_OUTPUT
          else
            echo "alert_level=success" >> $GITHUB_OUTPUT
          fi

      - name: Send notifications
        if: steps.evaluate.outputs.alert_level != 'success'
        run: |
          echo "üì¢ Sending alert notifications..."

          case "${{ steps.evaluate.outputs.alert_level }}" in
            "critical")
              echo "üö® CRITICAL ALERT: Service issues detected"
              ;;
            "warning")
              echo "‚ö†Ô∏è WARNING: Performance or security issues detected"
              ;;
          esac

      - name: Create monitoring summary
        run: |
          echo "üìã Creating monitoring summary..."

          cat > monitoring-summary.md << EOF
          # üîç Deployment Monitoring Report

          **Monitoring Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          **Environment:** ${{ github.event.inputs.environment || 'production' }}
          **Check Type:** ${{ github.event.inputs.check_type || 'scheduled' }}

          ## Results Summary

          | Check Type | Status | Details |
          |------------|--------|---------|
          | Health Check | ${{ needs.health_check.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Website availability, database connectivity, auth service |
          | Performance Check | ${{ needs.performance_check.result == 'success' && '‚úÖ Passed' || (needs.performance_check.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | Lighthouse audit, Core Web Vitals, load times |
          | Security Check | ${{ needs.security_check.result == 'success' && '‚úÖ Passed' || (needs.security_check.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | SSL certificate, security headers, vulnerability scan |
          | Uptime Monitoring | ${{ needs.uptime_monitoring.result == 'success' && '‚úÖ Passed' || (needs.uptime_monitoring.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} | 5-minute availability test |

          ## Overall Status: ${{ steps.evaluate.outputs.alert_level == 'success' && 'üü¢ All Systems Operational' || (steps.evaluate.outputs.alert_level == 'warning' && 'üü° Minor Issues Detected' || 'üî¥ Critical Issues Detected') }}

          ## Next Monitoring

          - **Scheduled Check:** Every 15 minutes
          - **Manual Check:** Available via workflow dispatch
          - **Alert Threshold:** Critical issues trigger immediate notifications

          ---

          **Generated by:** GitHub Actions Deployment Monitoring
          **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

      - name: Archive monitoring summary
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-summary-${{ github.run_id }}
          path: monitoring-summary.md
          retention-days: 90
