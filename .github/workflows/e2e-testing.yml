name: E2E Testing and Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

jobs:
  # Setup and security check
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level high

      - name: Check for secrets
        run: |
          # Ensure no secrets in code
          if grep -r "firebase.*config.*apiKey.*:" --exclude-dir=node_modules .; then
            echo "Found hardcoded Firebase config"
            exit 1
          fi

  # Unit and integration tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Generate coverage report
        run: npm run test:coverage

  # E2E tests for critical flows
  e2e-critical-flows:
    runs-on: ubuntu-latest
    needs: [security-audit, unit-tests]
    strategy:
      matrix:
        browser: [chromium, firefox]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test environment
        run: |
          # Create test environment variables
          echo "TEST_BASE_URL=http://localhost:5173" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Run E2E tests (Critical Flows)
        run: npm run test:e2e:critical
        env:
          CI: true
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 30

  # Mobile responsiveness tests
  e2e-mobile:
    runs-on: ubuntu-latest
    needs: [security-audit, unit-tests]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run mobile E2E tests
        run: npm run test:e2e:mobile
        env:
          CI: true

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-mobile-results
          path: test-results/
          retention-days: 30

  # Security and validation tests
  e2e-security:
    runs-on: ubuntu-latest
    needs: [security-audit, unit-tests]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run security validation tests
        run: npm run test:e2e:security
        env:
          CI: true

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-security-results
          path: test-results/
          retention-days: 30

  # Performance monitoring
  performance-tests:
    runs-on: ubuntu-latest
    needs: [security-audit]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Build for performance testing
        run: npm run build

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  # Comprehensive test report
  test-summary:
    runs-on: ubuntu-latest
    needs: [e2e-critical-flows, e2e-mobile, e2e-security, performance-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-test-results/

      - name: Generate comprehensive test report
        run: |
          echo "# E2E Test Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Run Information" >> test-summary.md
          echo "- **Date**: $(date)" >> test-summary.md
          echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
          echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
          echo "" >> test-summary.md

          echo "## Test Coverage" >> test-summary.md
          echo "- âœ… Critical User Flows (Registration, Login, Game Upload)" >> test-summary.md
          echo "- âœ… Security and Data Validation" >> test-summary.md
          echo "- âœ… Mobile Responsiveness" >> test-summary.md
          echo "- âœ… Performance Monitoring" >> test-summary.md
          echo "- âœ… Cross-browser Compatibility" >> test-summary.md
          echo "" >> test-summary.md

          echo "## Test Results" >> test-summary.md
          find all-test-results/ -name "*.json" -exec echo "- {}" \; >> test-summary.md

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-report
          path: test-summary.md
          retention-days: 90

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

  # Deployment readiness check
  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [e2e-critical-flows, e2e-mobile, e2e-security, performance-tests]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - uses: actions/checkout@v4

      - name: Deployment readiness verification
        run: |
          echo "ðŸš€ All E2E tests passed - Ready for deployment!"
          echo "âœ… Critical flows validated"
          echo "âœ… Security tests passed"
          echo "âœ… Mobile compatibility confirmed"
          echo "âœ… Performance metrics within budget"

      - name: Trigger deployment
        run: |
          # This would trigger your deployment pipeline
          echo "Triggering deployment to production..."
          # Example: curl -X POST your-deployment-webhook
