rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isValidString(value, minLength, maxLength) {
      return value is string && 
             value.size() >= minLength && 
             value.size() <= maxLength &&
             value.trim().size() > 0;
    }
    
    function isValidEmail(email) {
      return email is string && 
             email.matches('.*@.*\\..*') &&
             email.size() <= 254;
    }
    
    function isValidUrl(url) {
      return url is string && 
             (url.matches('https://.*') || url.matches('http://.*')) &&
             url.size() <= 2048;
    }
    
    function isValidDate(date) {
      return date is string && 
             date.matches('[0-9]{4}-[0-9]{2}-[0-9]{2}');
    }
    
    function isValidRole(role) {
      return role is string && 
             role in ['player', 'coach', 'scout', 'fan', 'admin', 'moderator'];
    }
    
    function isValidStatus(status) {
      return status is string && 
             status in ['active', 'inactive', 'suspended', 'pending'];
    }
    
    function isValidPosition(position) {
      return position is string && 
             position in ['PG', 'SG', 'SF', 'PF', 'C', 'G', 'F'];
    }
    
    function isValidSkillLevel(level) {
      return level is string && 
             level in ['beginner', 'intermediate', 'advanced', 'elite'];
    }
    
    function isValidAnalysisStatus(status) {
      return status is string && 
             status in ['pending', 'in-progress', 'completed', 'failed'];
    }
    
    function isValidTaggingStatus(status) {
      return status is string && 
             status in ['pending-tagging', 'tagging-in-progress', 'tagging-completed', 'tagging-failed'];
    }

    // User role and authentication functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserRole() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    function isAdmin() {
      return getUserRole() in ['admin', 'moderator'];
    }
    
    function isCoach() {
      return getUserRole() == 'coach' || isAdmin();
    }
    
    function isScout() {
      return getUserRole() == 'scout' || isAdmin();
    }
    
    // Users collection with comprehensive validation
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       validateUserData(request.resource.data);
      allow update: if (isAdmin() || isOwner(userId)) &&
                       validateUserData(request.resource.data);
      allow delete: if isAdmin();
      
      function validateUserData(data) {
        return data.keys().hasAll(['name', 'email', 'role', 'uid', 'createdAt', 'status']) &&
               isValidString(data.name, 2, 100) &&
               isValidEmail(data.email) &&
               isValidRole(data.role) &&
               data.uid == userId &&
               data.createdAt is string &&
               isValidStatus(data.status) &&
               // Optional fields validation
               (!data.keys().hasAny(['bio']) || isValidString(data.bio, 0, 1000)) &&
               (!data.keys().hasAny(['location']) || isValidString(data.location, 0, 100)) &&
               (!data.keys().hasAny(['school']) || isValidString(data.school, 0, 100)) &&
               (!data.keys().hasAny(['position']) || isValidPosition(data.position)) &&
               (!data.keys().hasAny(['skillLevel']) || isValidSkillLevel(data.skillLevel)) &&
               (!data.keys().hasAny(['height']) || (data.height is number && data.height > 0 && data.height < 300)) &&
               (!data.keys().hasAny(['weight']) || (data.weight is number && data.weight > 0 && data.weight < 500)) &&
               (!data.keys().hasAny(['gpa']) || (data.gpa is number && data.gpa >= 0 && data.gpa <= 4.0)) &&
               (!data.keys().hasAny(['graduationYear']) || (data.graduationYear is number && data.graduationYear >= 2020 && data.graduationYear <= 2040));
      }
    }
    
    // Games collection with strict validation
    match /games/{gameId} {
      allow read: if true; // Public read for game viewing
      allow create: if isCoach() && validateGameData(request.resource.data);
      allow update: if isAdmin() || (isCoach() && resource.data.uploadedBy == getUserTeamName());
      allow delete: if isAdmin();
      
      function validateGameData(data) {
        return data.keys().hasAll(['teamName', 'opponent', 'date', 'uploadedBy', 'analysisStatus', 'taggingStatus']) &&
               isValidString(data.teamName, 2, 100) &&
               isValidString(data.opponent, 2, 100) &&
               isValidDate(data.date) &&
               isValidString(data.uploadedBy, 2, 100) &&
               isValidAnalysisStatus(data.analysisStatus) &&
               isValidTaggingStatus(data.taggingStatus) &&
               // Optional fields
               (!data.keys().hasAny(['videoUrl']) || isValidUrl(data.videoUrl)) &&
               (!data.keys().hasAny(['score']) || isValidString(data.score, 0, 20)) &&
               (!data.keys().hasAny(['location']) || isValidString(data.location, 0, 100)) &&
               (!data.keys().hasAny(['notes']) || isValidString(data.notes, 0, 1000)) &&
               (!data.keys().hasAny(['duration']) || (data.duration is number && data.duration > 0 && data.duration < 10800)) && // Max 3 hours
               (!data.keys().hasAny(['quarter']) || (data.quarter is number && data.quarter >= 1 && data.quarter <= 4));
      }
      
      function getUserTeamName() {
        return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('team', '') : '';
      }
    }
    
    // Videos collection validation
    match /videos/{videoId} {
      allow read: if true; // Public read
      allow create: if isAuthenticated() && validateVideoData(request.resource.data);
      allow update: if isAdmin() || (isAuthenticated() && resource.data.uploadedBy == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateVideoData(data) {
        return data.keys().hasAll(['title', 'url', 'uploadedBy']) &&
               isValidString(data.title, 2, 200) &&
               isValidUrl(data.url) &&
               data.uploadedBy == request.auth.uid &&
               // Optional fields
               (!data.keys().hasAny(['description']) || isValidString(data.description, 0, 1000)) &&
               (!data.keys().hasAny(['duration']) || (data.duration is number && data.duration > 0)) &&
               (!data.keys().hasAny(['tags']) || (data.tags is list && data.tags.size() <= 10));
      }
    }
    
    // Player profiles and scouting reports
    match /players/{playerId} {
      allow read: if true; // Public read for scouting
      allow create: if isAuthenticated() && validatePlayerData(request.resource.data);
      allow update: if isAdmin() || isOwner(playerId) || isScout();
      allow delete: if isAdmin();
      
      function validatePlayerData(data) {
        return data.keys().hasAll(['name', 'position']) &&
               isValidString(data.name, 2, 100) &&
               isValidPosition(data.position) &&
               // Optional fields validation
               (!data.keys().hasAny(['height']) || (data.height is number && data.height > 0 && data.height < 300)) &&
               (!data.keys().hasAny(['weight']) || (data.weight is number && data.weight > 0 && data.weight < 500)) &&
               (!data.keys().hasAny(['school']) || isValidString(data.school, 0, 100)) &&
               (!data.keys().hasAny(['graduationYear']) || (data.graduationYear is number && data.graduationYear >= 2020 && data.graduationYear <= 2040)) &&
               (!data.keys().hasAny(['gpa']) || (data.gpa is number && data.gpa >= 0 && data.gpa <= 4.0)) &&
               (!data.keys().hasAny(['skillLevel']) || isValidSkillLevel(data.skillLevel)) &&
               (!data.keys().hasAny(['bio']) || isValidString(data.bio, 0, 1000));
      }
    }
    
    // Scouting reports with validation
    match /scoutingReports/{reportId} {
      allow read: if isAuthenticated() && (isAdmin() || isScout() || isOwner(resource.data.scoutId) || isOwner(resource.data.playerId));
      allow create: if isScout() && validateScoutingReportData(request.resource.data);
      allow update: if isAdmin() || (isScout() && resource.data.scoutId == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateScoutingReportData(data) {
        return data.keys().hasAll(['playerId', 'scoutId', 'rating', 'notes']) &&
               isValidString(data.playerId, 1, 100) &&
               data.scoutId == request.auth.uid &&
               (data.rating is number && data.rating >= 1 && data.rating <= 5) &&
               isValidString(data.notes, 10, 2000) &&
               // Optional fields
               (!data.keys().hasAny(['strengths']) || isValidString(data.strengths, 0, 1000)) &&
               (!data.keys().hasAny(['weaknesses']) || isValidString(data.weaknesses, 0, 1000)) &&
               (!data.keys().hasAny(['potential']) || isValidString(data.potential, 0, 1000));
      }
    }
    
    
    // Messages collection with validation
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
      allow create: if isAuthenticated() && validateMessageData(request.resource.data);
      allow update: if isAdmin() || (isAuthenticated() && resource.data.senderId == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateMessageData(data) {
        return data.keys().hasAll(['senderId', 'receiverId', 'content', 'timestamp']) &&
               data.senderId == request.auth.uid &&
               isValidString(data.receiverId, 1, 100) &&
               isValidString(data.content, 1, 2000) &&
               data.timestamp is timestamp &&
               // Optional fields
               (!data.keys().hasAny(['subject']) || isValidString(data.subject, 0, 200));
      }
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAdmin() && validateNotificationData(request.resource.data);
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid; // Users can mark as read
      allow delete: if isAdmin();
      
      function validateNotificationData(data) {
        return data.keys().hasAll(['userId', 'title', 'message', 'type']) &&
               isValidString(data.userId, 1, 100) &&
               isValidString(data.title, 1, 200) &&
               isValidString(data.message, 1, 1000) &&
               data.type in ['info', 'warning', 'error', 'success'];
      }
    }
    
    // Analytics collection with validation
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && validateAnalyticsData(request.resource.data);
      allow update, delete: if isAdmin();
      
      function validateAnalyticsData(data) {
        return data.keys().hasAll(['userId', 'event', 'timestamp']) &&
               data.userId == request.auth.uid &&
               isValidString(data.event, 1, 100) &&
               data.timestamp is timestamp &&
               // Optional fields
               (!data.keys().hasAny(['metadata']) || data.metadata is map);
      }
    }
    
    // Moderation reports (users can create, admins can manage)
    match /moderationReports/{reportId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && validateModerationReportData(request.resource.data);
      allow update, delete: if isAdmin();
      
      function validateModerationReportData(data) {
        return data.keys().hasAll(['reporterId', 'targetId', 'reason', 'description']) &&
               data.reporterId == request.auth.uid &&
               isValidString(data.targetId, 1, 100) &&
               data.reason in ['spam', 'harassment', 'inappropriate_content', 'fake_profile', 'other'] &&
               isValidString(data.description, 10, 1000);
      }
    }
    
    // Teams collection
    match /teams/{teamId} {
      allow read: if true; // Public read
      allow create: if isCoach() && validateTeamData(request.resource.data);
      allow update: if isAdmin() || (isCoach() && resource.data.coachId == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateTeamData(data) {
        return data.keys().hasAll(['name', 'coachId', 'school']) &&
               isValidString(data.name, 2, 100) &&
               data.coachId == request.auth.uid &&
               isValidString(data.school, 2, 100) &&
               // Optional fields
               (!data.keys().hasAny(['description']) || isValidString(data.description, 0, 1000)) &&
               (!data.keys().hasAny(['location']) || isValidString(data.location, 0, 100)) &&
               (!data.keys().hasAny(['season']) || isValidString(data.season, 0, 50));
      }
    }
    
    // Contact requests with validation
    match /contactRequests/{requestId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      allow create: if isAuthenticated() && validateContactRequestData(request.resource.data);
      allow update: if isAuthenticated() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateContactRequestData(data) {
        return data.keys().hasAll(['from', 'to', 'message', 'status']) &&
               data.from == request.auth.uid &&
               isValidString(data.to, 1, 100) &&
               isValidString(data.message, 1, 1000) &&
               data.status in ['pending', 'accepted', 'declined'];
      }
    }
    
    // Pages collection (public read, admin write)
    match /pages/{pageId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Media collection with file validation
    match /media/{mediaId} {
      allow read: if true; // Public read for media display
      allow create: if isAuthenticated() && validateMediaData(request.resource.data);
      allow update: if isAdmin() || (isAuthenticated() && resource.data.uploadedBy == request.auth.uid);
      allow delete: if isAdmin();
      
      function validateMediaData(data) {
        return data.keys().hasAll(['filename', 'contentType', 'uploadedBy']) &&
               isValidString(data.filename, 1, 255) &&
               data.contentType in ['image/jpeg', 'image/png', 'image/gif', 'video/mp4', 'video/webm'] &&
               data.uploadedBy == request.auth.uid &&
               // Optional fields
               (!data.keys().hasAny(['description']) || isValidString(data.description, 0, 500)) &&
               (!data.keys().hasAny(['size']) || (data.size is number && data.size > 0 && data.size < 104857600)); // Max 100MB
      }
    }
    
    // Admin-only collections
    match /messageTemplates/{templateId} {
      allow read, write: if isAdmin();
    }
    
    match /moderationActions/{actionId} {
      allow read, write: if isAdmin();
    }
    
    match /systemLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    match /systemMetrics/{metricId} {
      allow read, write: if isAdmin();
    }
    
    match /backups/{backupId} {
      allow read, write: if isAdmin();
    }
    
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // Streams collection
    match /streams/{streamId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}