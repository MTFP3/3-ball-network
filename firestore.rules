rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow other authenticated users to read basic profile info
      allow read: if request.auth != null;
    }
    
    // Videos collection
    match /videos/{videoId} {
      // Anyone can read videos (for public viewing)
      allow read: if true;
      
      // Only authenticated users can create videos
      allow create: if request.auth != null && 
                    request.auth.uid == resource.data.uploadedBy;
      
      // Only the uploader can update/delete their videos
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.uploadedBy;
      
      // Coaches and admins can read all videos
      allow read: if request.auth != null;
    }
    
    // Teams collection
    match /teams/{teamId} {
      // Team members can read team data
      allow read: if request.auth != null && 
                  request.auth.uid in resource.data.members;
      
      // Only coaches and admins can create/update teams
      allow create, update: if request.auth != null && 
                           getUserRole(request.auth.uid) in ['coach', 'admin'];
      
      // Only admins can delete teams
      allow delete: if request.auth != null && 
                    getUserRole(request.auth.uid) == 'admin';
    }
    
    // Analytics collection (coach/admin only)
    match /analytics/{document=**} {
      allow read, write: if request.auth != null && 
                         getUserRole(request.auth.uid) in ['coach', 'admin'];
    }
    
    // Comments on videos
    match /videos/{videoId}/comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }
    
    // Helper function to get user role
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
  }
}
