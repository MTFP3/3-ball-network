<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Role Management - 3-Ball Network</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        margin: 0;
        padding: 20px;
        background: #f5f7fa;
        color: #2d3748;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
      }

      .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 12px;
        margin-bottom: 30px;
        text-align: center;
      }

      .header h1 {
        margin: 0 0 10px 0;
        font-size: 2.5rem;
      }

      .header p {
        margin: 0;
        opacity: 0.9;
      }

      .nav-links {
        text-align: center;
        margin: 20px 0;
      }

      .nav-links a {
        color: #667eea;
        text-decoration: none;
        margin: 0 15px;
        padding: 8px 16px;
        border-radius: 6px;
        transition: background 0.2s;
      }

      .nav-links a:hover {
        background: rgba(102, 126, 234, 0.1);
      }

      .auth-section {
        background: white;
        padding: 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .auth-info {
        display: flex;
        align-items: center;
        gap: 15px;
      }

      .user-email {
        font-weight: 600;
        color: #2d3748;
      }

      .user-id {
        font-size: 0.9rem;
        color: #718096;
      }

      .not-authenticated {
        color: #e53e3e;
        font-weight: 500;
      }

      .admin-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
      }

      @media (max-width: 768px) {
        .admin-grid {
          grid-template-columns: 1fr;
        }
      }

      .admin-card {
        background: white;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .admin-card h3 {
        margin: 0 0 20px 0;
        color: #2d3748;
        border-bottom: 2px solid #e2e8f0;
        padding-bottom: 10px;
      }

      .form-group {
        margin-bottom: 20px;
      }

      label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
        color: #4a5568;
      }

      input,
      select {
        width: 100%;
        padding: 12px;
        border: 2px solid #e2e8f0;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.2s;
      }

      input:focus,
      select:focus {
        outline: none;
        border-color: #667eea;
      }

      button {
        background: #667eea;
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 6px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s;
        width: 100%;
      }

      button:hover {
        background: #5a67d8;
      }

      button:disabled {
        background: #a0aec0;
        cursor: not-allowed;
      }

      .log-container {
        background: #1a202c;
        color: #e2e8f0;
        padding: 20px;
        border-radius: 8px;
        font-family: 'SF Mono', Monaco, 'Consolas', monospace;
        max-height: 400px;
        overflow-y: auto;
        margin-top: 20px;
      }

      .log-entry {
        margin: 8px 0;
        padding: 6px 0;
        border-left: 3px solid transparent;
        padding-left: 12px;
      }

      .log-success {
        border-left-color: #48bb78;
        background: rgba(72, 187, 120, 0.1);
      }

      .log-error {
        border-left-color: #f56565;
        background: rgba(245, 101, 101, 0.1);
      }

      .log-warning {
        border-left-color: #ed8936;
        background: rgba(237, 137, 54, 0.1);
      }

      .log-info {
        border-left-color: #4299e1;
        background: rgba(66, 153, 225, 0.1);
      }

      .log-time {
        color: #a0aec0;
        margin-right: 10px;
      }

      .users-section {
        grid-column: 1 / -1;
      }

      .user-item {
        background: #f7fafc;
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 10px;
        border-left: 4px solid #e2e8f0;
      }

      .user-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
      }

      .role-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
      }

      .role-admin {
        background: #fed7d7;
        color: #c53030;
      }

      .role-coach {
        background: #c6f6d5;
        color: #22543d;
      }

      .role-scout {
        background: #bee3f8;
        color: #2a69ac;
      }

      .role-player {
        background: #fbb6ce;
        color: #97266d;
      }

      .role-fan {
        background: #faf089;
        color: #744210;
      }

      .role-none {
        background: #e2e8f0;
        color: #4a5568;
      }

      .user-meta {
        display: flex;
        gap: 20px;
      }

      .user-meta small {
        color: #718096;
      }

      .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.8rem;
        font-weight: 500;
      }

      .status-admin {
        background: #c6f6d5;
        color: #22543d;
      }

      .status-user {
        background: #fed7d7;
        color: #c53030;
      }

      .non-admin-message {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .non-admin-message h3 {
        color: #e53e3e;
        margin-bottom: 15px;
      }

      .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
      }

      .action-buttons button {
        flex: 1;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>üîß Admin Role Management</h1>
        <p>Firebase Functions Testing & User Management Interface</p>
      </div>

      <div class="nav-links">
        <a href="/">‚Üê Home</a>
        <a href="/functions-test.html">Function Tests</a>
        <a href="/admin.html">Main Admin</a>
        <a href="/login.html">Login</a>
      </div>

      <div class="auth-section">
        <h3>üîê Authentication Status</h3>
        <div id="auth-status">
          <span class="not-authenticated">Loading...</span>
        </div>
        <div style="margin-top: 10px">
          <span class="status-badge" id="admin-status">Checking...</span>
        </div>
      </div>

      <div
        id="non-admin-message"
        class="non-admin-message"
        style="display: none"
      >
        <h3>‚ö†Ô∏è Admin Access Required</h3>
        <p>You need administrator privileges to access this page.</p>
        <p>
          Please sign in with an admin account or contact your system
          administrator.
        </p>
      </div>

      <div id="admin-section" style="display: none">
        <div class="admin-grid">
          <!-- Role Assignment -->
          <div class="admin-card">
            <h3>üë• Assign User Role</h3>
            <form id="assign-role-form">
              <div class="form-group">
                <label for="userId">User ID:</label>
                <input
                  type="text"
                  id="userId"
                  name="userId"
                  required
                  placeholder="Enter Firebase User ID"
                />
              </div>
              <div class="form-group">
                <label for="role">Role:</label>
                <select id="role" name="role" required>
                  <option value="">Select a role</option>
                  <option value="admin">Admin</option>
                  <option value="coach">Coach</option>
                  <option value="scout">Scout</option>
                  <option value="player">Player</option>
                  <option value="fan">Fan</option>
                </select>
              </div>
              <button type="submit">Assign Role</button>
            </form>
          </div>

          <!-- User Creation -->
          <div class="admin-card">
            <h3>‚ûï Create New User</h3>
            <form id="create-user-form">
              <div class="form-group">
                <label for="email">Email:</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  required
                  placeholder="user@example.com"
                />
              </div>
              <div class="form-group">
                <label for="password">Password:</label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  required
                  placeholder="Minimum 6 characters"
                />
              </div>
              <div class="form-group">
                <label for="displayName">Display Name:</label>
                <input
                  type="text"
                  id="displayName"
                  name="displayName"
                  required
                  placeholder="Full Name"
                />
              </div>
              <div class="form-group">
                <label for="userRole">Initial Role:</label>
                <select id="userRole" name="role" required>
                  <option value="fan">Fan (Default)</option>
                  <option value="player">Player</option>
                  <option value="coach">Coach</option>
                  <option value="scout">Scout</option>
                  <option value="admin">Admin</option>
                </select>
              </div>
              <button type="submit">Create User</button>
            </form>
          </div>

          <!-- Role Check -->
          <div class="admin-card">
            <h3>üîç Check User Role</h3>
            <form id="role-check-form">
              <div class="form-group">
                <label for="checkUserId">User ID to Check:</label>
                <input
                  type="text"
                  id="checkUserId"
                  name="checkUserId"
                  required
                  placeholder="Enter Firebase User ID"
                />
              </div>
              <button type="submit">Check Role</button>
            </form>
          </div>

          <!-- Users List -->
          <div class="admin-card users-section">
            <h3>üìã Users List</h3>
            <div class="action-buttons">
              <button id="refresh-users-btn">üîÑ Refresh Users</button>
            </div>
            <div id="users-list" style="margin-top: 20px">
              <p>Click "Refresh Users" to load the users list</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Activity Log -->
      <div class="log-container">
        <h3 style="margin-top: 0; color: #e2e8f0">üìù Activity Log</h3>
        <div id="admin-log">
          <div class="log-entry log-info">
            <span class="log-time">${new Date().toLocaleTimeString()}</span>
            <span class="log-message"
              >Admin interface loaded. Checking authentication...</span
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Import Firebase modules -->
    <script type="module" src="/assets/js/firebaseConfig.js"></script>
    <script type="module" src="/assets/js/analyticsLogger.js"></script>
    <script type="module" src="/assets/js/adminRoleManager.js"></script>

    <script>
      // Update admin status display
      function updateAdminStatusDisplay(isAdmin) {
        const adminStatus = document.getElementById('admin-status');
        if (adminStatus) {
          adminStatus.textContent = isAdmin
            ? '‚úÖ Admin Access'
            : '‚ùå No Admin Access';
          adminStatus.className = `status-badge ${isAdmin ? 'status-admin' : 'status-user'}`;
        }
      }

      // Listen for admin status changes
      window.addEventListener('load', () => {
        // Check for admin manager periodically
        const checkAdminManager = setInterval(() => {
          if (window.adminManager) {
            clearInterval(checkAdminManager);

            // Listen for admin status changes
            const originalCheckAdminStatus =
              window.adminManager.checkAdminStatus;
            window.adminManager.checkAdminStatus = async function () {
              await originalCheckAdminStatus.call(this);
              updateAdminStatusDisplay(this.isAdmin);
            };
          }
        }, 100);
      });
    </script>
  </body>
</html>
