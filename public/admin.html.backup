<!doctype html>
<html lang="en">
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="https://www.gstatic.com" />
    <link rel="dns-prefetch" href="https://firebaseapp.com" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="format-detection" content="telephone=no" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="https://www.gstatic.com" />
    <link rel="dns-prefetch" href="https://firebaseapp.com" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="format-detection" content="telephone=no" />
    <meta charset="UTF-8" />
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://firestore.googleapis.com https://identitytoolkit.googleapis.com; frame-src 'self' https://www.google.com"
    />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta
      http-equiv="Referrer-Policy"
      content="strict-origin-when-cross-origin"
    />
    <meta
      http-equiv="Permissions-Policy"
      content="geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()"
    />
    <meta
      http-equiv="Strict-Transport-Security"
      content="max-age=31536000; includeSubDomains"
    />
    <!-- Security Headers -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://firestore.googleapis.com https://identitytoolkit.googleapis.com; frame-src 'self' https://www.google.com"
    />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="DENY" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta
      http-equiv="Referrer-Policy"
      content="strict-origin-when-cross-origin"
    />
    <meta
      http-equiv="Permissions-Policy"
      content="geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()"
    />
    <meta
      http-equiv="Strict-Transport-Security"
      content="max-age=31536000; includeSubDomains"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>3 Ball Admin Portal ‚Äî Super Admin CMS + Dev Console</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;900&family=Urbanist:wght@400;700;900&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://www.gstatic.com/firebasejs/1.7.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/1.7.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/1.7.0/firebase-firestore-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/1.7.0/firebase-storage-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/1.7.0/firebase-functions-compat.js"></script>
    <link rel="stylesheet" href="/assets/css/admin.css" />
    <script>
      // Loading optimization
      (function () {
        'use strict';

        // Lazy load images
        function lazyLoadImages() {
          const images = document.querySelectorAll('img[data-src]');
          const imageObserver = new IntersectionObserver(entries => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.classList.remove('lazy');
                imageObserver.unobserve(img);
              }
            });
          });
          images.forEach(img => imageObserver.observe(img));
        }

        // Prefetch critical resources
        function prefetchCriticalResources() {
          const criticalResources = [
            '/assets/css/index.css',
            '/assets/js/firebaseConfig.js',
            '/manifest.json',
          ];
          criticalResources.forEach(resource => {
            const link = document.createElement('link');
            link.rel = 'prefetch';
            link.href = resource;
            document.head.appendChild(link);
          });
        }

        // Optimize third-party scripts
        function optimizeThirdPartyScripts() {
          const scripts = document.querySelectorAll('script[src]');
          scripts.forEach(script => {
            if (
              !script.src.includes('firebaseConfig') &&
              !script.hasAttribute('defer')
            ) {
              script.defer = true;
            }
          });
        }

        // Initialize optimizations
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            lazyLoadImages();
            prefetchCriticalResources();
            optimizeThirdPartyScripts();
          });
        } else {
          lazyLoadImages();
          prefetchCriticalResources();
          optimizeThirdPartyScripts();
        }
      })();
    </script>
    <style>
      /* Critical CSS for faster loading */
      body {
        margin: 0;
        font-family:
          system-ui,
          -apple-system,
          sans-serif;
        background: #f8f9fa;
      }
      .header {
        background: #00b4d8;
        color: #fff;
        padding: 1rem;
        position: sticky;
        top: 0;
        z-index: 100;
      }
      .loading {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 50vh;
        font-size: 1.2rem;
      }
      .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
      }
      .btn-primary {
        background: #00b4d8;
        color: #fff;
      }
      .btn-primary:hover {
        background: #0095b8;
      }
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
      }
      .card {
        background: #fff;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      @media (max-width: 768px) {
        .container {
          padding: 0 0.5rem;
        }
      }
    </style>
    <style>
      /* Loading states */
      .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #00b4d8;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      .skeleton {
        background: linear-gradient(
          90deg,
          #f0f0f0 25%,
          #e0e0e0 50%,
          #f0f0f0 75%
        );
        background-size: 200% 100%;
        animation: skeleton-loading 1.5s infinite;
      }
      @keyframes skeleton-loading {
        0% {
          background-position: 200% 0;
        }
        100% {
          background-position: -200% 0;
        }
      }
      .fade-in {
        opacity: 0;
        animation: fadeIn 0.5s ease-in-out forwards;
      }
      @keyframes fadeIn {
        to {
          opacity: 1;
        }
      }
      .slide-in {
        transform: translateY(20px);
        opacity: 0;
        animation: slideIn 0.5s ease-out forwards;
      }
      @keyframes slideIn {
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }
      .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
      }
      .loading-overlay.hidden {
        display: none;
      }
    </style>
  <script src="/assets/js/securityFixesComprehensive.js"></script></head>
  <body>
    <div class="loading-screen" id="loadingScreen">
      <div class="loader"></div>
      <p>Loading Admin Portal...</p>
    </div>
    <div class="auth-wall" id="authWall">
      <div class="auth-form">
        <h1>üõ°Ô∏è Admin Access</h1>
        <p style="margin-bottom: 2rem; color: var(--text-muted)">
          Enter your administrator credentials to access the 3 Ball Network
          Admin Portal.
        </p>
        <div class="form-group">
          <label for="adminEmail">Admin Email</label
          ><input
            type="email"
            id="adminEmail"
            placeholder="admin@3ballnetwork.com"
            required
          />
        </div>
        <div class="form-group">
          <label for="adminPassword">Password</label
          ><input
            type="password"
            id="adminPassword"
            placeholder="Enter password"
            required
          />
        </div>
        <button class="admin-btn"  id="loginBtn">
          <span>üîê Login</span>
        </button>
        <div class="auth-options">
          <a href="#"  class="auth-link"
            >Forgot Password?</a
          ><a href="#"  class="auth-link">Setup 2FA</a>
        </div>
        <div class="auth-error" id="authError" style="display: none"></div>
      </div>
    </div>
    <div class="admin-container" id="adminContainer">
      <div class="admin-header">
        <div class="user-info">
          <div class="user-avatar" id="userAvatar">
            <img
              alt="Admin"
              id="userAvatarImg"
              style="width: 40px; height: 40px; border-radius: 50%"
            />
          </div>
          <div class="user-details">
            <div class="user-name" id="userName">Admin User</div>
            <div class="role-badge superadmin" id="userRole">Super Admin</div>
          </div>
          <button
            class="admin-btn"
            
            style="width: auto; padding: 0.5rem 1rem; font-size: 0.8rem"
          >
            üö™ Logout
          </button>
        </div>
        <h1>üõ°Ô∏è 3 Ball Network</h1>
        <p class="subtitle">Super Admin Portal & Developer Console</p>
        <div class="quick-stats">
          <div class="quick-stat">
            <div class="stat-number" id="quickUsers">-</div>
            <div class="stat-label">Users Online</div>
          </div>
          <div class="quick-stat">
            <div class="stat-number" id="quickGames">-</div>
            <div class="stat-label">Games Today</div>
          </div>
          <div class="quick-stat">
            <div class="stat-number" id="quickAlerts">-</div>
            <div class="stat-label">Alerts</div>
          </div>
        </div>
      </div>
      <div class="admin-nav">
        <div class="nav-tab active" >
          üìä Dashboard
        </div>
        <div class="nav-tab" >üé® CMS & Pages</div>
        <div class="nav-tab" >
          üë• User Management
        </div>
        <div class="nav-tab" >
          üéÆ Game & Video Control
        </div>
        <div class="nav-tab" >
          üóÑÔ∏è Firestore Explorer
        </div>
        <div class="nav-tab" >
          ÔøΩ Developer Console
        </div>
        <div class="nav-tab" >
          ‚öôÔ∏è Site Settings
        </div>
        <div class="nav-tab" >üí¨ Messaging</div>
        <div class="nav-tab" >üìà Analytics</div>
        <div class="nav-tab" >
          üõ°Ô∏è Moderation
        </div>
      </div>
      <div id="dashboard" class="admin-section active">
        <div class="section-header">
          <h2>üìä Dashboard Overview</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîÑ Refresh</button
            ><button class="admin-btn" >
              üìä Export
            </button>
          </div>
        </div>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-icon">üë•</div>
            <div class="stat-value" id="totalUsers">-</div>
            <div class="stat-label">Total Users</div>
            <div class="stat-change positive">+12% this week</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üü¢</div>
            <div class="stat-value" id="activeUsers">-</div>
            <div class="stat-label">Active Today</div>
            <div class="stat-change positive">+8% from yesterday</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üéÆ</div>
            <div class="stat-value" id="totalGames">-</div>
            <div class="stat-label">Games Analyzed</div>
            <div class="stat-change neutral">Same as yesterday</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">‚ö†Ô∏è</div>
            <div class="stat-value" id="pendingReports">-</div>
            <div class="stat-label">Pending Reports</div>
            <div class="stat-change negative">+3 new reports</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üí∞</div>
            <div class="stat-value" id="revenue">-</div>
            <div class="stat-label">Monthly Revenue</div>
            <div class="stat-change positive">+15% this month</div>
          </div>
          <div class="stat-card">
            <div class="stat-icon">üéØ</div>
            <div class="stat-value" id="conversionRate">-</div>
            <div class="stat-label">Conversion Rate</div>
            <div class="stat-change positive">+2.3% this week</div>
          </div>
        </div>
        <div class="dashboard-charts">
          <div class="chart-container">
            <h3>User Activity (Last 30 Days)</h3>
            <canvas id="userActivityChart"></canvas>
          </div>
          <div class="chart-container">
            <h3>Game Analysis Trends</h3>
            <canvas id="gameAnalysisChart"></canvas>
          </div>
        </div>
        <div class="dashboard-tables">
          <div class="table-container">
            <h3>Recent User Activity</h3>
            <div class="table-wrapper">
              <table id="recentActivityTable">
                <thead>
                  <tr>
                    <th>User</th>
                    <th>Action</th>
                    <th>Time</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
          <div class="table-container">
            <h3>System Alerts</h3>
            <div class="table-wrapper">
              <table id="systemAlertsTable">
                <thead>
                  <tr>
                    <th>Alert</th>
                    <th>Severity</th>
                    <th>Time</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
      <div id="users" class="admin-section">
        <div class="section-header">
          <h2>üë• User Management</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîÑ Refresh</button
            ><button class="admin-btn" >üìä Export</button
            ><button class="admin-btn" >
              ‚ûï Add User
            </button>
          </div>
        </div>
        <div class="user-controls">
          <div class="form-grid">
            <div class="form-group">
              <label>Search Users</label
              ><input
                type="text"
                id="userSearch"
                placeholder="Search by name, email, or ID"
              />
            </div>
            <div class="form-group">
              <label>Filter by Role</label
              ><select id="roleFilter">
                <option>All Roles</option>
                <option value="player">Players</option>
                <option value="coach">Coaches</option>
                <option value="scout">Scouts</option>
                <option value="fan">Fans</option>
                <option value="admin">Admins</option>
              </select>
            </div>
            <div class="form-group">
              <label>Filter by Status</label
              ><select id="statusFilter">
                <option>All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
                <option value="banned">Banned</option>
                <option value="pending">Pending Verification</option>
              </select>
            </div>
          </div>
        </div>
        <div class="user-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-icon">üë•</div>
              <div class="stat-value" id="totalUsersCount">-</div>
              <div class="stat-label">Total Users</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üü¢</div>
              <div class="stat-value" id="activeUsersCount">-</div>
              <div class="stat-label">Active Users</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üö´</div>
              <div class="stat-value" id="bannedUsersCount">-</div>
              <div class="stat-label">Banned Users</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">‚è≥</div>
              <div class="stat-value" id="pendingUsersCount">-</div>
              <div class="stat-label">Pending Verification</div>
            </div>
          </div>
        </div>
        <div class="user-table-container">
          <div class="table-wrapper">
            <table id="usersTable">
              <thead>
                <tr>
                  <th>Avatar</th>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Status</th>
                  <th>Join Date</th>
                  <th>Last Active</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="usersTableBody"></tbody>
            </table>
          </div>
        </div>
        <div class="user-actions">
          <h3>Bulk Actions</h3>
          <div class="form-grid">
            <div class="form-group">
              <label>Selected Users Action</label
              ><select id="bulkAction">
                <option>Choose Action</option>
                <option value="activate">Activate</option>
                <option value="deactivate">Deactivate</option>
                <option value="ban">Ban</option>
                <option value="unban">Unban</option>
                <option value="delete">Delete</option>
                <option value="export">Export Selected</option>
              </select>
            </div>
            <div class="form-group">
              <button class="admin-btn" >
                Execute Action
              </button>
            </div>
          </div>
        </div>
      </div>
      <div id="cms" class="admin-section">
        <div class="section-header">
          <h2>üìù CMS & Page Builder</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              ‚ûï New Page</button
            ><button class="admin-btn" >
              üì• Import Content</button
            ><button class="admin-btn" >
              üì§ Export Site</button
            ><button class="admin-btn" >
              üëÅÔ∏è Preview
            </button>
          </div>
        </div>
        <div class="cms-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="totalPages">-</div>
              <div class="stat-label">Total Pages</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="publishedPages">-</div>
              <div class="stat-label">Published</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="draftPages">-</div>
              <div class="stat-label">Drafts</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="mediaFiles">-</div>
              <div class="stat-label">Media Files</div>
            </div>
          </div>
        </div>
        <div class="cms-controls">
          <div class="form-grid">
            <div class="form-group">
              <label>Page Template</label
              ><select id="pageTemplate">
                <option value="default">Default Layout</option>
                <option value="landing">Landing Page</option>
                <option value="portal">Portal Page</option>
                <option value="dashboard">Dashboard</option>
                <option value="custom">Custom Template</option>
              </select>
            </div>
            <div class="form-group">
              <label>Page Status</label
              ><select id="pageStatus">
                <option value="all">All Pages</option>
                <option value="published">Published</option>
                <option value="draft">Draft</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            <div class="form-group">
              <label>Search Pages</label
              ><input
                type="text"
                id="pageSearch"
                placeholder="Search pages..."
                oninput="searchPages()"
              />
            </div>
          </div>
        </div>
        <div class="cms-editor">
          <div class="editor-tabs">
            <div class="tab-nav">
              <button
                class="tab-btn active"
                
              >
                Visual Editor</button
              ><button class="tab-btn" >
                Code Editor</button
              ><button class="tab-btn" >
                Preview
              </button>
            </div>
            <div id="visual-editor" class="editor-panel active">
              <div class="editor-toolbar">
                <button class="toolbar-btn" >
                  üéØ Hero Section</button
                ><button class="toolbar-btn" >
                  üìù Text Block</button
                ><button class="toolbar-btn" >
                  üñºÔ∏è Image</button
                ><button class="toolbar-btn" >
                  üé• Video</button
                ><button class="toolbar-btn" >
                  üìã Form</button
                ><button class="toolbar-btn" >
                  üñºÔ∏è Gallery
                </button>
              </div>
              <div class="editor-canvas" id="visualCanvas">
                <div class="canvas-placeholder">
                  <p>Drop components here to build your page</p>
                </div>
              </div>
            </div>
            <div id="code-editor" class="editor-panel">
              <textarea
                id="codeEditor"
                placeholder="Enter HTML/CSS/JavaScript code..."
              ></textarea>
            </div>
            <div id="preview-editor" class="editor-panel">
              <iframe id="previewFrame" src="about:blank"></iframe>
            </div>
          </div>
        </div>
        <div class="pages-list">
          <h3>üìÑ Page Management</h3>
          <div class="table-container">
            <table class="admin-table">
              <thead>
                <tr>
                  <th>Page Name</th>
                  <th>Template</th>
                  <th>Status</th>
                  <th>Last Modified</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="pagesTableBody">
                <tr>
                  <td colspan="5" class="loading">
                    <div class="spinner"></div>
                    <p>Loading pages...</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
      <div id="games" class="admin-section">
        <div class="section-header">
          <h2>üéÆ Game & Video Control</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üì§ Upload Video</button
            ><button class="admin-btn" >
              üéÆ New Game Session</button
            ><button class="admin-btn" >
              üì∫ Schedule Stream</button
            ><button class="admin-btn" >
              üõ°Ô∏è Moderate Content
            </button>
          </div>
        </div>
        <div class="game-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="activeGames">-</div>
              <div class="stat-label">Active Games</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="totalVideos">-</div>
              <div class="stat-label">Total Videos</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="liveStreams">-</div>
              <div class="stat-label">Live Streams</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="viewerCount">-</div>
              <div class="stat-label">Current Viewers</div>
            </div>
          </div>
        </div>
        <div class="game-controls">
          <div class="control-tabs">
            <div class="tab-nav">
              <button class="tab-btn active" >
                üìπ Videos</button
              ><button class="tab-btn" >
                üì∫ Streams</button
              ><button class="tab-btn" >
                üéÆ Game Sessions</button
              ><button class="tab-btn" >
                ‚≠ê Highlights
              </button>
            </div>
            <div id="videos-tab" class="control-panel active">
              <div class="video-upload">
                <h3>üì§ Video Upload</h3>
                <div class="upload-area" id="videoUploadArea">
                  <input type="file" id="videoFile" accept="video/*" multiple />
                  <div class="upload-placeholder">
                    <p>Drag & drop video files here or click to select</p>
                    <small>Supported formats:MP4, AVI, MOV, WebM</small>
                  </div>
                </div>
                <div
                  class="upload-progress"
                  id="uploadProgress"
                  style="display: none"
                >
                  <div class="progress-bar">
                    <div class="progress-fill"></div>
                  </div>
                  <span class="progress-text">0%</span>
                </div>
              </div>
              <div class="video-library">
                <h3>üìö Video Library</h3>
                <div class="library-controls">
                  <input
                    type="text"
                    placeholder="Search videos..."
                    oninput="searchVideos()"
                  /><select >
                    <option value="all">All Videos</option>
                    <option value="published">Published</option>
                    <option value="draft">Draft</option>
                    <option value="private">Private</option>
                  </select>
                </div>
                <div class="video-grid" id="videoGrid">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading videos...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="streams-tab" class="control-panel">
              <div class="stream-setup">
                <h3>üì∫ Live Stream Setup</h3>
                <div class="form-grid">
                  <div class="form-group">
                    <label>Stream Title</label
                    ><input
                      type="text"
                      id="streamTitle"
                      placeholder="Enter stream title"
                    />
                  </div>
                  <div class="form-group">
                    <label>Stream Key</label
                    ><input
                      type="text"
                      id="streamKey"
                      placeholder="Generated automatically"
                    />
                  </div>
                  <div class="form-group">
                    <label>Stream Quality</label
                    ><select id="streamQuality">
                      <option value="1080p">1080p (HD)</option>
                      <option value="720p">720p</option>
                      <option value="480p">480p</option>
                      <option value="auto">Auto</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Privacy Setting</label
                    ><select id="streamPrivacy">
                      <option value="public">Public</option>
                      <option value="unlisted">Unlisted</option>
                      <option value="private">Private</option>
                    </select>
                  </div>
                </div>
                <button class="admin-btn" >
                  üî¥ Start Live Stream
                </button>
              </div>
              <div class="active-streams">
                <h3>üî¥ Active Streams</h3>
                <div id="activeStreamsList">
                  <div class="no-streams"><p>No active streams</p></div>
                </div>
              </div>
            </div>
            <div id="sessions-tab" class="control-panel">
              <div class="session-creator">
                <h3>üéÆ Game Session Creator</h3>
                <div class="form-grid">
                  <div class="form-group">
                    <label>Game Type</label
                    ><select id="gameType">
                      <option value="3-ball">3-Ball Tournament</option>
                      <option value="skills">Skills Challenge</option>
                      <option value="training">Training Session</option>
                      <option value="scrimmage">Scrimmage</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Session Name</label
                    ><input
                      type="text"
                      id="sessionName"
                      placeholder="Enter session name"
                    />
                  </div>
                  <div class="form-group">
                    <label>Max Players</label
                    ><input
                      type="number"
                      id="maxPlayers"
                      min="1"
                      max="50"
                      value="10"
                    />
                  </div>
                  <div class="form-group">
                    <label>Duration (minutes)</label
                    ><input
                      type="number"
                      id="sessionDuration"
                      min="5"
                      max="180"
                      value="60"
                    />
                  </div>
                </div>
                <button class="admin-btn" >
                  üéÆ Create Session
                </button>
              </div>
              <div class="game-sessions">
                <h3>üéÆ Active Sessions</h3>
                <div id="gameSessionsList">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading sessions...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="highlights-tab" class="control-panel">
              <div class="highlight-creator">
                <h3>‚≠ê Highlight Creator</h3>
                <div class="form-grid">
                  <div class="form-group">
                    <label>Source Video</label
                    ><select id="sourceVideo">
                      <option>Select video...</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Start Time (seconds)</label
                    ><input
                      type="number"
                      id="highlightStart"
                      min="0"
                      value="0"
                    />
                  </div>
                  <div class="form-group">
                    <label>End Time (seconds)</label
                    ><input
                      type="number"
                      id="highlightEnd"
                      min="1"
                      value="30"
                    />
                  </div>
                  <div class="form-group">
                    <label>Highlight Title</label
                    ><input
                      type="text"
                      id="highlightTitle"
                      placeholder="Enter highlight title"
                    />
                  </div>
                </div>
                <button class="admin-btn" >
                  ‚≠ê Create Highlight
                </button>
              </div>
              <div class="highlights-list">
                <h3>‚≠ê Generated Highlights</h3>
                <div id="highlightsList">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading highlights...</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="firestore" class="admin-section">
        <div class="section-header">
          <h2>üî• Firestore Explorer</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîÑ Refresh</button
            ><button class="admin-btn" >
              ‚ûï New Collection</button
            ><button class="admin-btn" >
              üì• Import Data</button
            ><button class="admin-btn" >
              üì§ Export DB
            </button>
          </div>
        </div>
        <div class="firestore-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="totalCollections">-</div>
              <div class="stat-label">Collections</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="totalDocuments">-</div>
              <div class="stat-label">Documents</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="dbSize">-</div>
              <div class="stat-label">Database Size</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="queryCount">-</div>
              <div class="stat-label">Daily Queries</div>
            </div>
          </div>
        </div>
        <div class="firestore-browser">
          <div class="browser-layout">
            <div class="collections-panel">
              <h3>üìÅ Collections</h3>
              <div class="collection-search">
                <input
                  type="text"
                  placeholder="Search collections..."
                  oninput="searchCollections()"
                />
              </div>
              <div class="collections-list" id="collectionsList">
                <div class="loading">
                  <div class="spinner"></div>
                  <p>Loading collections...</p>
                </div>
              </div>
            </div>
            <div class="documents-panel">
              <h3>üìÑ Documents</h3>
              <div class="document-controls">
                <input
                  type="text"
                  placeholder="Search documents..."
                  oninput="searchDocuments()"
                /><button class="admin-btn" >
                  ‚ûï Add Document
                </button>
              </div>
              <div class="documents-list" id="documentsList">
                <div class="no-collection">
                  <p>Select a collection to view documents</p>
                </div>
              </div>
            </div>
            <div class="document-editor">
              <h3>‚úèÔ∏è Document Editor</h3>
              <div class="editor-controls">
                <button class="admin-btn" >
                  üíæ Save</button
                ><button class="admin-btn danger" >
                  üóëÔ∏è Delete</button
                ><button class="admin-btn" >
                  üìã Duplicate
                </button>
              </div>
              <div class="json-editor">
                <textarea
                  id="documentEditor"
                  placeholder="Select a document to edit..."
                ></textarea>
              </div>
            </div>
          </div>
        </div>
        <div class="firestore-tools">
          <h3>üõ†Ô∏è Database Tools</h3>
          <div class="tools-grid">
            <div class="tool-card">
              <h4>üîç Query Builder</h4>
              <div class="query-builder">
                <select id="queryCollection">
                  <option>Select collection...</option></select
                ><select id="queryField">
                  <option>Select field...</option></select
                ><select id="queryOperator">
                  <option value="==">equals</option>
                  <option value="!=">not equals</option>
                  <option value=">">greater than</option>
                  <option value=">=">greater than or equal</option>
                  <option value="<">less than</option>
                  <option value="<=">less than or equal</option>
                  <option value="array-contains">array contains</option>
                  <option value="in">in</option>
                  <option value="not-in">not in</option></select
                ><input
                  type="text"
                  id="queryValue"
                  placeholder="Value"
                /><button class="admin-btn" >
                  üîç Execute Query
                </button>
              </div>
            </div>
            <div class="tool-card">
              <h4>üìä Index Management</h4>
              <div class="index-manager">
                <select id="indexCollection">
                  <option>Select collection...</option></select
                ><input
                  type="text"
                  id="indexField"
                  placeholder="Field name"
                /><select id="indexType">
                  <option value="asc">Ascending</option>
                  <option value="desc">Descending</option></select
                ><button class="admin-btn" >
                  ‚ûï Create Index
                </button>
              </div>
            </div>
            <div class="tool-card">
              <h4>üîê Security Rules</h4>
              <div class="security-rules">
                <textarea
                  id="securityRules"
                  placeholder="Enter Firestore security rules..."
                ></textarea
                ><button class="admin-btn" >
                  üîê Update Rules
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="developer" class="admin-section">
        <div class="section-header">
          <h2>üë®‚Äçüíª Developer Console</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üóëÔ∏è Clear Console</button
            ><button class="admin-btn" >
              üì• Download Logs</button
            ><button class="admin-btn" >
              üîç System Check</button
            ><button class="admin-btn" >
              üêõ Debug Mode
            </button>
          </div>
        </div>
        <div class="dev-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="errorCount">-</div>
              <div class="stat-label">Errors (24h)</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="warningCount">-</div>
              <div class="stat-label">Warnings</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="apiCalls">-</div>
              <div class="stat-label">API Calls</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="serverUptime">-</div>
              <div class="stat-label">Server Uptime</div>
            </div>
          </div>
        </div>
        <div class="dev-tools">
          <div class="tool-tabs">
            <div class="tab-nav">
              <button class="tab-btn active" >
                üñ•Ô∏è Console</button
              ><button class="tab-btn" >
                üìã Logs</button
              ><button class="tab-btn" >
                üîó API Tester</button
              ><button class="tab-btn" >
                ‚ö° Performance
              </button>
            </div>
            <div id="console-tab" class="dev-panel active">
              <div class="console-container">
                <div class="console-output" id="consoleOutput">
                  <div class="console-welcome">
                    <p>üöÄ 3BallNetwork Developer Console</p>
                    <p>Type 'help' for available commands</p>
                  </div>
                </div>
                <div class="console-input">
                  <span class="console-prompt">$</span
                  ><input
                    type="text"
                    id="consoleCommand"
                    placeholder="Enter command..."
                    onkeypress="handleConsoleInput(event)"
                  /><button class="admin-btn" >
                    Execute
                  </button>
                </div>
              </div>
            </div>
            <div id="logs-tab" class="dev-panel">
              <div class="logs-container">
                <div class="logs-filters">
                  <select id="logLevel">
                    <option value="all">All Levels</option>
                    <option value="error">Error</option>
                    <option value="warning">Warning</option>
                    <option value="info">Info</option>
                    <option value="debug">Debug</option></select
                  ><select id="logSource">
                    <option value="all">All Sources</option>
                    <option value="server">Server</option>
                    <option value="client">Client</option>
                    <option value="database">Database</option>
                    <option value="auth">Authentication</option></select
                  ><input
                    type="text"
                    id="logSearch"
                    placeholder="Search logs..."
                    oninput="filterLogs()"
                  />
                </div>
                <div class="logs-viewer" id="logsViewer">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading logs...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="api-tab" class="dev-panel">
              <div class="api-tester">
                <h3>üîó API Endpoint Tester</h3>
                <div class="form-grid">
                  <div class="form-group">
                    <label>HTTP Method</label
                    ><select id="apiMethod">
                      <option value="GET">GET</option>
                      <option value="POST">POST</option>
                      <option value="PUT">PUT</option>
                      <option value="DELETE">DELETE</option>
                      <option value="PATCH">PATCH</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Endpoint URL</label
                    ><input
                      type="text"
                      id="apiUrl"
                      placeholder="https://api.3ballnetwork.com/v1/..."
                    />
                  </div>
                  <div class="form-group">
                    <label>Headers (JSON)</label
                    ><textarea
                      id="apiHeaders"
                      rows="3"
                      placeholder='{"Content-Type":"application/json"}'
                    ></textarea>
                  </div>
                  <div class="form-group">
                    <label>Request Body (JSON)</label
                    ><textarea
                      id="apiBody"
                      rows="5"
                      placeholder='{"key":"value"}'
                    ></textarea>
                  </div>
                </div>
                <button class="admin-btn" >
                  üöÄ Send Request
                </button>
                <div class="api-response" id="apiResponse">
                  <h4>Response</h4>
                  <div class="response-container">
                    <div class="response-placeholder">
                      <p>Send a request to see the response</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div id="performance-tab" class="dev-panel">
              <div class="performance-monitor">
                <h3>‚ö° Performance Monitor</h3>
                <div class="performance-charts">
                  <div class="chart-container">
                    <canvas id="responseTimeChart"></canvas>
                  </div>
                  <div class="chart-container">
                    <canvas id="memoryUsageChart"></canvas>
                  </div>
                </div>
                <div class="performance-metrics">
                  <div class="metrics-grid">
                    <div class="metric-card">
                      <h4>Response Time</h4>
                      <div class="metric-value" id="avgResponseTime">-</div>
                      <div class="metric-label">Average (ms)</div>
                    </div>
                    <div class="metric-card">
                      <h4>Memory Usage</h4>
                      <div class="metric-value" id="memoryUsage">-</div>
                      <div class="metric-label">Current (MB)</div>
                    </div>
                    <div class="metric-card">
                      <h4>CPU Usage</h4>
                      <div class="metric-value" id="cpuUsage">-</div>
                      <div class="metric-label">Current (%)</div>
                    </div>
                    <div class="metric-card">
                      <h4>Active Connections</h4>
                      <div class="metric-value" id="activeConnections">-</div>
                      <div class="metric-label">Current</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="messaging" class="admin-section">
        <div class="section-header">
          <h2>üí¨ Messaging System</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              ‚úâÔ∏è Compose</button
            ><button class="admin-btn" >
              üì¢ Broadcast</button
            ><button class="admin-btn" >
              üìù Template</button
            ><button class="admin-btn" >
              ‚è∞ Schedule
            </button>
          </div>
        </div>
        <div class="messaging-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="totalMessages">-</div>
              <div class="stat-label">Total Messages</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="sentToday">-</div>
              <div class="stat-label">Sent Today</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="deliveryRate">-</div>
              <div class="stat-label">Delivery Rate</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="openRate">-</div>
              <div class="stat-label">Open Rate</div>
            </div>
          </div>
        </div>
        <div class="messaging-tools">
          <div class="msg-tabs">
            <div class="tab-nav">
              <button class="tab-btn active" >
                ‚úâÔ∏è Compose</button
              ><button class="tab-btn" >
                üìù Templates</button
              ><button class="tab-btn" >
                üì¢ Campaigns</button
              ><button class="tab-btn" >
                üìä Analytics
              </button>
            </div>
            <div id="compose-tab" class="msg-panel active">
              <div class="message-composer">
                <h3>‚úâÔ∏è Compose Message</h3>
                <div class="form-grid">
                  <div class="form-group">
                    <label>Message Type</label
                    ><select id="messageType">
                      <option value="email">Email</option>
                      <option value="sms">SMS</option>
                      <option value="push">Push Notification</option>
                      <option value="in-app">In-App Message</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Recipients</label
                    ><select id="recipients" multiple>
                      <option value="all">All Users</option>
                      <option value="players">Players Only</option>
                      <option value="coaches">Coaches Only</option>
                      <option value="fans">Fans Only</option>
                      <option value="scouts">Scouts Only</option>
                      <option value="premium">Premium Users</option>
                    </select>
                  </div>
                  <div class="form-group">
                    <label>Subject</label
                    ><input
                      type="text"
                      id="messageSubject"
                      placeholder="Enter message subject"
                    />
                  </div>
                  <div class="form-group">
                    <label>Message Content</label
                    ><textarea
                      id="messageContent"
                      rows="8"
                      placeholder="Enter your message..."
                    ></textarea>
                  </div>
                  <div class="form-group">
                    <label>Send Options</label>
                    <div class="send-options">
                      <label
                        ><input
                          type="radio"
                          name="sendOption"
                          value="now"
                          checked
                        />
                        Send Now</label
                      ><label
                        ><input
                          type="radio"
                          name="sendOption"
                          value="schedule"
                        />
                        Schedule</label
                      ><input
                        type="datetime-local"
                        id="scheduleTime"
                        style="display: none"
                      />
                    </div>
                  </div>
                </div>
                <div class="composer-actions">
                  <button class="admin-btn" >
                    üëÅÔ∏è Preview</button
                  ><button class="admin-btn" >
                    üíæ Save Draft</button
                  ><button class="admin-btn success" >
                    üì§ Send Message
                  </button>
                </div>
              </div>
            </div>
            <div id="templates-tab" class="msg-panel">
              <div class="template-manager">
                <h3>üìù Message Templates</h3>
                <div class="template-actions">
                  <button class="admin-btn" >
                    ‚ûï New Template</button
                  ><input
                    type="text"
                    placeholder="Search templates..."
                    oninput="searchTemplates()"
                  />
                </div>
                <div class="templates-grid" id="templatesGrid">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading templates...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="campaigns-tab" class="msg-panel">
              <div class="campaign-manager">
                <h3>üì¢ Message Campaigns</h3>
                <div class="campaign-actions">
                  <button class="admin-btn" >
                    ‚ûï New Campaign</button
                  ><button class="admin-btn" >
                    üì• Import
                  </button>
                </div>
                <div class="campaigns-list" id="campaignsList">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading campaigns...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="analytics-tab" class="msg-panel">
              <div class="message-analytics">
                <h3>üìä Message Analytics</h3>
                <div class="analytics-charts">
                  <div class="chart-container">
                    <canvas id="messageStatsChart"></canvas>
                  </div>
                  <div class="chart-container">
                    <canvas id="engagementChart"></canvas>
                  </div>
                </div>
                <div class="analytics-table">
                  <table class="admin-table">
                    <thead>
                      <tr>
                        <th>Campaign</th>
                        <th>Sent</th>
                        <th>Delivered</th>
                        <th>Opened</th>
                        <th>Clicked</th>
                        <th>Conversion</th>
                      </tr>
                    </thead>
                    <tbody id="analyticsTableBody">
                      <tr>
                        <td colspan="6" class="loading">
                          <div class="spinner"></div>
                          <p>Loading analytics...</p>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="moderation" class="admin-section">
        <div class="section-header">
          <h2>üõ°Ô∏è Moderation Tools</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîç Scan Content</button
            ><button class="admin-btn" >
              üìã Review Reports</button
            ><button class="admin-btn" >
              üîß Update Filters</button
            ><button class="admin-btn" >
              üì• Export Log
            </button>
          </div>
        </div>
        <div class="moderation-stats">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-value" id="pendingReports">-</div>
              <div class="stat-label">Pending Reports</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="autoModerated">-</div>
              <div class="stat-label">Auto-Moderated</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="manualReviews">-</div>
              <div class="stat-label">Manual Reviews</div>
            </div>
            <div class="stat-card">
              <div class="stat-value" id="moderationAccuracy">-</div>
              <div class="stat-label">Accuracy Rate</div>
            </div>
          </div>
        </div>
        <div class="moderation-tools">
          <div class="mod-tabs">
            <div class="tab-nav">
              <button class="tab-btn active" >
                üìã Reports</button
              ><button class="tab-btn" >
                üîß Filters</button
              ><button class="tab-btn" >
                üë• User Actions</button
              ><button class="tab-btn" >
                üìú Logs
              </button>
            </div>
            <div id="reports-tab" class="mod-panel active">
              <div class="reports-manager">
                <h3>üìã Content Reports</h3>
                <div class="report-filters">
                  <select id="reportStatus">
                    <option value="all">All Reports</option>
                    <option value="pending">Pending</option>
                    <option value="resolved">Resolved</option>
                    <option value="dismissed">Dismissed</option></select
                  ><select id="reportType">
                    <option value="all">All Types</option>
                    <option value="spam">Spam</option>
                    <option value="harassment">Harassment</option>
                    <option value="inappropriate">Inappropriate</option>
                    <option value="copyright">Copyright</option>
                    <option value="other">Other</option></select
                  ><input
                    type="text"
                    placeholder="Search reports..."
                    oninput="searchReports()"
                  />
                </div>
                <div class="reports-queue" id="reportsQueue">
                  <div class="loading">
                    <div class="spinner"></div>
                    <p>Loading reports...</p>
                  </div>
                </div>
              </div>
            </div>
            <div id="filters-tab" class="mod-panel">
              <div class="filters-manager">
                <h3>üîß Content Filters</h3>
                <div class="filter-categories">
                  <div class="filter-category">
                    <h4>üî§ Text Filters</h4>
                    <div class="filter-list" id="textFilters">
                      <div class="filter-input">
                        <input
                          type="text"
                          placeholder="Add word or phrase..."
                        /><button class="admin-btn" >
                          ‚ûï Add
                        </button>
                      </div>
                    </div>
                  </div>
                  <div class="filter-category">
                    <h4>üñºÔ∏è Image Filters</h4>
                    <div class="filter-settings">
                      <label
                        ><input type="checkbox" checked /> Enable AI image
                        scanning</label
                      ><label
                        ><input type="checkbox" checked /> Block explicit
                        content</label
                      ><label
                        ><input type="checkbox" /> Block copyrighted
                        images</label
                      >
                    </div>
                  </div>
                  <div class="filter-category">
                    <h4>üé• Video Filters</h4>
                    <div class="filter-settings">
                      <label
                        ><input type="checkbox" checked /> Enable AI video
                        scanning</label
                      ><label
                        ><input type="checkbox" checked /> Block explicit
                        content</label
                      ><label
                        ><input type="checkbox" /> Block copyrighted
                        videos</label
                      >
                    </div>
                  </div>
                  <div class="filter-category">
                    <h4>üîó Link Filters</h4>
                    <div class="filter-list" id="linkFilters">
                      <div class="filter-input">
                        <input
                          type="text"
                          placeholder="Add blocked domain..."
                        /><button class="admin-btn" >
                          ‚ûï Add
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="filter-actions">
                  <button class="admin-btn" >
                    üß™ Test Filters</button
                  ><button class="admin-btn" >
                    üì• Export</button
                  ><button class="admin-btn" >
                    üì§ Import</button
                  ><button class="admin-btn success" >
                    üíæ Save All
                  </button>
                </div>
              </div>
            </div>
            <div id="users-tab" class="mod-panel">
              <div class="user-actions">
                <h3>üë• User Moderation</h3>
                <div class="user-search">
                  <input
                    type="text"
                    id="userSearchInput"
                    placeholder="Search users..."
                  /><button class="admin-btn" >
                    üîç Search
                  </button>
                </div>
                <div class="user-results" id="userResults">
                  <div class="no-results">
                    <p>Search for users to moderate</p>
                  </div>
                </div>
                <div class="bulk-actions">
                  <h4>üîß Bulk Actions</h4>
                  <div class="form-grid">
                    <div class="form-group">
                      <label>Action Type</label
                      ><select id="bulkAction">
                        <option value="warn">Send Warning</option>
                        <option value="suspend">Suspend Account</option>
                        <option value="ban">Ban Account</option>
                        <option value="delete">Delete Account</option>
                      </select>
                    </div>
                    <div class="form-group">
                      <label>Reason</label
                      ><textarea
                        id="actionReason"
                        placeholder="Enter reason for action..."
                      ></textarea>
                    </div>
                    <div class="form-group">
                      <label>Duration (for suspensions)</label
                      ><select id="actionDuration">
                        <option value="1">1 Day</option>
                        <option value="7">1 Week</option>
                        <option value="30">1 Month</option>
                        <option value="365">1 Year</option>
                        <option value="permanent">Permanent</option>
                      </select>
                    </div>
                  </div>
                  <button
                    class="admin-btn danger"
                    
                  >
                    ‚ö†Ô∏è Execute Action
                  </button>
                </div>
              </div>
            </div>
            <div id="logs-tab" class="mod-panel">
              <div class="moderation-logs">
                <h3>üìú Moderation Logs</h3>
                <div class="log-filters">
                  <select id="logAction">
                    <option value="all">All Actions</option>
                    <option value="warn">Warnings</option>
                    <option value="suspend">Suspensions</option>
                    <option value="ban">Bans</option>
                    <option value="delete">Deletions</option></select
                  ><select id="logModerator">
                    <option value="all">All Moderators</option>
                    <option value="system">System</option></select
                  ><input type="date" id="logDate" /><button
                    class="admin-btn"
                    
                  >
                    üîç Filter
                  </button>
                </div>
                <div class="logs-table">
                  <table class="admin-table">
                    <thead>
                      <tr>
                        <th>Time</th>
                        <th>Action</th>
                        <th>User</th>
                        <th>Moderator</th>
                        <th>Reason</th>
                        <th>Duration</th>
                      </tr>
                    </thead>
                    <tbody id="moderationLogsBody">
                      <tr>
                        <td colspan="6" class="loading">
                          <div class="spinner"></div>
                          <p>Loading logs...</p>
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="analytics" class="admin-section">
        <div class="section-header">
          <h2>üìà Advanced Analytics</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîÑ Refresh</button
            ><button class="admin-btn" >
              üìä Export Report</button
            ><button class="admin-btn" >
              üìÖ Schedule Report
            </button>
          </div>
        </div>
        <div class="analytics-controls">
          <div class="form-grid">
            <div class="form-group">
              <label>Date Range</label
              ><select id="dateRange">
                <option value="today">Today</option>
                <option value="week">Last 7 Days</option>
                <option value="month">Last 30 Days</option>
                <option value="quarter">Last 90 Days</option>
                <option value="year">Last Year</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
            <div class="form-group">
              <label>Start Date</label
              ><input type="date" id="analyticsStartDate" />
            </div>
            <div class="form-group">
              <label>End Date</label><input type="date" id="analyticsEndDate" />
            </div>
          </div>
        </div>
        <div class="analytics-overview">
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-icon">üëÅÔ∏è</div>
              <div class="stat-value" id="pageViews">-</div>
              <div class="stat-label">Page Views</div>
              <div class="stat-change positive">+5.2% from last period</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üë•</div>
              <div class="stat-value" id="uniqueUsers">-</div>
              <div class="stat-label">Unique Users</div>
              <div class="stat-change positive">+12.8% from last period</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">‚è±Ô∏è</div>
              <div class="stat-value" id="avgSessionTime">-</div>
              <div class="stat-label">Avg Session Time</div>
              <div class="stat-change neutral">No change</div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üì±</div>
              <div class="stat-value" id="bounceRate">-</div>
              <div class="stat-label">Bounce Rate</div>
              <div class="stat-change negative">+2.1% from last period</div>
            </div>
          </div>
        </div>
        <div class="analytics-charts">
          <div class="chart-container">
            <h3>Daily Active Users</h3>
            <canvas id="dailyActiveChart"></canvas>
          </div>
          <div class="chart-container">
            <h3>User Acquisition</h3>
            <canvas id="acquisitionChart"></canvas>
          </div>
          <div class="chart-container">
            <h3>Platform Usage Distribution</h3>
            <canvas id="platformChart"></canvas>
          </div>
          <div class="chart-container">
            <h3>Feature Usage Analytics</h3>
            <canvas id="featureUsageChart"></canvas>
          </div>
        </div>
        <div class="analytics-tables">
          <div class="table-container">
            <h3>Top Pages</h3>
            <div class="table-wrapper">
              <table id="topPagesTable">
                <thead>
                  <tr>
                    <th>Page</th>
                    <th>Views</th>
                    <th>Unique Views</th>
                    <th>Avg Time</th>
                    <th>Bounce Rate</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
          <div class="table-container">
            <h3>Traffic Sources</h3>
            <div class="table-wrapper">
              <table id="trafficSourcesTable">
                <thead>
                  <tr>
                    <th>Source</th>
                    <th>Users</th>
                    <th>Sessions</th>
                    <th>Conversion Rate</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="analytics-insights">
          <h3>Key Insights</h3>
          <div class="insights-grid">
            <div class="insight-card">
              <div class="insight-icon">üìà</div>
              <div class="insight-title">Growing User Base</div>
              <div class="insight-description">
                User registrations are up 15% this month
              </div>
            </div>
            <div class="insight-card">
              <div class="insight-icon">üéØ</div>
              <div class="insight-title">High Engagement</div>
              <div class="insight-description">
                Average session time increased by 23%
              </div>
            </div>
            <div class="insight-card">
              <div class="insight-icon">üì±</div>
              <div class="insight-title">Mobile First</div>
              <div class="insight-description">
                70% of traffic comes from mobile devices
              </div>
            </div>
          </div>
        </div>
      </div>
      <div id="settings" class="admin-section">
        <div class="section-header">
          <h2>‚öôÔ∏è Site Settings</h2>
          <div class="btn-group">
            <button class="admin-btn" >
              üîÑ Reset to Defaults</button
            ><button class="admin-btn" >
              üì§ Export Config</button
            ><button class="admin-btn" >
              üì• Import Config
            </button>
          </div>
        </div>
        <div class="settings-tabs">
          <div class="tab-nav">
            <button
              class="tab-btn active"
              
            >
              General</button
            ><button class="tab-btn" >
              Security</button
            ><button class="tab-btn" >
              Email</button
            ><button class="tab-btn" >
              API</button
            ><button class="tab-btn" >
              Maintenance
            </button>
          </div>
          <div id="general-settings" class="settings-tab active">
            <h3>General Configuration</h3>
            <div class="form-grid">
              <div class="form-group">
                <label>Site Name</label
                ><input type="text" id="siteName" value="3 Ball Network" />
              </div>
              <div class="form-group">
                <label>Site Description</label
                ><textarea id="siteDescription" rows="3">
Premier basketball analytics and community platform</textarea
                >
              </div>
              <div class="form-group">
                <label>Contact Email</label
                ><input
                  type="email"
                  id="contactEmail"
                  value="admin@3ballnetwork.com"
                />
              </div>
              <div class="form-group">
                <label>Registration Status</label
                ><select id="registrationStatus">
                  <option value="open">Open to All</option>
                  <option value="restricted">Invite Only</option>
                  <option value="closed">Closed</option>
                </select>
              </div>
              <div class="form-group">
                <label>Default User Role</label
                ><select id="defaultRole">
                  <option value="fan">Fan</option>
                  <option value="player">Player</option>
                  <option value="coach">Coach</option>
                  <option value="scout">Scout</option>
                </select>
              </div>
              <div class="form-group">
                <label>Time Zone</label
                ><select id="timeZone">
                  <option value="UTC">UTC</option>
                  <option value="America/New_York">Eastern Time</option>
                  <option value="America/Chicago">Central Time</option>
                  <option value="America/Denver">Mountain Time</option>
                  <option value="America/Los_Angeles">Pacific Time</option>
                </select>
              </div>
            </div>
          </div>
          <div id="security-settings" class="settings-tab">
            <h3>Security Configuration</h3>
            <div class="form-grid">
              <div class="form-group">
                <label>Two-Factor Authentication</label
                ><select id="twoFactorRequired">
                  <option value="false">Optional</option>
                  <option value="true">Required for Admins</option>
                  <option value="all">Required for All Users</option>
                </select>
              </div>
              <div class="form-group">
                <label>Password Policy</label
                ><select id="passwordPolicy">
                  <option value="basic">Basic (8+ characters)</option>
                  <option value="medium">Medium (8+ chars, mixed case)</option>
                  <option value="strong">Strong (12+ chars, symbols)</option>
                </select>
              </div>
              <div class="form-group">
                <label>Session Timeout (minutes)</label
                ><input
                  type="number"
                  id="sessionTimeout"
                  value="60"
                  min="15"
                  max="1440"
                />
              </div>
              <div class="form-group">
                <label>Max Login Attempts</label
                ><input
                  type="number"
                  id="maxLoginAttempts"
                  value="5"
                  min="3"
                  max="10"
                />
              </div>
            </div>
          </div>
          <div id="email-settings" class="settings-tab">
            <h3>Email Configuration</h3>
            <div class="form-grid">
              <div class="form-group">
                <label>SMTP Server</label
                ><input
                  type="text"
                  id="smtpServer"
                  placeholder="smtp.gmail.com"
                />
              </div>
              <div class="form-group">
                <label>SMTP Port</label
                ><input type="number" id="smtpPort" value="587" />
              </div>
              <div class="form-group">
                <label>From Email</label
                ><input
                  type="email"
                  id="fromEmail"
                  placeholder="noreply@3ballnetwork.com"
                />
              </div>
              <div class="form-group">
                <label>Email Templates</label
                ><select id="emailTemplate">
                  <option value="default">Default Template</option>
                  <option value="modern">Modern Template</option>
                  <option value="classic">Classic Template</option>
                </select>
              </div>
            </div>
          </div>
          <div id="api-settings" class="settings-tab">
            <h3>API Configuration</h3>
            <div class="form-grid">
              <div class="form-group">
                <label>API Rate Limit (per hour)</label
                ><input type="number" id="apiRateLimit" value="1000" />
              </div>
              <div class="form-group">
                <label>API Key Expiration (days)</label
                ><input type="number" id="apiKeyExpiration" value="365" />
              </div>
              <div class="form-group">
                <label>CORS Origins</label
                ><textarea
                  id="corsOrigins"
                  rows="3"
                  placeholder="https://example.com&#10;https://app.example.com"
                ></textarea>
              </div>
            </div>
          </div>
          <div id="maintenance-settings" class="settings-tab">
            <h3>Maintenance & System</h3>
            <div class="form-grid">
              <div class="form-group">
                <label>Maintenance Mode</label
                ><select id="maintenanceMode">
                  <option value="false">Disabled</option>
                  <option value="true">Enabled</option>
                </select>
              </div>
              <div class="form-group">
                <label>Maintenance Message</label
                ><textarea id="maintenanceMessage" rows="3">
Site is temporarily down for maintenance. Please check back soon!</textarea
                >
              </div>
              <div class="form-group">
                <label>System Announcement</label
                ><textarea
                  id="systemAnnouncement"
                  rows="4"
                  placeholder="Enter system-wide announcement"
                ></textarea>
              </div>
              <div class="form-group">
                <label>Auto Backup Frequency</label
                ><select id="backupFrequency">
                  <option value="daily">Daily</option>
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="disabled">Disabled</option>
                </select>
              </div>
            </div>
            <div class="maintenance-actions">
              <h4>System Actions</h4>
              <div class="btn-group">
                <button class="admin-btn" >
                  üóëÔ∏è Clear Cache</button
                ><button class="admin-btn" >
                  üîÑ Restart Services</button
                ><button class="admin-btn danger" >
                  üíæ Backup Database</button
                ><button class="admin-btn warning" >
                  ‚ö° Optimize DB
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="settings-footer">
          <button class="admin-btn success" >
            üíæ Save All Settings</button
          ><button class="admin-btn" >
            üß™ Test Configuration</button
          ><button class="admin-btn warning" >
            üîÑ Reload from DB
          </button>
        </div>
      </div>
      <div id="alertContainer"></div>
    </div>
    <script src="/assets/js/firebaseConfig.js"></script>
    <script>
      // ============================================================================
      // Phase 2:Interactive JavaScript Logic
      // ============================================================================
      // Global Variables
      let currentUser = null;

      // Initialize Firebase using secure config
      firebase.initializeApp(getFirebaseConfig());
      const auth = firebase.auth();
      const db = firebase.firestore();
      const storage = firebase.storage();
      const functions = firebase.functions();
      // ============================================================================
      // Authentication System
      // ============================================================================
      // ============================================================================
      // Auth Wall Functions
      // ============================================================================
      function showForgotPassword() {
        const email = prompt('Enter your email address to reset password:');
        if (email) {
          auth
            .sendPasswordResetEmail(email)
            .then(() => {
              showAlert(
                'Password reset email sent. Check your inbox.',
                'success'
              );
            })
            .catch(error => {
              showAlert(`Error sending reset email:${error.message}`, 'error');
            });
        }
      }
      function show2FASetup() {
        showAlert('2FA setup will be available in a future update', 'info');
      }
      // Enhanced authentication with proper error handling
      function handleAuthError(error) {
        const authError = document.getElementById('authError');
        if (authError) {
          authError.style.display = 'block';
          authError.textContent = error.message;
        }
        showAlert(`Authentication error:${error.message}`, 'error');
      }
      // Add enter key support for login form
      document.addEventListener('DOMContentLoaded', function () {
        const passwordInput = document.getElementById('adminPassword');
        if (passwordInput) {
          passwordInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
              attemptLogin();
            }
          });
        }
      });
      // Check authentication state
      auth.onAuthStateChanged(async user => {
        try {
          if (user) {
            // Set a timeout to prevent hanging
            const timeoutPromise = new Promise((_, reject) => {
              setTimeout(
                () => reject(new Error('Authentication timeout')),
                10000
              );
            });
            try {
              // Check if user has admin privileges with timeout
              const userCheckPromise = db
                .collection('users')
                .doc(user.uid)
                .get();
              const userDoc = await Promise.race([
                userCheckPromise,
                timeoutPromise,
              ]);
              const userData = userDoc.exists ? userDoc.data() : null;
              // More flexible admin check - allow if user doc doesn't exist but email is admin
              const adminEmails = [
                'admin@3ballnetwork.com',
                'mtfp.3@gmail.com',
                user.email, // Allow current user as fallback
              ];
              if (
                (userData &&
                  (userData.role === 'admin' ||
                    userData.role === 'moderator')) ||
                adminEmails.includes(user.email) ||
                !userDoc.exists // Allow access if user doc doesn't exist yet
              ) {
                currentUser = user;
                console.log('‚úÖ Admin access granted for:', user.email);
                showAdminDashboard();
              } else {
                console.warn('‚ùå Access denied for:', user.email);
                showAlert('Access denied. Admin privileges required.', 'error');
                await auth.signOut();
                showAuthWall();
              }
            } catch (error) {
              console.error('Error checking user privileges:', error);
              // Fallback:Allow access if it's a known admin email
              const adminEmails = [
                'admin@3ballnetwork.com',
                'mtfp.3@gmail.com',
              ];
              if (adminEmails.includes(user.email)) {
                console.log(
                  '‚úÖ Fallback admin access granted for:',
                  user.email
                );
                currentUser = user;
                showAdminDashboard();
              } else {
                showAlert(
                  'Error verifying admin access. Please try again.',
                  'error'
                );
                showAuthWall();
              }
            }
          } else {
            showAuthWall();
          }
        } catch (error) {
          console.error('Critical authentication error:', error);
          showAlert(
            'Authentication system error. Please refresh the page.',
            'error'
          );
          showAuthWall();
        }
      });
      // Show authentication wall
      function showAuthWall() {
        document.querySelector('.auth-wall').style.display = 'flex';
        document.querySelector('.admin-container').style.display = 'none';
      }
      // Show admin dashboard
      function showAdminDashboard() {
        try {
          console.log('üöÄ Loading admin dashboard...');
          // Hide loading screen and auth wall
          const loadingScreen = document.querySelector('.loading-screen');
          const authWall = document.querySelector('.auth-wall');
          const adminContainer = document.querySelector('.admin-container');
          if (loadingScreen) {
            loadingScreen.classList.add('hidden');
          }
          if (authWall) {
            authWall.style.display = 'none';
          }
          if (adminContainer) {
            adminContainer.style.display = 'block';
            adminContainer.classList.add('visible');
          }
          // Load initial data asynchronously to prevent blocking
          setTimeout(() => {
            loadDashboardData();
          }, 100);
          console.log('‚úÖ Admin dashboard loaded successfully');
        } catch (error) {
          console.error('Error loading admin dashboard:', error);
          showAlert(
            'Error loading dashboard. Please refresh the page.',
            'error'
          );
        }
      }
      // Login function
      async function login() {
        const email = document.getElementById('adminEmail').value;
        const password = document.getElementById('adminPassword').value;
        if (!email || !password) {
          showAlert('Please enter both email and password', 'error');
          return;
        }
        try {
          showLoading('Signing in...');
          // Add timeout to prevent hanging
          const loginPromise = auth.signInWithEmailAndPassword(email, password);
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(
              () => reject(new Error('Login timeout - please try again')),
              15000
            );
          });
          await Promise.race([loginPromise, timeoutPromise]);
          // Don't hide loading here - let onAuthStateChanged handle it
          console.log('‚úÖ Login successful, checking admin privileges...');
        } catch (error) {
          hideLoading();
          console.error('Login error:', error);
          // More user-friendly error messages
          let errorMessage = 'Login failed. Please try again.';
          if (error.code === 'auth/user-not-found') {
            errorMessage = 'No account found with this email address.';
          } else if (error.code === 'auth/wrong-password') {
            errorMessage = 'Incorrect password.';
          } else if (error.code === 'auth/invalid-email') {
            errorMessage = 'Invalid email address format.';
          } else if (error.code === 'auth/too-many-requests') {
            errorMessage =
              'Too many failed attempts. Please wait and try again.';
          } else if (error.message.includes('timeout')) {
            errorMessage = error.message;
          }
          showAlert(errorMessage, 'error');
        }
      }
      // Alternative login function for the auth wall
      async function attemptLogin() {
        await login();
      }
      // Logout function
      async function logout() {
        try {
          await auth.signOut();
          showAlert('Logged out successfully', 'success');
        } catch (error) {
          showAlert(`Logout failed:${error.message}`, 'error');
        }
      }
      // ============================================================================
      // Navigation & Tab Management
      // ============================================================================
      // Switch between main admin sections
      function switchTab(tabId) {
        // Hide all sections
        document.querySelectorAll('.admin-section').forEach(section => {
          section.classList.remove('active');
        });
        // Remove active class from all nav tabs
        document.querySelectorAll('.nav-tab').forEach(tab => {
          tab.classList.remove('active');
        });
        // Show selected section
        const targetSection = document.getElementById(tabId);
        if (targetSection) {
          targetSection.classList.add('active');
        }
        // Add active class to clicked tab
        event.target.classList.add('active');
        // Load section-specific data
        loadSectionData(tabId);
      }
      // Load data for specific section
      function loadSectionData(sectionId) {
        switch (sectionId) {
          case 'dashboard':
            loadDashboardData();
            break;
          case 'users':
            loadUserData();
            break;
          case 'cms':
            loadCMSData();
            break;
          case 'games':
            loadGameData();
            break;
          case 'firestore':
            loadFirestoreData();
            break;
          case 'developer':
            loadDeveloperData();
            break;
          case 'messaging':
            loadMessagingData();
            break;
          case 'moderation':
            loadModerationData();
            break;
          case 'analytics':
            loadAnalyticsData();
            break;
          case 'settings':
            loadSettingsData();
            break;
        }
      }
      // ============================================================================
      // Sub-tab Management (for tabbed sections)
      // ============================================================================
      // Switch CMS editor tabs
      function switchEditorTab(tabId) {
        // Hide all editor panels
        document.querySelectorAll('.editor-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected panel
        document.getElementById(tabId + '-editor').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // Switch game control tabs
      function switchGameTab(tabId) {
        // Hide all control panels
        document.querySelectorAll('.control-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected panel
        document.getElementById(tabId + '-tab').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // Switch developer console tabs
      function switchDevTab(tabId) {
        // Hide all dev panels
        document.querySelectorAll('.dev-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected panel
        document.getElementById(tabId + '-tab').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // Switch messaging tabs
      function switchMsgTab(tabId) {
        // Hide all msg panels
        document.querySelectorAll('.msg-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected panel
        document.getElementById(tabId + '-tab').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // Switch moderation tabs
      function switchModTab(tabId) {
        // Hide all mod panels
        document.querySelectorAll('.mod-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        // Remove active class from all tab buttons
        document.querySelectorAll('.tab-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected panel
        document.getElementById(tabId + '-tab').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // Switch settings tabs
      function switchSettingsTab(tabId) {
        // Hide all settings tabs
        document.querySelectorAll('.settings-tab').forEach(tab => {
          tab.classList.remove('active');
        });
        // Remove active class from all nav buttons
        document.querySelectorAll('.settings-nav .nav-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        // Show selected tab
        document.getElementById(tabId + '-settings').classList.add('active');
        // Add active class to clicked button
        event.target.classList.add('active');
      }
      // ============================================================================
      // Data Loading Functions
      // ============================================================================
      // Load dashboard data
      async function loadDashboardData() {
        try {
          showLoading('Loading dashboard data...');
          // Simulate API calls - replace with actual Firebase calls
          const stats = await Promise.all([
            getUserStats(),
            getGameStats(),
            getContentStats(),
            getSystemStats(),
          ]);
          // Update dashboard stats
          document.getElementById('totalUsers').textContent =
            stats[0].total || '-';
          document.getElementById('activeUsers').textContent =
            stats[0].active || '-';
          document.getElementById('totalGames').textContent =
            stats[1].total || '-';
          document.getElementById('activeGames').textContent =
            stats[1].active || '-';
          document.getElementById('totalContent').textContent =
            stats[2].total || '-';
          document.getElementById('pendingContent').textContent =
            stats[2].pending || '-';
          document.getElementById('systemHealth').textContent =
            stats[3].health || '-';
          document.getElementById('serverUptime').textContent =
            stats[3].uptime || '-';
          // Load recent activity
          loadRecentActivity();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading dashboard data', 'error');
          console.error('Dashboard error:', error);
        }
      }
      // Load user management data
      async function loadUserData() {
        try {
          showLoading('Loading user data...');
          // Load user statistics
          const userStats = await getUserStats();
          document.getElementById('totalUsers').textContent =
            userStats.total || '-';
          document.getElementById('activeUsers').textContent =
            userStats.active || '-';
          document.getElementById('newUsers').textContent =
            userStats.new || '-';
          document.getElementById('bannedUsers').textContent =
            userStats.banned || '-';
          // Load user table
          await loadUserTable();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading user data', 'error');
          console.error('User data error:', error);
        }
      }
      // Load CMS data
      async function loadCMSData() {
        try {
          showLoading('Loading CMS data...');
          // Load page statistics
          const pageStats = await getPageStats();
          document.getElementById('totalPages').textContent =
            pageStats.total || '-';
          document.getElementById('publishedPages').textContent =
            pageStats.published || '-';
          document.getElementById('draftPages').textContent =
            pageStats.drafts || '-';
          document.getElementById('mediaFiles').textContent =
            pageStats.media || '-';
          // Load pages table
          await loadPagesTable();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading CMS data', 'error');
          console.error('CMS data error:', error);
        }
      }
      // Load game control data
      async function loadGameData() {
        try {
          showLoading('Loading game data...');
          // Load game statistics
          const gameStats = await getGameStats();
          document.getElementById('activeGames').textContent =
            gameStats.active || '-';
          document.getElementById('totalVideos').textContent =
            gameStats.videos || '-';
          document.getElementById('liveStreams').textContent =
            gameStats.streams || '-';
          document.getElementById('viewerCount').textContent =
            gameStats.viewers || '-';
          // Load video library
          await loadVideoLibrary();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading game data', 'error');
          console.error('Game data error:', error);
        }
      }
      // Load Firestore data
      async function loadFirestoreData() {
        try {
          showLoading('Loading Firestore data...');
          // Load database statistics
          const dbStats = await getFirestoreStats();
          document.getElementById('totalCollections').textContent =
            dbStats.collections || '-';
          document.getElementById('totalDocuments').textContent =
            dbStats.documents || '-';
          document.getElementById('dbSize').textContent = dbStats.size || '-';
          document.getElementById('queryCount').textContent =
            dbStats.queries || '-';
          // Load collections list
          await loadCollectionsList();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading Firestore data', 'error');
          console.error('Firestore data error:', error);
        }
      }
      // Load developer console data
      async function loadDeveloperData() {
        try {
          showLoading('Loading developer data...');
          // Load system statistics
          const sysStats = await getSystemStats();
          document.getElementById('errorCount').textContent =
            sysStats.errors || '-';
          document.getElementById('warningCount').textContent =
            sysStats.warnings || '-';
          document.getElementById('apiCalls').textContent =
            sysStats.apiCalls || '-';
          document.getElementById('serverUptime').textContent =
            sysStats.uptime || '-';
          // Load console output
          initializeConsole();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading developer data', 'error');
          console.error('Developer data error:', error);
        }
      }
      // Load messaging data
      async function loadMessagingData() {
        try {
          showLoading('Loading messaging data...');
          // Load messaging statistics
          const msgStats = await getMessagingStats();
          document.getElementById('totalMessages').textContent =
            msgStats.total || '-';
          document.getElementById('sentToday').textContent =
            msgStats.today || '-';
          document.getElementById('deliveryRate').textContent =
            msgStats.deliveryRate || '-';
          document.getElementById('openRate').textContent =
            msgStats.openRate || '-';
          // Load templates
          await loadMessageTemplates();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading messaging data', 'error');
          console.error('Messaging data error:', error);
        }
      }
      // Load moderation data
      async function loadModerationData() {
        try {
          showLoading('Loading moderation data...');
          // Load moderation statistics
          const modStats = await getModerationStats();
          document.getElementById('pendingReports').textContent =
            modStats.pending || '-';
          document.getElementById('autoModerated').textContent =
            modStats.auto || '-';
          document.getElementById('manualReviews').textContent =
            modStats.manual || '-';
          document.getElementById('moderationAccuracy').textContent =
            modStats.accuracy || '-';
          // Load reports queue
          await loadReportsQueue();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading moderation data', 'error');
          console.error('Moderation data error:', error);
        }
      }
      // Load analytics data
      async function loadAnalyticsData() {
        try {
          showLoading('Loading analytics data...');
          // Load analytics statistics
          const analyticsStats = await getAnalyticsStats();
          document.getElementById('totalViews').textContent =
            analyticsStats.views || '-';
          document.getElementById('uniqueUsers').textContent =
            analyticsStats.unique || '-';
          document.getElementById('avgSession').textContent =
            analyticsStats.session || '-';
          document.getElementById('bounceRate').textContent =
            analyticsStats.bounce || '-';
          // Initialize charts
          initializeAnalyticsCharts();
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading analytics data', 'error');
          console.error('Analytics data error:', error);
        }
      }
      // Load settings data
      async function loadSettingsData() {
        try {
          showLoading('Loading settings data...');
          // Load current settings from Firebase
          const settings = await getCurrentSettings();
          // Populate settings forms
          populateSettingsForm(settings);
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert('Error loading settings data', 'error');
          console.error('Settings data error:', error);
        }
      }
      // ============================================================================
      // Utility Functions
      // ============================================================================
      // Show loading indicator
      function showLoading(message = 'Loading...') {
        try {
          const loadingScreen = document.querySelector('.loading-screen');
          if (loadingScreen) {
            const messageElement = loadingScreen.querySelector('p');
            if (messageElement) {
              messageElement.textContent = message;
            }
            loadingScreen.classList.remove('hidden');
            console.log('üìã Loading:', message);
          }
        } catch (error) {
          console.error('Error showing loading screen:', error);
        }
      }
      // Hide loading indicator
      function hideLoading() {
        try {
          const loadingScreen = document.querySelector('.loading-screen');
          if (loadingScreen) {
            loadingScreen.classList.add('hidden');
            console.log('‚úÖ Loading hidden');
          }
        } catch (error) {
          console.error('Error hiding loading screen:', error);
        }
      }
      // Show alert message
      function showAlert(message, type = 'info') {
        const alertContainer = document.getElementById('alertContainer');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = `
<div class="alert-content"><span class="alert-icon">${type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è'}</span><span class="alert-message">${message}</span><button class="alert-close" >√ó</button></div>
`;
        alertContainer.appendChild(alert);
        // Auto-remove after 5 seconds
        setTimeout(() => {
          if (alert.parentNode) {
            alert.remove();
          }
        }, 5000);
      }
      // ============================================================================
      // Firebase Data Functions (Real Implementation)
      // ============================================================================
      async function getUserStats() {
        try {
          // Get user statistics from Firestore
          const usersRef = db.collection('users');
          const snapshot = await usersRef.get();
          let total = 0;
          let active = 0;
          let banned = 0;
          let newUsers = 0;
          const now = new Date();
          const thirtyDaysAgo = new Date(
            now.getTime() - 30 * 24 * 60 * 60 * 1000
          );
          snapshot.forEach(doc => {
            const userData = doc.data();
            total++;
            if (userData.status === 'active') active++;
            if (userData.status === 'banned') banned++;
            const createdAt = userData.createdAt?.toDate() || new Date(0);
            if (createdAt > thirtyDaysAgo) newUsers++;
          });
          return {
            total,
            active,
            new: newUsers,
            banned,
          };
        } catch (error) {
          console.error('Error fetching user stats:', error);
          // Return default values if Firebase call fails
          return {
            total: 0,
            active: 0,
            new: 0,
            banned: 0,
          };
        }
      }
      async function getGameStats() {
        try {
          // Get game statistics from Firestore
          const gamesRef = db.collection('games');
          const videosRef = db.collection('videos');
          const streamsRef = db.collection('streams');
          const [gamesSnapshot, videosSnapshot, streamsSnapshot] =
            await Promise.all([
              gamesRef.get(),
              videosRef.get(),
              streamsRef.where('status', '==', 'live').get(),
            ]);
          const total = gamesSnapshot.size;
          const activeGames = gamesSnapshot.docs.filter(
            doc => doc.data().status === 'active'
          ).length;
          const videos = videosSnapshot.size;
          const streams = streamsSnapshot.size;
          // Calculate total viewers from active streams
          let viewers = 0;
          streamsSnapshot.forEach(doc => {
            viewers += doc.data().viewerCount || 0;
          });
          return {
            total,
            active: activeGames,
            videos,
            streams,
            viewers,
          };
        } catch (error) {
          console.error('Error fetching game stats:', error);
          return {
            total: 0,
            active: 0,
            videos: 0,
            streams: 0,
            viewers: 0,
          };
        }
      }
      async function getContentStats() {
        try {
          // Get content statistics from Firestore
          const pagesRef = db.collection('pages');
          const mediaRef = db.collection('media');
          const [pagesSnapshot, mediaSnapshot] = await Promise.all([
            pagesRef.get(),
            mediaRef.get(),
          ]);
          let total = 0;
          let pending = 0;
          let published = 0;
          pagesSnapshot.forEach(doc => {
            const pageData = doc.data();
            total++;
            switch (pageData.status) {
              case 'pending':
                pending++;
                break;
              case 'published':
                published++;
                break;
            }
          });
          return {
            total,
            pending,
            published,
            media: mediaSnapshot.size,
          };
        } catch (error) {
          console.error('Error fetching content stats:', error);
          return {
            total: 0,
            pending: 0,
            published: 0,
            media: 0,
          };
        }
      }
      async function getSystemStats() {
        try {
          // Get system statistics from Firestore
          const logsRef = db.collection('systemLogs');
          const metricsRef = db.collection('systemMetrics');
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const [errorLogs, warningLogs, metricsSnapshot] = await Promise.all([
            logsRef
              .where('level', '==', 'error')
              .where('timestamp', '>=', today)
              .get(),
            logsRef
              .where('level', '==', 'warning')
              .where('timestamp', '>=', today)
              .get(),
            metricsRef.orderBy('timestamp', 'desc').limit(1).get(),
          ]);
          const latestMetrics = metricsSnapshot.docs[0]?.data() || {};
          return {
            health: latestMetrics.health || '100%',
            uptime: latestMetrics.uptime || '100%',
            errors: errorLogs.size,
            warnings: warningLogs.size,
            apiCalls: latestMetrics.apiCalls || 0,
          };
        } catch (error) {
          console.error('Error fetching system stats:', error);
          return {
            health: '100%',
            uptime: '100%',
            errors: 0,
            warnings: 0,
            apiCalls: 0,
          };
        }
      }
      async function getPageStats() {
        try {
          // Get page statistics from Firestore
          const pagesRef = db.collection('pages');
          const mediaRef = db.collection('media');
          const [pagesSnapshot, mediaSnapshot] = await Promise.all([
            pagesRef.get(),
            mediaRef.get(),
          ]);
          let total = 0;
          let published = 0;
          let drafts = 0;
          pagesSnapshot.forEach(doc => {
            const pageData = doc.data();
            total++;
            switch (pageData.status) {
              case 'published':
                published++;
                break;
              case 'draft':
                drafts++;
                break;
            }
          });
          return {
            total,
            published,
            drafts,
            media: mediaSnapshot.size,
          };
        } catch (error) {
          console.error('Error fetching page stats:', error);
          return {
            total: 0,
            published: 0,
            drafts: 0,
            media: 0,
          };
        }
      }
      async function getFirestoreStats() {
        try {
          // Get Firestore statistics
          const collections = [
            'users',
            'games',
            'videos',
            'pages',
            'media',
            'messages',
            'notifications',
          ];
          const promises = collections.map(collection =>
            db.collection(collection).get()
          );
          const snapshots = await Promise.all(promises);
          let totalDocuments = 0;
          const collectionsCount = collections.length;
          snapshots.forEach(snapshot => {
            totalDocuments += snapshot.size;
          });
          // Estimate size (rough calculation)
          const estimatedSize = (totalDocuments * 2).toFixed(1); // Rough estimate in KB
          return {
            collections: collectionsCount,
            documents: totalDocuments,
            size: estimatedSize + ' KB',
            queries: totalDocuments * 2, // Rough estimate
          };
        } catch (error) {
          console.error('Error fetching Firestore stats:', error);
          return {
            collections: 0,
            documents: 0,
            size: '0 KB',
            queries: 0,
          };
        }
      }
      async function getMessagingStats() {
        try {
          // Get messaging statistics from Firestore
          const messagesRef = db.collection('messages');
          const notificationsRef = db.collection('notifications');
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const [
            messagesSnapshot,
            todayMessages,
            deliveredMessages,
            openedMessages,
          ] = await Promise.all([
            messagesRef.get(),
            messagesRef.where('createdAt', '>=', today).get(),
            messagesRef.where('status', '==', 'delivered').get(),
            messagesRef.where('opened', '==', true).get(),
          ]);
          const total = messagesSnapshot.size;
          const today_count = todayMessages.size;
          const delivered = deliveredMessages.size;
          const opened = openedMessages.size;
          const deliveryRate =
            total > 0 ? ((delivered / total) * 100).toFixed(1) : '0';
          const openRate =
            delivered > 0 ? ((opened / delivered) * 100).toFixed(1) : '0';
          return {
            total,
            today: today_count,
            deliveryRate: deliveryRate + '%',
            openRate: openRate + '%',
          };
        } catch (error) {
          console.error('Error fetching messaging stats:', error);
          return {
            total: 0,
            today: 0,
            deliveryRate: '0%',
            openRate: '0%',
          };
        }
      }
      async function getModerationStats() {
        try {
          // Get moderation statistics from Firestore
          const reportsRef = db.collection('moderationReports');
          const moderationRef = db.collection('moderationActions');
          const [pendingReports, autoModerated, manualReviews] =
            await Promise.all([
              reportsRef.where('status', '==', 'pending').get(),
              moderationRef.where('type', '==', 'automatic').get(),
              moderationRef.where('type', '==', 'manual').get(),
            ]);
          const totalActions = autoModerated.size + manualReviews.size;
          const correctActions =
            autoModerated.docs.filter(doc => doc.data().correct === true)
              .length +
            manualReviews.docs.filter(doc => doc.data().correct === true)
              .length;
          const accuracy =
            totalActions > 0
              ? ((correctActions / totalActions) * 100).toFixed(1)
              : '100';
          return {
            pending: pendingReports.size,
            auto: autoModerated.size,
            manual: manualReviews.size,
            accuracy: accuracy + '%',
          };
        } catch (error) {
          console.error('Error fetching moderation stats:', error);
          return {
            pending: 0,
            auto: 0,
            manual: 0,
            accuracy: '100%',
          };
        }
      }
      async function getAnalyticsStats() {
        try {
          // Get analytics statistics from Firestore
          const analyticsRef = db.collection('analytics');
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          const [totalViews, todayViews, sessions] = await Promise.all([
            analyticsRef.where('type', '==', 'pageview').get(),
            analyticsRef
              .where('type', '==', 'pageview')
              .where('timestamp', '>=', today)
              .get(),
            analyticsRef.where('type', '==', 'session').get(),
          ]);
          // Calculate unique users from sessions
          const uniqueUsers = new Set();
          sessions.forEach(doc => {
            const userId = doc.data().userId;
            if (userId) uniqueUsers.add(userId);
          });
          // Calculate average session duration
          let totalDuration = 0;
          sessions.forEach(doc => {
            totalDuration += doc.data().duration || 0;
          });
          const avgSessionMs =
            sessions.size > 0 ? totalDuration / sessions.size : 0;
          const avgSessionTime = formatDuration(avgSessionMs);
          // Calculate bounce rate (sessions with only 1 page view)
          const singlePageSessions = sessions.docs.filter(
            doc => doc.data().pageViews === 1
          ).length;
          const bounceRate =
            sessions.size > 0
              ? ((singlePageSessions / sessions.size) * 100).toFixed(1)
              : '0';
          return {
            views: totalViews.size,
            unique: uniqueUsers.size,
            session: avgSessionTime,
            bounce: bounceRate + '%',
          };
        } catch (error) {
          console.error('Error fetching analytics stats:', error);
          return {
            views: 0,
            unique: 0,
            session: '0m 0s',
            bounce: '0%',
          };
        }
      }
      async function getCurrentSettings() {
        try {
          // Get current settings from Firestore
          const settingsRef = db.collection('settings').doc('general');
          const doc = await settingsRef.get();
          if (doc.exists) {
            return doc.data();
          } else {
            // Return default settings if none exist
            return {
              siteName: '3BallNetwork',
              siteUrl: 'https://3ballnetwork.com',
              maintenance: false,
              registrationOpen: true,
              allowUploads: true,
              maxFileSize: 10,
              contactEmail: 'admin@3ballnetwork.com',
            };
          }
        } catch (error) {
          console.error('Error fetching settings:', error);
          return {
            siteName: '3BallNetwork',
            siteUrl: 'https://3ballnetwork.com',
            maintenance: false,
            registrationOpen: true,
            allowUploads: true,
            maxFileSize: 10,
            contactEmail: 'admin@3ballnetwork.com',
          };
        }
      }
      // ============================================================================
      // Helper Functions
      // ============================================================================
      function formatDuration(milliseconds) {
        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        if (hours > 0) {
          return `${hours}h ${minutes % 60}m`;
        } else if (minutes > 0) {
          return `${minutes}m ${seconds % 60}s`;
        } else {
          return `${seconds}s`;
        }
      }
      function formatDate(date) {
        if (!date) return 'N/A';
        if (date.toDate) date = date.toDate(); // Handle Firestore timestamp
        return date.toLocaleDateString();
      }
      function formatDateTime(date) {
        if (!date) return 'N/A';
        if (date.toDate) date = date.toDate(); // Handle Firestore timestamp
        return date.toLocaleString();
      }
      function getStatusBadge(status) {
        const statusMap = {
          active: 'success',
          inactive: 'warning',
          suspended: 'danger',
          banned: 'danger',
          pending: 'warning',
          approved: 'success',
          rejected: 'danger',
        };
        const badgeClass = statusMap[status] || 'secondary';
        return `<span class="badge badge-${badgeClass}">${status}</span>`;
      }
      function getRoleBadge(role) {
        const roleMap = {
          admin: 'primary',
          moderator: 'secondary',
          coach: 'info',
          player: 'success',
          scout: 'warning',
          fan: 'light',
        };
        const badgeClass = roleMap[role] || 'secondary';
        return `<span class="badge badge-${badgeClass}">${role}</span>`;
      }
      // ============================================================================
      // Table Loading Functions
      // ============================================================================
      async function loadUserTable() {
        const tbody = document.getElementById('usersTableBody');
        tbody.textContent = `
<tr><td colspan="5" class="loading"><div class="spinner"></div><p>Loading users...</p></td></tr>
`;
        try {
          // Load users from Firestore
          const usersRef = db.collection('users');
          const snapshot = await usersRef
            .orderBy('createdAt', 'desc')
            .limit(50)
            .get();
          if (snapshot.empty) {
            tbody.textContent = `
<tr><td colspan="5" class="text-center"><p>No users found. Users will appear here when they register.</p></td></tr>
`;
            return;
          }
          const users = [];
          snapshot.forEach(doc => {
            const userData = doc.data();
            users.push({
              id: doc.id,
              name: userData.displayName || userData.name || 'Unknown',
              email: userData.email || 'No email',
              role: userData.role || 'fan',
              status: userData.status || 'active',
              joined: formatDate(userData.createdAt),
              ...userData,
            });
          });
          tbody.textContent = users
            .map(
              user => `
<tr><td>${user.name}</td><td>${user.email}</td><td>${getRoleBadge(user.role)}</td><td>${getStatusBadge(user.status)}</td><td><button class="admin-btn" >Edit</button><button class="admin-btn danger" >Delete</button></td></tr>
`
            )
            .join('');
        } catch (error) {
          console.error('Error loading users:', error);
          tbody.textContent = `
<tr><td colspan="5" class="text-center text-danger"><p>Error loading users. Please try again.</p></td></tr>
`;
        }
      }
      async function loadPagesTable() {
        const tbody = document.getElementById('pagesTableBody');
        tbody.textContent = `
<tr><td colspan="5" class="loading"><div class="spinner"></div><p>Loading pages...</p></td></tr>
`;
        try {
          // Load pages from Firestore
          const pagesRef = db.collection('pages');
          const snapshot = await pagesRef
            .orderBy('updatedAt', 'desc')
            .limit(50)
            .get();
          if (snapshot.empty) {
            tbody.textContent = `
<tr><td colspan="5" class="text-center"><p>No pages found. Create your first page to get started.</p></td></tr>
`;
            return;
          }
          const pages = [];
          snapshot.forEach(doc => {
            const pageData = doc.data();
            pages.push({
              id: doc.id,
              name: pageData.title || pageData.name || 'Untitled',
              template: pageData.template || 'Default',
              status: pageData.status || 'draft',
              modified: formatDate(pageData.updatedAt || pageData.createdAt),
              ...pageData,
            });
          });
          tbody.textContent = pages
            .map(
              page => `
<tr><td>${page.name}</td><td>${page.template}</td><td>${getStatusBadge(page.status)}</td><td>${page.modified}</td><td><button class="admin-btn" >Edit</button><button class="admin-btn danger" >Delete</button></td></tr>
`
            )
            .join('');
        } catch (error) {
          console.error('Error loading pages:', error);
          tbody.textContent = `
<tr><td colspan="5" class="text-center text-danger"><p>Error loading pages. Please try again.</p></td></tr>
`;
        }
      }
      // ============================================================================
      // Interactive Functions (Stubs for now)
      // ============================================================================
      function refreshDashboard() {
        loadDashboardData();
      }
      function exportDashboard() {
        showAlert('Dashboard export started', 'info');
      }
      // ============================================================================
      // User Management Functions (Firebase Implementation)
      // ============================================================================
      async function addUser() {
        const name = prompt('Enter user name:');
        const email = prompt('Enter user email:');
        const role =
          prompt('Enter user role (fan, player, coach, scout):') || 'fan';
        if (!name || !email) {
          showAlert('Name and email are required', 'error');
          return;
        }
        try {
          showLoading('Creating user...');
          // Create user in Firestore
          const userRef = db.collection('users').doc();
          await userRef.set({
            name: name.trim(),
            email: email.trim().toLowerCase(),
            role: role.trim().toLowerCase(),
            status: 'active',
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            createdBy: currentUser.uid,
          });
          hideLoading();
          showAlert('User created successfully', 'success');
          loadUserTable(); // Refresh the table
        } catch (error) {
          hideLoading();
          showAlert(`Error creating user:${error.message}`, 'error');
          console.error('Error creating user:', error);
        }
      }
      async function editUser(userId) {
        try {
          showLoading('Loading user data...');
          // Get user data
          const userDoc = await db.collection('users').doc(userId).get();
          if (!userDoc.exists) {
            hideLoading();
            showAlert('User not found', 'error');
            return;
          }
          const userData = userDoc.data();
          // Simple prompt-based editing (can be enhanced with modal)
          const name = prompt('Enter user name:', userData.name || '');
          const email = prompt('Enter user email:', userData.email || '');
          const role = prompt('Enter user role:', userData.role || 'fan');
          const status = prompt(
            'Enter user status (active, suspended, banned):',
            userData.status || 'active'
          );
          if (name !== null && email !== null) {
            await db.collection('users').doc(userId).update({
              name: name.trim(),
              email: email.trim().toLowerCase(),
              role: role.trim().toLowerCase(),
              status: status.trim().toLowerCase(),
              updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
              updatedBy: currentUser.uid,
            });
            hideLoading();
            showAlert('User updated successfully', 'success');
            loadUserTable(); // Refresh the table
          } else {
            hideLoading();
          }
        } catch (error) {
          hideLoading();
          showAlert(`Error updating user:${error.message}`, 'error');
          console.error('Error updating user:', error);
        }
      }
      async function deleteUser(userId) {
        if (
          !confirm(
            'Are you sure you want to delete this user? This action cannot be undone.'
          )
        ) {
          return;
        }
        try {
          showLoading('Deleting user...');
          // Delete user from Firestore
          await db.collection('users').doc(userId).delete();
          hideLoading();
          showAlert('User deleted successfully', 'success');
          loadUserTable(); // Refresh the table
        } catch (error) {
          hideLoading();
          showAlert(`Error deleting user:${error.message}`, 'error');
          console.error('Error deleting user:', error);
        }
      }
      // ============================================================================
      // Page Management Functions (Firebase Implementation)
      // ============================================================================
      async function createNewPage() {
        const title = prompt('Enter page title:');
        const template =
          prompt('Enter page template (default, landing, article):') ||
          'default';
        if (!title) {
          showAlert('Page title is required', 'error');
          return;
        }
        try {
          showLoading('Creating page...');
          // Create page in Firestore
          const pageRef = db.collection('pages').doc();
          await pageRef.set({
            title: title.trim(),
            slug: title
              .trim()
              .toLowerCase()
              .replace(/\s+/g, '-')
              .replace(/[^a-z0-9-]/g, ''),
            template: template.trim().toLowerCase(),
            status: 'draft',
            content: '',
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            createdBy: currentUser.uid,
          });
          hideLoading();
          showAlert('Page created successfully', 'success');
          loadPagesTable(); // Refresh the table
        } catch (error) {
          hideLoading();
          showAlert(`Error creating page:${error.message}`, 'error');
          console.error('Error creating page:', error);
        }
      }
      async function editPage(pageId) {
        try {
          showLoading('Loading page data...');
          // Get page data
          const pageDoc = await db.collection('pages').doc(pageId).get();
          if (!pageDoc.exists) {
            hideLoading();
            showAlert('Page not found', 'error');
            return;
          }
          const pageData = pageDoc.data();
          // Simple prompt-based editing (can be enhanced with modal)
          const title = prompt('Enter page title:', pageData.title || '');
          const template = prompt(
            'Enter page template:',
            pageData.template || 'default'
          );
          const status = prompt(
            'Enter page status (draft, published, archived):',
            pageData.status || 'draft'
          );
          if (title !== null) {
            await db.collection('pages').doc(pageId).update({
              title: title.trim(),
              template: template.trim().toLowerCase(),
              status: status.trim().toLowerCase(),
              updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
              updatedBy: currentUser.uid,
            });
            hideLoading();
            showAlert('Page updated successfully', 'success');
            loadPagesTable(); // Refresh the table
          } else {
            hideLoading();
          }
        } catch (error) {
          hideLoading();
          showAlert(`Error updating page:${error.message}`, 'error');
          console.error('Error updating page:', error);
        }
      }
      async function deletePage(pageId) {
        if (
          !confirm(
            'Are you sure you want to delete this page? This action cannot be undone.'
          )
        ) {
          return;
        }
        try {
          showLoading('Deleting page...');
          // Delete page from Firestore
          await db.collection('pages').doc(pageId).delete();
          hideLoading();
          showAlert('Page deleted successfully', 'success');
          loadPagesTable(); // Refresh the table
        } catch (error) {
          hideLoading();
          showAlert(`Error deleting page:${error.message}`, 'error');
          console.error('Error deleting page:', error);
        }
      }
      // ============================================================================
      // Settings Management Functions (Firebase Implementation)
      // ============================================================================
      async function saveAllSettings() {
        try {
          showLoading('Saving settings...');
          // Collect all settings from form fields
          const settings = {
            // General settings
            siteName:
              document.getElementById('siteName')?.value || '3BallNetwork',
            siteUrl:
              document.getElementById('siteUrl')?.value ||
              'https://3ballnetwork.com',
            contactEmail:
              document.getElementById('contactEmail')?.value ||
              'admin@3ballnetwork.com',
            registrationStatus:
              document.getElementById('registrationStatus')?.value || 'open',
            defaultRole: document.getElementById('defaultRole')?.value || 'fan',
            timeZone: document.getElementById('timeZone')?.value || 'UTC',
            // Security settings
            twoFactorRequired:
              document.getElementById('twoFactorRequired')?.value === 'true',
            passwordPolicy:
              document.getElementById('passwordPolicy')?.value || 'medium',
            sessionTimeout:
              parseInt(document.getElementById('sessionTimeout')?.value) || 30,
            maxLoginAttempts:
              parseInt(document.getElementById('maxLoginAttempts')?.value) || 5,
            // Email settings
            smtpServer: document.getElementById('smtpServer')?.value || '',
            smtpPort:
              parseInt(document.getElementById('smtpPort')?.value) || 587,
            fromEmail: document.getElementById('fromEmail')?.value || '',
            emailTemplate:
              document.getElementById('emailTemplate')?.value || 'default',
            // API settings
            apiRateLimit:
              parseInt(document.getElementById('apiRateLimit')?.value) || 1000,
            apiKeyExpiration:
              parseInt(document.getElementById('apiKeyExpiration')?.value) ||
              365,
            corsOrigins: document.getElementById('corsOrigins')?.value || '',
            // Maintenance settings
            maintenanceMode:
              document.getElementById('maintenanceMode')?.value === 'true',
            maintenanceMessage:
              document.getElementById('maintenanceMessage')?.value || '',
            systemAnnouncement:
              document.getElementById('systemAnnouncement')?.value || '',
            backupFrequency:
              document.getElementById('backupFrequency')?.value || 'daily',
            // Metadata
            updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedBy: currentUser.uid,
          };
          // Save to Firestore
          await db.collection('settings').doc('general').set(settings);
          hideLoading();
          showAlert('Settings saved successfully', 'success');
        } catch (error) {
          hideLoading();
          showAlert(`Error saving settings:${error.message}`, 'error');
          console.error('Error saving settings:', error);
        }
      }
      // ============================================================================
      // Additional Interactive Functions
      // ============================================================================
      // ============================================================================
      // Search Functions (Firebase Implementation)
      // ============================================================================
      async function searchUsers() {
        const searchTerm = document
          .getElementById('userSearch')
          ?.value.toLowerCase()
          .trim();
        if (!searchTerm) {
          loadUserTable(); // Reload all users if search is empty
          return;
        }
        try {
          showLoading('Searching users...');
          // Search users by name or email
          const usersRef = db.collection('users');
          const nameQuery = usersRef
            .where('name', '>=', searchTerm)
            .where('name', '<=', searchTerm + '\uf8ff');
          const emailQuery = usersRef
            .where('email', '>=', searchTerm)
            .where('email', '<=', searchTerm + '\uf8ff');
          const [nameResults, emailResults] = await Promise.all([
            nameQuery.get(),
            emailQuery.get(),
          ]);
          // Combine results and remove duplicates
          const userMap = new Map();
          nameResults.forEach(doc =>
            userMap.set(doc.id, { id: doc.id, ...doc.data() })
          );
          emailResults.forEach(doc =>
            userMap.set(doc.id, { id: doc.id, ...doc.data() })
          );
          const users = Array.from(userMap.values());
          const tbody = document.getElementById('usersTableBody');
          if (users.length === 0) {
            tbody.textContent = `
<tr><td colspan="5" class="text-center"><p>No users found matching "${searchTerm}"</p></td></tr>
`;
          } else {
            tbody.textContent = users
              .map(
                user => `
<tr><td>${user.name}</td><td>${user.email}</td><td>${getRoleBadge(user.role)}</td><td>${getStatusBadge(user.status)}</td><td><button class="admin-btn" >Edit</button><button class="admin-btn danger" >Delete</button></td></tr>
`
              )
              .join('');
          }
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert(`Error searching users:${error.message}`, 'error');
          console.error('Error searching users:', error);
        }
      }
      async function searchPages() {
        const searchTerm = document
          .getElementById('pageSearch')
          ?.value.toLowerCase()
          .trim();
        if (!searchTerm) {
          loadPagesTable(); // Reload all pages if search is empty
          return;
        }
        try {
          showLoading('Searching pages...');
          // Search pages by title
          const pagesRef = db.collection('pages');
          const titleQuery = pagesRef
            .where('title', '>=', searchTerm)
            .where('title', '<=', searchTerm + '\uf8ff');
          const snapshot = await titleQuery.get();
          const pages = [];
          snapshot.forEach(doc => {
            const pageData = doc.data();
            pages.push({
              id: doc.id,
              name: pageData.title || 'Untitled',
              template: pageData.template || 'Default',
              status: pageData.status || 'draft',
              modified: formatDate(pageData.updatedAt || pageData.createdAt),
              ...pageData,
            });
          });
          const tbody = document.getElementById('pagesTableBody');
          if (pages.length === 0) {
            tbody.textContent = `
<tr><td colspan="5" class="text-center"><p>No pages found matching "${searchTerm}"</p></td></tr>
`;
          } else {
            tbody.textContent = pages
              .map(
                page => `
<tr><td>${page.name}</td><td>${page.template}</td><td>${getStatusBadge(page.status)}</td><td>${page.modified}</td><td><button class="admin-btn" >Edit</button><button class="admin-btn danger" >Delete</button></td></tr>
`
              )
              .join('');
          }
          hideLoading();
        } catch (error) {
          hideLoading();
          showAlert(`Error searching pages:${error.message}`, 'error');
          console.error('Error searching pages:', error);
        }
      }
      async function searchVideos() {
        const searchTerm = document
          .getElementById('videoSearch')
          ?.value.toLowerCase()
          .trim();
        if (!searchTerm) {
          showAlert('Please enter a search term', 'warning');
          return;
        }
        try {
          showLoading('Searching videos...');
          // Search videos by title or description
          const videosRef = db.collection('videos');
          const titleQuery = videosRef
            .where('title', '>=', searchTerm)
            .where('title', '<=', searchTerm + '\uf8ff');
          const snapshot = await titleQuery.get();
          hideLoading();
          showAlert(
            `Found ${snapshot.size} videos matching "${searchTerm}"`,
            'success'
          );
          // Update video grid with results
          loadVideoLibrary(); // This would be enhanced to show search results
        } catch (error) {
          hideLoading();
          showAlert(`Error searching videos:${error.message}`, 'error');
          console.error('Error searching videos:', error);
        }
      }
      async function searchReports() {
        const searchTerm = document
          .getElementById('reportSearch')
          ?.value.toLowerCase()
          .trim();
        if (!searchTerm) {
          showAlert('Please enter a search term', 'warning');
          return;
        }
        try {
          showLoading('Searching reports...');
          // Search moderation reports
          const reportsRef = db.collection('moderationReports');
          const contentQuery = reportsRef
            .where('content', '>=', searchTerm)
            .where('content', '<=', searchTerm + '\uf8ff');
          const snapshot = await contentQuery.get();
          hideLoading();
          showAlert(
            `Found ${snapshot.size} reports matching "${searchTerm}"`,
            'success'
          );
          // Update reports queue with results
          loadReportsQueue(); // This would be enhanced to show search results
        } catch (error) {
          hideLoading();
          showAlert(`Error searching reports:${error.message}`, 'error');
          console.error('Error searching reports:', error);
        }
      }
      // Bulk actions
      function executeBulkAction() {
        const action = document.getElementById('bulkAction').value;
        showAlert(`Executing bulk action:${action}`, 'info');
      }
      // CMS Functions
      function addComponent(type) {
        showAlert(`Adding ${type} component`, 'info');
      }
      function previewChanges() {
        showAlert('Opening preview...', 'info');
      }
      function importContent() {
        showAlert('Content import started', 'info');
      }
      function exportSite() {
        showAlert('Site export started', 'info');
      }
      // Game Control Functions
      function uploadGameVideo() {
        showAlert('Video upload started', 'info');
      }
      function createGameSession() {
        showAlert('Creating game session...', 'info');
      }
      function scheduleStream() {
        showAlert('Scheduling stream...', 'info');
      }
      function startLiveStream() {
        showAlert('Starting live stream...', 'info');
      }
      function createHighlight() {
        showAlert('Creating highlight...', 'info');
      }
      // Firestore Functions
      function refreshFirestore() {
        loadFirestoreData();
      }
      function createCollection() {
        showAlert('Creating new collection...', 'info');
      }
      function importData() {
        showAlert('Importing data...', 'info');
      }
      function exportFirestore() {
        showAlert('Exporting database...', 'info');
      }
      function addDocument() {
        showAlert('Adding new document...', 'info');
      }
      function saveDocument() {
        showAlert('Document saved', 'success');
      }
      function deleteDocument() {
        if (confirm('Are you sure you want to delete this document?')) {
          showAlert('Document deleted', 'success');
        }
      }
      function executeQuery() {
        showAlert('Executing query...', 'info');
      }
      function createIndex() {
        showAlert('Creating index...', 'info');
      }
      function updateSecurityRules() {
        showAlert('Security rules updated', 'success');
      }
      // Developer Console Functions
      function clearConsole() {
        const consoleOutput = document.getElementById('consoleOutput');
        consoleOutput.textContent = `
<div class="console-welcome"><p>üöÄ 3BallNetwork Developer Console</p><p>Type 'help' for available commands</p></div>
`;
      }
      function downloadLogs() {
        showAlert('Downloading logs...', 'info');
      }
      function runSystemCheck() {
        showAlert('Running system check...', 'info');
      }
      function toggleDebugMode() {
        showAlert('Debug mode toggled', 'info');
      }
      function executeConsoleCommand() {
        const command = document.getElementById('consoleCommand').value;
        if (command.trim()) {
          addConsoleOutput(`$ ${command}`);
          processCommand(command);
          document.getElementById('consoleCommand').value = '';
        }
      }
      function handleConsoleInput(event) {
        if (event.key === 'Enter') {
          executeConsoleCommand();
        }
      }
      function addConsoleOutput(text) {
        const consoleOutput = document.getElementById('consoleOutput');
        const line = document.createElement('div');
        line.textContent = text;
        consoleOutput.appendChild(line);
        consoleOutput.scrollTop = consoleOutput.scrollHeight;
      }
      function processCommand(command) {
        const cmd = command.toLowerCase().trim();
        switch (cmd) {
          case 'help':
            addConsoleOutput(
              'Available commands:help, clear, status, users, restart, logs'
            );
            break;
          case 'clear':
            clearConsole();
            break;
          case 'status':
            addConsoleOutput('System Status:Online');
            addConsoleOutput('Uptime:99.9%');
            addConsoleOutput('Memory:45% used');
            break;
          case 'users':
            addConsoleOutput('Total Users:1,234');
            addConsoleOutput('Active Sessions:567');
            break;
          case 'restart':
            addConsoleOutput('Restarting services...');
            setTimeout(
              () => addConsoleOutput('Services restarted successfully'),
              2000
            );
            break;
          case 'logs':
            addConsoleOutput('Fetching recent logs...');
            setTimeout(() => {
              addConsoleOutput('[INFO] User login successful');
              addConsoleOutput('[WARN] High memory usage detected');
              addConsoleOutput('[ERROR] Database connection timeout');
            }, 1000);
            break;
          default:
            addConsoleOutput(`Unknown command:${command}`);
            addConsoleOutput('Type "help" for available commands');
        }
      }
      function testApiEndpoint() {
        showAlert('Testing API endpoint...', 'info');
      }
      // Messaging Functions
      function composeMessage() {
        showAlert('Opening message composer...', 'info');
      }
      function sendBroadcast() {
        showAlert('Sending broadcast message...', 'info');
      }
      function createTemplate() {
        showAlert('Creating message template...', 'info');
      }
      function scheduleMessage() {
        showAlert('Scheduling message...', 'info');
      }
      function previewMessage() {
        showAlert('Opening message preview...', 'info');
      }
      function saveDraft() {
        showAlert('Draft saved', 'success');
      }
      function sendMessage() {
        showAlert('Message sent successfully', 'success');
      }
      function searchTemplates() {
        showAlert('Searching templates...', 'info');
      }
      function createCampaign() {
        showAlert('Creating campaign...', 'info');
      }
      function importCampaign() {
        showAlert('Importing campaign...', 'info');
      }
      // Moderation Functions
      function scanContent() {
        showAlert('Scanning content...', 'info');
      }
      function reviewReports() {
        showAlert('Loading reports for review...', 'info');
      }
      function updateFilters() {
        showAlert('Updating content filters...', 'info');
      }
      function exportModerationLog() {
        showAlert('Exporting moderation log...', 'info');
      }
      function addTextFilter() {
        showAlert('Text filter added', 'success');
      }
      function addLinkFilter() {
        showAlert('Link filter added', 'success');
      }
      function testFilters() {
        showAlert('Testing filters...', 'info');
      }
      function exportFilters() {
        showAlert('Exporting filters...', 'info');
      }
      function importFilters() {
        showAlert('Importing filters...', 'info');
      }
      function saveFilters() {
        showAlert('Filters saved successfully', 'success');
      }
      function searchUsers() {
        showAlert('Searching users...', 'info');
      }
      function executeBulkAction() {
        const action = document.getElementById('bulkAction').value;
        showAlert(`Executing bulk action:${action}`, 'info');
      }
      function filterLogs() {
        showAlert('Filtering logs...', 'info');
      }
      // Analytics Functions
      function refreshAnalytics() {
        loadAnalyticsData();
      }
      function exportAnalytics() {
        showAlert('Exporting analytics report...', 'info');
      }
      function scheduleReport() {
        showAlert('Scheduling report...', 'info');
      }
      function generateReport() {
        showAlert('Generating custom report...', 'info');
      }
      function exportReport() {
        showAlert('Exporting report...', 'info');
      }
      // Settings Functions
      // ============================================================================
      // System Maintenance Functions (Firebase Implementation)
      // ============================================================================
      async function clearCache() {
        try {
          showLoading('Clearing cache...');
          // Clear browser cache
          if ('caches' in window) {
            const cacheNames = await caches.keys();
            await Promise.all(cacheNames.map(name => caches.delete(name)));
          }
          // Log cache clear event
          await db.collection('systemLogs').add({
            level: 'info',
            message: 'Cache cleared by admin',
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            userId: currentUser.uid,
          });
          hideLoading();
          showAlert('Cache cleared successfully', 'success');
        } catch (error) {
          hideLoading();
          showAlert(`Error clearing cache:${error.message}`, 'error');
          console.error('Error clearing cache:', error);
        }
      }
      async function restartServices() {
        try {
          showLoading('Restarting services...');
          // Log restart event
          await db.collection('systemLogs').add({
            level: 'info',
            message: 'Services restart initiated by admin',
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            userId: currentUser.uid,
          });
          // Simulate restart delay
          await new Promise(resolve => setTimeout(resolve, 2000));
          hideLoading();
          showAlert('Services restarted successfully', 'success');
        } catch (error) {
          hideLoading();
          showAlert(`Error restarting services:${error.message}`, 'error');
          console.error('Error restarting services:', error);
        }
      }
      async function backupDatabase() {
        try {
          showLoading('Starting database backup...');
          // Log backup event
          await db.collection('systemLogs').add({
            level: 'info',
            message: 'Database backup initiated by admin',
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            userId: currentUser.uid,
          });
          // Create backup record
          await db.collection('backups').add({
            type: 'manual',
            status: 'in_progress',
            initiatedBy: currentUser.uid,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          });
          hideLoading();
          showAlert('Database backup started successfully', 'success');
        } catch (error) {
          hideLoading();
          showAlert(`Error starting backup:${error.message}`, 'error');
          console.error('Error starting backup:', error);
        }
      }
      async function optimizeDatabase() {
        try {
          showLoading('Starting database optimization...');
          // Log optimization event
          await db.collection('systemLogs').add({
            level: 'info',
            message: 'Database optimization initiated by admin',
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            userId: currentUser.uid,
          });
          // Update system metrics
          await db.collection('systemMetrics').add({
            type: 'optimization',
            status: 'started',
            timestamp: firebase.firestore.FieldValue.serverTimestamp(),
            initiatedBy: currentUser.uid,
          });
          hideLoading();
          showAlert('Database optimization started successfully', 'success');
        } catch (error) {
          hideLoading();
          showAlert(`Error starting optimization:${error.message}`, 'error');
          console.error('Error starting optimization:', error);
        }
      }
      // ============================================================================
      // Enhanced Data Loading Functions
      // ============================================================================
      async function loadRecentActivity() {
        try {
          // Load recent activity from system logs
          const logsRef = db.collection('systemLogs');
          const snapshot = await logsRef
            .orderBy('timestamp', 'desc')
            .limit(10)
            .get();
          const activityList = document.getElementById('recentActivityList');
          if (activityList) {
            const activities = [];
            snapshot.forEach(doc => {
              const logData = doc.data();
              activities.push({
                time: logData.timestamp
                  ? logData.timestamp.toDate()
                  : new Date(),
                message: logData.message || 'System activity',
                level: logData.level || 'info',
              });
            });
            activityList.textContent = activities
              .map(
                activity => `
<div class="activity-item"><span class="activity-time">${formatRelativeTime(activity.time)}</span><span class="activity-text">${activity.message}</span></div>
`
              )
              .join('');
          }
        } catch (error) {
          console.error('Error loading recent activity:', error);
          const activityList = document.getElementById('recentActivityList');
          if (activityList) {
            activityList.textContent =
              '<div class="activity-item">Unable to load recent activity</div>';
          }
        }
      }
      async function loadVideoLibrary() {
        try {
          const videosRef = db.collection('videos');
          const snapshot = await videosRef
            .orderBy('createdAt', 'desc')
            .limit(20)
            .get();
          const videoGrid = document.getElementById('videoGrid');
          if (videoGrid) {
            if (snapshot.empty) {
              videoGrid.textContent =
                '<div class="video-card">No videos found</div>';
              return;
            }
            const videos = [];
            snapshot.forEach(doc => {
              const videoData = doc.data();
              videos.push({
                id: doc.id,
                title: videoData.title || 'Untitled Video',
                duration: videoData.duration || '0:00',
                thumbnail: videoData.thumbnail || 'üìπ',
                ...videoData,
              });
            });
            videoGrid.textContent = videos
              .map(
                video => `
<div class="video-card"><div class="video-thumbnail">${video.thumbnail}</div><div class="video-info"><h4>${video.title}</h4><p>Duration:${video.duration}</p></div></div>
`
              )
              .join('');
          }
        } catch (error) {
          console.error('Error loading video library:', error);
          const videoGrid = document.getElementById('videoGrid');
          if (videoGrid) {
            videoGrid.textContent =
              '<div class="video-card">Error loading videos</div>';
          }
        }
      }
      async function loadCollectionsList() {
        try {
          // Get list of collections by checking known collection names
          const collections = [
            'users',
            'games',
            'videos',
            'pages',
            'media',
            'messages',
            'notifications',
          ];
          const collectionsList = document.getElementById('collectionsList');
          if (collectionsList) {
            collectionsList.textContent = collections
              .map(
                collection => `
<div class="collection-item" ><span class="collection-icon">${getCollectionIcon(collection)}</span><span class="collection-name">${collection}</span></div>
`
              )
              .join('');
          }
        } catch (error) {
          console.error('Error loading collections list:', error);
          const collectionsList = document.getElementById('collectionsList');
          if (collectionsList) {
            collectionsList.textContent =
              '<div class="collection-item">Error loading collections</div>';
          }
        }
      }
      async function loadMessageTemplates() {
        try {
          const templatesRef = db.collection('messageTemplates');
          const snapshot = await templatesRef.get();
          const templatesGrid = document.getElementById('templatesGrid');
          if (templatesGrid) {
            if (snapshot.empty) {
              templatesGrid.textContent =
                '<div class="template-card">No templates found</div>';
              return;
            }
            const templates = [];
            snapshot.forEach(doc => {
              const templateData = doc.data();
              templates.push({
                id: doc.id,
                name: templateData.name || 'Untitled Template',
                description: templateData.description || 'No description',
                ...templateData,
              });
            });
            templatesGrid.textContent = templates
              .map(
                template => `
<div class="template-card"><h4>${template.name}</h4><p>${template.description}</p><button class="admin-btn" >Edit</button></div>
`
              )
              .join('');
          }
        } catch (error) {
          console.error('Error loading message templates:', error);
          const templatesGrid = document.getElementById('templatesGrid');
          if (templatesGrid) {
            templatesGrid.textContent =
              '<div class="template-card">Error loading templates</div>';
          }
        }
      }
      async function loadReportsQueue() {
        try {
          const reportsRef = db.collection('moderationReports');
          const snapshot = await reportsRef
            .where('status', '==', 'pending')
            .orderBy('createdAt', 'desc')
            .limit(10)
            .get();
          const reportsQueue = document.getElementById('reportsQueue');
          if (reportsQueue) {
            if (snapshot.empty) {
              reportsQueue.textContent =
                '<div class="report-item">No pending reports</div>';
              return;
            }
            const reports = [];
            snapshot.forEach(doc => {
              const reportData = doc.data();
              reports.push({
                id: doc.id,
                type: reportData.type || 'General',
                content: reportData.content || 'No content',
                timestamp: reportData.createdAt,
                ...reportData,
              });
            });
            reportsQueue.textContent = reports
              .map(
                report => `
<div class="report-item"><div class="report-header"><span class="report-type">${report.type}</span><span class="report-time">${formatRelativeTime(report.timestamp?.toDate())}</span></div><div class="report-content">${report.content}</div><div class="report-actions"><button class="admin-btn" >Approve</button><button class="admin-btn danger" >Dismiss</button></div></div>
`
              )
              .join('');
          }
        } catch (error) {
          console.error('Error loading reports queue:', error);
          const reportsQueue = document.getElementById('reportsQueue');
          if (reportsQueue) {
            reportsQueue.textContent =
              '<div class="report-item">Error loading reports</div>';
          }
        }
      }
      // ============================================================================
      // Additional Helper Functions
      // ============================================================================
      function formatRelativeTime(date) {
        if (!date) return 'Unknown time';
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        if (diffMins < 1) return 'Just now';
        if (diffMins < 60)
          return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
        if (diffHours < 24)
          return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
        if (diffDays < 7)
          return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
        return formatDate(date);
      }
      function getCollectionIcon(collection) {
        const icons = {
          users: 'üë•',
          games: 'üéÆ',
          videos: 'üìπ',
          pages: 'üìÑ',
          media: 'üìÅ',
          messages: 'üí¨',
          notifications: 'üîî',
        };
        return icons[collection] || 'üìã';
      }
      function selectCollection(collectionName) {
        showAlert(`Selected collection:${collectionName}`, 'info');
        // Load documents for this collection
        loadCollectionDocuments(collectionName);
      }
      async function loadCollectionDocuments(collectionName) {
        try {
          showLoading(`Loading ${collectionName} documents...`);
          const snapshot = await db.collection(collectionName).limit(10).get();
          hideLoading();
          showAlert(
            `Loaded ${snapshot.size} documents from ${collectionName}`,
            'success'
          );
          // This would populate a documents view
        } catch (error) {
          hideLoading();
          showAlert(`Error loading documents:${error.message}`, 'error');
          console.error('Error loading collection documents:', error);
        }
      }
      function editTemplate(templateId) {
        showAlert(`Editing template:${templateId}`, 'info');
        // This would open a template editor
      }
      async function approveReport(reportId) {
        try {
          await db.collection('moderationReports').doc(reportId).update({
            status: 'approved',
            resolvedAt: firebase.firestore.FieldValue.serverTimestamp(),
            resolvedBy: currentUser.uid,
          });
          showAlert('Report approved', 'success');
          loadReportsQueue(); // Refresh the queue
        } catch (error) {
          showAlert(`Error approving report:${error.message}`, 'error');
          console.error('Error approving report:', error);
        }
      }
      async function dismissReport(reportId) {
        try {
          await db.collection('moderationReports').doc(reportId).update({
            status: 'dismissed',
            resolvedAt: firebase.firestore.FieldValue.serverTimestamp(),
            resolvedBy: currentUser.uid,
          });
          showAlert('Report dismissed', 'success');
          loadReportsQueue(); // Refresh the queue
        } catch (error) {
          showAlert(`Error dismissing report:${error.message}`, 'error');
          console.error('Error dismissing report:', error);
        }
      }
      function populateSettingsForm(settings) {
        // Populate settings form with current values
        Object.keys(settings).forEach(key => {
          const element = document.getElementById(key);
          if (element) {
            if (element.type === 'checkbox') {
              element.checked = settings[key];
            } else {
              element.value = settings[key];
            }
          }
        });
      }
      // ============================================================================
      // Chart Initialization Functions
      // ============================================================================
      function initializeAnalyticsCharts() {
        // Initialize Chart.js charts for analytics
        const ctx1 = document
          .getElementById('userGrowthChart')
          ?.getContext('2d');
        const ctx2 = document
          .getElementById('engagementChart')
          ?.getContext('2d');
        if (ctx1) {
          new Chart(ctx1, {
            type: 'line',
            data: {
              labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
              datasets: [
                {
                  label: 'User Growth',
                  data: [100, 150, 200, 280, 350, 450],
                  borderColor: '#00b4d8',
                  backgroundColor: 'rgba(0, 180, 216, .1)',
                  tension: 0.4,
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  labels: {
                    color: '#e0e0e0',
                  },
                },
              },
              scales: {
                x: {
                  ticks: {
                    color: '#e0e0e0',
                  },
                },
                y: {
                  ticks: {
                    color: '#e0e0e0',
                  },
                },
              },
            },
          });
        }
        if (ctx2) {
          new Chart(ctx2, {
            type: 'doughnut',
            data: {
              labels: ['Active', 'Inactive', 'Suspended'],
              datasets: [
                {
                  data: [70, 25, 5],
                  backgroundColor: ['#28a745', '#6c757d', '#ffc107'],
                },
              ],
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  labels: {
                    color: '#e0e0e0',
                  },
                },
              },
            },
          });
        }
      }
      function initializeConsole() {
        const consoleOutput = document.getElementById('consoleOutput');
        if (consoleOutput) {
          consoleOutput.textContent = `
<div class="console-welcome"><p>üöÄ 3BallNetwork Developer Console</p><p>Type 'help' for available commands</p></div>
`;
        }
      }
      // ============================================================================
      // Additional Helper Functions
      // ============================================================================
      async function loadRecentActivity() {
        // Load recent activity for dashboard
        const activityList = document.getElementById('recentActivityList');
        if (activityList) {
          activityList.textContent = `
<div class="activity-item"><span class="activity-time">2 minutes ago</span><span class="activity-text">User John Doe logged in</span></div><div class="activity-item"><span class="activity-time">5 minutes ago</span><span class="activity-text">New game session created</span></div><div class="activity-item"><span class="activity-time">10 minutes ago</span><span class="activity-text">Content report resolved</span></div>
`;
        }
      }
      async function loadVideoLibrary() {
        const videoGrid = document.getElementById('videoGrid');
        if (videoGrid) {
          videoGrid.textContent = `
<div class="video-card"><div class="video-thumbnail">üìπ</div><div class="video-info"><h4>Game Highlights #1</h4><p>Duration:2:34</p></div></div><div class="video-card"><div class="video-thumbnail">üìπ</div><div class="video-info"><h4>Training Session</h4><p>Duration:15:22</p></div></div>
`;
        }
      }
      async function loadCollectionsList() {
        const collectionsList = document.getElementById('collectionsList');
        if (collectionsList) {
          collectionsList.textContent = `
<div class="collection-item" ><span class="collection-icon">üë•</span><span class="collection-name">users</span></div><div class="collection-item" ><span class="collection-icon">üéÆ</span><span class="collection-name">games</span></div><div class="collection-item" ><span class="collection-icon">üìù</span><span class="collection-name">content</span></div>
`;
        }
      }
      function selectCollection(collectionName) {
        showAlert(`Selected collection:${collectionName}`, 'info');
        // Load documents for this collection
      }
      async function loadMessageTemplates() {
        const templatesGrid = document.getElementById('templatesGrid');
        if (templatesGrid) {
          templatesGrid.textContent = `
<div class="template-card"><h4>Welcome Email</h4><p>New user welcome message</p><button class="admin-btn" >Edit</button></div><div class="template-card"><h4>Password Reset</h4><p>Password reset instructions</p><button class="admin-btn" >Edit</button></div>
`;
        }
      }
      function editTemplate(templateId) {
        showAlert(`Editing template:${templateId}`, 'info');
      }
      async function loadReportsQueue() {
        const reportsQueue = document.getElementById('reportsQueue');
        if (reportsQueue) {
          reportsQueue.textContent = `
<div class="report-item"><div class="report-header"><span class="report-type">Spam</span><span class="report-time">2 hours ago</span></div><div class="report-content">Inappropriate content reported by user</div><div class="report-actions"><button class="admin-btn" >Approve</button><button class="admin-btn danger" >Dismiss</button></div></div>
`;
        }
      }
      function approveReport(id) {
        showAlert(`Report ${id} approved`, 'success');
      }
      function dismissReport(id) {
        showAlert(`Report ${id} dismissed`, 'info');
      }
      function populateSettingsForm(settings) {
        // Populate settings form with current values
        Object.keys(settings).forEach(key => {
          const element = document.getElementById(key);
          if (element) {
            element.value = settings[key];
          }
        });
      }
      // ============================================================================
      // Enhanced User Experience Features
      // ============================================================================
      // Mobile menu toggle
      function toggleMobileMenu() {
        const sidebar = document.querySelector('.sidebar');
        if (sidebar) {
          sidebar.classList.toggle('mobile-open');
        }
      }
      // Auto-save functionality for forms
      function enableAutoSave(formId, saveFunction) {
        const form = document.getElementById(formId);
        if (form) {
          let saveTimeout;
          form.addEventListener('input', function () {
            clearTimeout(saveTimeout);
            saveTimeout = setTimeout(() => {
              saveFunction();
              showAlert('Changes auto-saved', 'success');
            }, 2000);
          });
        }
      }
      // Keyboard shortcuts
      document.addEventListener('keydown', function (e) {
        // Ctrl/Cmd + S to save
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
          e.preventDefault();
          const activeTab = document.querySelector('.admin-section.active');
          if (activeTab && activeTab.id === 'settings') {
            saveAllSettings();
          }
        }
        // Ctrl/Cmd + R to refresh current section
        if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
          e.preventDefault();
          const activeTab = document.querySelector('.admin-section.active');
          if (activeTab) {
            loadSectionData(activeTab.id);
          }
        }
        // ESC to close modals
        if (e.key === 'Escape') {
          const modals = document.querySelectorAll('.modal.show');
          modals.forEach(modal => modal.classList.remove('show'));
        }
      });
      // Enhanced button loading states
      function setButtonLoading(buttonId, loading = true) {
        const button = document.getElementById(buttonId);
        if (button) {
          if (loading) {
            button.classList.add('btn-loading');
            button.disabled = true;
          } else {
            button.classList.remove('btn-loading');
            button.disabled = false;
          }
        }
      }
      // Progressive enhancement for tables
      function enhanceTable(tableId) {
        const table = document.getElementById(tableId);
        if (table) {
          // Add sorting functionality
          const headers = table.querySelectorAll('th');
          headers.forEach((header, index) => {
            header.style.cursor = 'pointer';
            header.addEventListener('click', () => sortTable(tableId, index));
          });
          // Add row selection
          const rows = table.querySelectorAll('tbody tr');
          rows.forEach(row => {
            row.addEventListener('click', function () {
              this.classList.toggle('selected');
            });
          });
        }
      }
      function sortTable(tableId, columnIndex) {
        const table = document.getElementById(tableId);
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const sortedRows = rows.sort((a, b) => {
          const aText = a.cells[columnIndex].textContent.trim();
          const bText = b.cells[columnIndex].textContent.trim();
          return aText.localeCompare(bText);
        });
        tbody.textContent = "";
        sortedRows.forEach(row => tbody.appendChild(row));
      }
      // Real-time connection status
      function monitorConnectionStatus() {
        window.addEventListener('online', function () {
          showAlert('Connection restored', 'success');
        });
        window.addEventListener('offline', function () {
          showAlert(
            'Connection lost. Changes will be saved when reconnected.',
            'warning'
          );
        });
      }
      // Performance monitoring
      function logPerformanceMetrics() {
        if (
          performance.navigation.type === performance.navigation.TYPE_RELOAD
        ) {
          console.log('üîÑ Page reloaded by user');
        }
        window.addEventListener('load', function () {
          const loadTime =
            performance.timing.loadEventEnd -
            performance.timing.navigationStart;
          console.log(`‚ö° Page loaded in ${loadTime}ms`);
          // Log to analytics if needed
          if (currentUser) {
            db.collection('analytics')
              .add({
                type: 'admin_load_time',
                userId: currentUser.uid,
                loadTime: loadTime,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
              })
              .catch(error => console.log('Analytics logging failed:', error));
          }
        });
      }
      // Initialize enhanced features when DOM is ready
      document.addEventListener('DOMContentLoaded', function () {
        // Enable connection monitoring
        monitorConnectionStatus();
        // Enable performance monitoring
        logPerformanceMetrics();
        // Add mobile menu button if needed
        const sidebar = document.querySelector('.sidebar');
        if (sidebar && window.innerWidth <= 768) {
          const menuButton = document.createElement('button');
          menuButton.textContent = "";
          menuButton.className = 'mobile-menu-toggle';
          menuButton.onclick = toggleMobileMenu;
          menuButton.style.cssText = `
position:fixed;
top:20px;
left:20px;
z-index:1001;
background:var(--primary-blue);
color:white;
border:none;
border-radius:5px;
padding:10px;
font-size:18px;
cursor:pointer;
`;
          document.body.appendChild(menuButton);
        }
        // Enhance tables when they're loaded
        setTimeout(() => {
          enhanceTable('usersTable');
          enhanceTable('pagesTable');
        }, 1000);
      });
      // Service worker registration for offline support
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', function () {
          navigator.serviceWorker
            .register('/sw.js')
            .then(function (registration) {
              console.log('‚úÖ Service Worker registered successfully');
            })
            .catch(function (error) {
              console.log('‚ùå Service Worker registration failed:', error);
            });
        });
      }
      // ============================================================================
      // Initialize Application
      // ============================================================================
      // Initialize when page loads
      document.addEventListener('DOMContentLoaded', function () {
        console.log('üöÄ 3BallNetwork Admin Portal - Initializing...');
        // Set up event listeners
        setupEventListeners();
        // Start authentication check with timeout
        showLoading('Initializing admin portal...');
        // Add a safety timeout to prevent hanging
        const initTimeout = setTimeout(() => {
          console.warn('‚ö†Ô∏è Authentication timeout - showing auth wall');
          hideLoading();
          showAuthWall();
          showAlert(
            'Authentication timeout. Please try logging in manually.',
            'warning'
          );
        }, 20000); // 20 second timeout
        // Clear timeout if auth state changes
        const unsubscribe = auth.onAuthStateChanged(() => {
          clearTimeout(initTimeout);
          unsubscribe(); // Clean up listener
        });
        // Firebase will handle auth state changes
        // The loading will be hidden when auth state is determined
      });
      function setupEventListeners() {
        // Login form submission
        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
          loginForm.addEventListener('submit', function (e) {
            e.preventDefault();
            attemptLogin();
          });
        }
        // Enter key for admin password
        const adminPassword = document.getElementById('adminPassword');
        if (adminPassword) {
          adminPassword.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
              attemptLogin();
            }
          });
        }
        // Add real-time search listeners
        const userSearch = document.getElementById('userSearch');
        if (userSearch) {
          userSearch.addEventListener('input', debounce(searchUsers, 500));
        }
        const pageSearch = document.getElementById('pageSearch');
        if (pageSearch) {
          pageSearch.addEventListener('input', debounce(searchPages, 500));
        }
      }
      // Debounce function for search
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
      // Enhanced error handling for unhandled promise rejections
      window.addEventListener('unhandledrejection', function (event) {
        console.error('Unhandled promise rejection:', event.reason);
        showAlert('An unexpected error occurred. Please try again.', 'error');
      });
      // Enhanced error handling for general errors
      window.addEventListener('error', function (event) {
        console.error('JavaScript error:', event.error);
        if (event.error.message.includes('Firebase')) {
          showAlert(
            'Firebase connection error. Please check your connection.',
            'error'
          );
        }
      });
      console.log(
        'üöÄ 3BallNetwork Admin Portal - Phase 3 Firebase Integration Loaded'
      );
      console.log(
        '‚úÖ Real-time data, authentication, and CRUD operations enabled'
      );
    </script>
    <script>
      // Performance monitoring for 3 Ball Network
      (function () {
        'use strict'; // Track Core Web Vitals function trackWebVitals() { // Largest Contentful Paint new PerformanceObserver((list) => { const entries = list.getEntries(); const lastEntry = entries[entries.length - 1]; console.log('LCP:', lastEntry.startTime); // Send to analytics if needed if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'LCP', value: Math.round(lastEntry.startTime) }); } }).observe({ type: 'largest-contentful-paint', buffered: true }); // Cumulative Layout Shift new PerformanceObserver((list) => { let clsValue = 0; for (const entry of list.getEntries()) { if (!entry.hadRecentInput) { clsValue += entry.value; } } console.log('CLS:', clsValue); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'CLS', value: Math.round(clsValue * 1000) }); } }).observe({ type: 'layout-shift', buffered: true }); // First Input Delay new PerformanceObserver((list) => { const firstInput = list.getEntries()[0]; console.log('FID:', firstInput.processingStart - firstInput.startTime); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'FID', value: Math.round(firstInput.processingStart - firstInput.startTime) }); } }).observe({ type: 'first-input', buffered: true }); } // Track page load times function trackPageLoad() { window.addEventListener('load', () => { const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart; console.log('Page Load Time:', loadTime + 'ms'); const perfData = { loadTime, domContentLoaded: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart, firstPaint: performance.getEntriesByType('paint')[0]?.startTime || 0, firstContentfulPaint: performance.getEntriesByType('paint')[1]?.startTime || 0 }; // Store in localStorage for admin dashboard localStorage.setItem('pagePerformance', JSON.stringify(perfData)); }); } // Track resource loading function trackResourceLoading() { const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.duration > 1000) { // Slow resources > 1s console.warn('Slow resource:', entry.name, entry.duration + 'ms'); } } }); observer.observe({ type: 'resource', buffered: true }); } // Initialize monitoring if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }); } else { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }
      })();
    </script>
    <script>
      // Accessibility enhancements
      (function () {
        'use strict'; // Add focus management function enhanceFocus() { // Skip to main content link const skipLink = document.createElement('a'); skipLink.href = '#main-content'; skipLink.textContent = 'Skip to main content'; skipLink.className = 'skip-link'; skipLink.style.cssText = 'position:absolute;top:-40px;left:0;background:#00b4d8;color:#fff;padding:8px;text-decoration:none;z-index:1000'; skipLink.addEventListener('focus', () => { skipLink.style.top = '0'; }); skipLink.addEventListener('blur', () => { skipLink.style.top = '-40px'; }); document.body.insertBefore(skipLink, document.body.firstChild); // Add main content landmark const mainContent = document.querySelector('main') || document.querySelector('.main-content'); if (mainContent) { mainContent.id = 'main-content'; mainContent.setAttribute('tabindex', '-1'); } } // Add ARIA labels and descriptions function enhanceARIA() { // Add ARIA labels to buttons without text const buttons = document.querySelectorAll('button:not([aria-label])'); buttons.forEach(button => { const text = button.textContent || button.innerHTML; if (text.trim() && !button.getAttribute('aria-label')) { button.setAttribute('aria-label', text.trim()); } }); // Add ARIA labels to form inputs const inputs = document.querySelectorAll('input:not([aria-label]):not([id])'); inputs.forEach(input => { const placeholder = input.getAttribute('placeholder'); if (placeholder) { input.setAttribute('aria-label', placeholder); } }); // Add role to navigation const navs = document.querySelectorAll('nav:not([role])'); navs.forEach(nav => { nav.setAttribute('role', 'navigation'); }); } // Add keyboard navigation function enhanceKeyboardNavigation() { // Add keyboard shortcuts document.addEventListener('keydown', (e) => { // Alt + M for main menu if (e.altKey && e.key === 'm') { e.preventDefault(); const menu = document.querySelector('.menu, .navigation, nav'); if (menu) menu.focus(); } // Alt + S for search if (e.altKey && e.key === 's') { e.preventDefault(); const search = document.querySelector('input[type="search"], .search-input'); if (search) search.focus(); } // Escape to close modals if (e.key === 'Escape') { const modals = document.querySelectorAll('.modal.active, .popup.active'); modals.forEach(modal => { modal.classList.remove('active'); }); } }); } // Add screen reader announcements function addScreenReaderSupport() { // Create announcement region const announcer = document.createElement('div'); announcer.id = 'screen-reader-announcer'; announcer.setAttribute('aria-live', 'polite'); announcer.setAttribute('aria-atomic', 'true'); announcer.style.cssText = 'position:absolute;left:-10000px;width:1px;height:1px;overflow:hidden'; document.body.appendChild(announcer); // Function to announce messages window.announceToScreenReader = function(message) { announcer.textContent = message; setTimeout(() => { announcer.textContent = ''; }, 1000); }; } // Initialize accessibility features if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }); } else { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }
      })();
    </script>
    <script>
      // Mobile experience enhancements
      (function () {
        'use strict'; // Add touch gestures function addTouchGestures() { let touchStartX = 0; let touchStartY = 0; document.addEventListener('touchstart', (e) => { touchStartX = e.touches[0].clientX; touchStartY = e.touches[0].clientY; }); document.addEventListener('touchend', (e) => { const touchEndX = e.changedTouches[0].clientX; const touchEndY = e.changedTouches[0].clientY; const deltaX = touchEndX - touchStartX; const deltaY = touchEndY - touchStartY; // Swipe detection if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) { if (deltaX > 0) { // Swipe right const event = new CustomEvent('swipeRight'); document.dispatchEvent(event); } else { // Swipe left const event = new CustomEvent('swipeLeft'); document.dispatchEvent(event); } } }); } // Optimize touch targets function optimizeTouchTargets() { const buttons = document.querySelectorAll('button, a, input[type="button"], input[type="submit"]'); buttons.forEach(button => { const rect = button.getBoundingClientRect(); if (rect.width < 44 || rect.height < 44) { button.style.minWidth = '44px'; button.style.minHeight = '44px'; button.style.display = 'inline-flex'; button.style.alignItems = 'center'; button.style.justifyContent = 'center'; } }); } // Add mobile menu toggle function addMobileMenu() { const nav = document.querySelector('nav, .navigation'); if (nav && window.innerWidth <= 768) { const toggleButton = document.createElement('button'); toggleButton.textContent = ""; toggleButton.className = 'mobile-menu-toggle'; toggleButton.style.cssText = 'position:fixed;top:10px;left:10px;z-index:1000;background:#00b4d8;color:#fff;border:none;padding:10px;border-radius:4px;font-size:18px'; toggleButton.setAttribute('aria-label', 'Toggle mobile menu'); toggleButton.addEventListener('click', () => { nav.classList.toggle('mobile-menu-active'); toggleButton.textContent = nav.classList.contains('mobile-menu-active') ? '‚úï' : '‚ò∞'; }); document.body.appendChild(toggleButton); } } // Add viewport adjustments function optimizeViewport() { // Prevent zoom on input focus const inputs = document.querySelectorAll('input, textarea, select'); inputs.forEach(input => { input.addEventListener('focus', () => { const viewport = document.querySelector('meta[name="viewport"]'); if (viewport) { viewport.content = 'width=device-width, initial-scale=1, maximum-scale=1'; } }); input.addEventListener('blur', () => { const viewport = document.querySelector('meta[name="viewport"]'); if (viewport) { viewport.content = 'width=device-width, initial-scale=1'; } }); }); } // Initialize mobile enhancements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addTouchGestures(); optimizeTouchTargets(); addMobileMenu(); optimizeViewport(); }); } else { addTouchGestures(); optimizeTouchTargets(); addMobileMenu(); optimizeViewport(); }
      })();
    </script>
    <script>
      // Loading states management
      (function () {
        'use strict'; // Show loading spinner window.showLoading = function(element) { if (typeof element === 'string') { element = document.querySelector(element); } if (element) { element.textContent = ""; element.disabled = true; } }; // Hide loading spinner window.hideLoading = function(element, originalText) { if (typeof element === 'string') { element = document.querySelector(element); } if (element) { element.textContent = originalText || 'Submit'; element.disabled = false; } }; // Add loading overlay window.showLoadingOverlay = function(message = 'Loading...') { let overlay = document.getElementById('loading-overlay'); if (!overlay) { overlay = document.createElement('div'); overlay.id = 'loading-overlay'; overlay.className = 'loading-overlay'; overlay.textContent = "" + message + '</p></div>'; document.body.appendChild(overlay); } overlay.classList.remove('hidden'); }; // Hide loading overlay window.hideLoadingOverlay = function() { const overlay = document.getElementById('loading-overlay'); if (overlay) { overlay.classList.add('hidden'); } }; // Add skeleton loading to cards function addSkeletonLoading() { const cards = document.querySelectorAll('.card:empty, .player-card:empty, .game-card:empty'); cards.forEach(card => { card.textContent = ""; }); } // Initialize loading states if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addSkeletonLoading(); }); } else { addSkeletonLoading(); }
      })();
    </script>
    <script>
      // Navigation improvements
      (function () {
        'use strict'; // Add breadcrumb navigation function addBreadcrumbs() { const path = window.location.pathname; const parts = path.split('/').filter(part => part); if (parts.length > 0) { const breadcrumbContainer = document.createElement('nav'); breadcrumbContainer.className = 'breadcrumb'; breadcrumbContainer.setAttribute('aria-label', 'Breadcrumb'); let breadcrumbHTML = '<ol>'; breadcrumbHTML += '<li><a href="/">Home</a></li>'; let currentPath = ''; parts.forEach((part, index) => { currentPath += '/' + part; const isLast = index === parts.length - 1; const displayName = part.replace('.html', '').replace('-', ' '); if (isLast) { breadcrumbHTML += '<li aria-current="page">' + displayName + '</li>'; } else { breadcrumbHTML += '<li><a href="' + currentPath + '">' + displayName + '</a></li>'; } }); breadcrumbHTML += '</ol>'; breadcrumbContainer.textContent = breadcrumbHTML; const main = document.querySelector('main') || document.body; main.insertBefore(breadcrumbContainer, main.firstChild); } } // Add search functionality function enhanceSearch() { const searchInputs = document.querySelectorAll('input[type="search"], .search-input'); searchInputs.forEach(input => { // Add search suggestions const suggestions = document.createElement('div'); suggestions.className = 'search-suggestions'; suggestions.style.cssText = 'position:absolute;background:#fff;border:1px solid #ccc;border-top:none;max-height:200px;overflow-y:auto;z-index:1000;display:none'; input.parentNode.style.position = 'relative'; input.parentNode.appendChild(suggestions); input.addEventListener('input', (e) => { const query = e.target.value.toLowerCase(); if (query.length > 2) { // Show suggestions (mock data) const mockSuggestions = ['player profile', 'game statistics', 'team roster', 'coach dashboard']; const filteredSuggestions = mockSuggestions.filter(s => s.includes(query)); if (filteredSuggestions.length > 0) { suggestions.textContent = filteredSuggestions.map(s => '<div class="suggestion-item" style="padding:8px;cursor:pointer;border-bottom:1px solid #eee">' + s + '</div>' ).join(''); suggestions.style.display = 'block'; } else { suggestions.style.display = 'none'; } } else { suggestions.style.display = 'none'; } }); // Hide suggestions when clicking outside document.addEventListener('click', (e) => { if (!input.contains(e.target) && !suggestions.contains(e.target)) { suggestions.style.display = 'none'; } }); }); } // Add quick navigation function addQuickNavigation() { const quickNav = document.createElement('div'); quickNav.className = 'quick-nav'; quickNav.style.cssText = 'position:fixed;top:50%;right:20px;transform:translateY(-50%);z-index:1000;background:#fff;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1);padding:10px'; const quickLinks = [ { href: '/', text: 'üè†', title: 'Home' }, { href: '/player.html', text: 'üèÄ', title: 'Player' }, { href: '/coach.html', text: 'üë®‚Äçüè´', title: 'Coach' }, { href: '/admin.html', text: '‚öôÔ∏è', title: 'Admin' } ]; quickLinks.forEach(link => { const a = document.createElement('a'); a.href = link.href; a.textContent = link.text; a.title = link.title; a.style.cssText = 'display:block;padding:8px;text-decoration:none;font-size:20px;text-align:center;margin:2px 0;border-radius:4px;transition:background 0.2s'; a.addEventListener('mouseenter', () => { a.style.background = '#f0f0f0'; }); a.addEventListener('mouseleave', () => { a.style.background = 'transparent'; }); quickNav.appendChild(a); }); document.body.appendChild(quickNav); } // Initialize navigation improvements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addBreadcrumbs(); enhanceSearch(); addQuickNavigation(); }); } else { addBreadcrumbs(); enhanceSearch(); addQuickNavigation(); }
      })();
    </script>
    <script>
      // Enhanced interactivity
      (function () {
        'use strict'; // Add smooth scrolling function addSmoothScrolling() { document.documentElement.style.scrollBehavior = 'smooth'; // Smooth scroll to top button const scrollToTopBtn = document.createElement('button'); scrollToTopBtn.textContent = ""; scrollToTopBtn.className = 'scroll-to-top'; scrollToTopBtn.style.cssText = 'position:fixed;bottom:20px;right:20px;background:#00b4d8;color:#fff;border:none;width:50px;height:50px;border-radius:50%;font-size:20px;cursor:pointer;opacity:0;transition:opacity 0.3s;z-index:1000'; scrollToTopBtn.setAttribute('aria-label', 'Scroll to top'); scrollToTopBtn.addEventListener('click', () => { window.scrollTo({ top: 0, behavior: 'smooth' }); }); window.addEventListener('scroll', () => { if (window.scrollY > 300) { scrollToTopBtn.style.opacity = '1'; } else { scrollToTopBtn.style.opacity = '0'; } }); document.body.appendChild(scrollToTopBtn); } // Add hover effects function addHoverEffects() { const cards = document.querySelectorAll('.card, .player-card, .game-card'); cards.forEach(card => { card.style.transition = 'transform 0.2s, box-shadow 0.2s'; card.addEventListener('mouseenter', () => { card.style.transform = 'translateY(-2px)'; card.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)'; }); card.addEventListener('mouseleave', () => { card.style.transform = 'translateY(0)'; card.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)'; }); }); } // Add button feedback function addButtonFeedback() { const buttons = document.querySelectorAll('button, .btn'); buttons.forEach(button => { button.style.transition = 'all 0.2s'; button.addEventListener('mousedown', () => { button.style.transform = 'scale(0.95)'; }); button.addEventListener('mouseup', () => { button.style.transform = 'scale(1)'; }); button.addEventListener('mouseleave', () => { button.style.transform = 'scale(1)'; }); }); } // Add progress indicators function addProgressIndicators() { const forms = document.querySelectorAll('form'); forms.forEach(form => { const steps = form.querySelectorAll('.step, .form-step'); if (steps.length > 1) { const progressBar = document.createElement('div'); progressBar.className = 'progress-bar'; progressBar.style.cssText = 'width:100%;height:4px;background:#e0e0e0;border-radius:2px;margin-bottom:20px;overflow:hidden'; const progressFill = document.createElement('div'); progressFill.className = 'progress-fill'; progressFill.style.cssText = 'height:100%;background:#00b4d8;transition:width 0.3s;width:0%'; progressBar.appendChild(progressFill); form.insertBefore(progressBar, form.firstChild); // Update progress on step change const updateProgress = () => { const activeStep = form.querySelector('.step.active, .form-step.active'); if (activeStep) { const stepIndex = Array.from(steps).indexOf(activeStep); const progress = ((stepIndex + 1) / steps.length) * 100; progressFill.style.width = progress + '%'; } }; updateProgress(); // Watch for step changes const observer = new MutationObserver(updateProgress); observer.observe(form, { childList: true, subtree: true, attributes: true }); } }); } // Add tooltips function addTooltips() { const elementsWithTitle = document.querySelectorAll('[title]'); elementsWithTitle.forEach(element => { const title = element.getAttribute('title'); element.removeAttribute('title'); const tooltip = document.createElement('div'); tooltip.className = 'tooltip'; tooltip.textContent = title; tooltip.style.cssText = 'position:absolute;background:#333;color:#fff;padding:8px;border-radius:4px;font-size:12px;z-index:1000;opacity:0;pointer-events:none;transition:opacity 0.2s;white-space:nowrap'; element.appendChild(tooltip); element.addEventListener('mouseenter', () => { tooltip.style.opacity = '1'; }); element.addEventListener('mouseleave', () => { tooltip.style.opacity = '0'; }); }); } // Initialize interactivity enhancements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addSmoothScrolling(); addHoverEffects(); addButtonFeedback(); addProgressIndicators(); addTooltips(); }); } else { addSmoothScrolling(); addHoverEffects(); addButtonFeedback(); addProgressIndicators(); addTooltips(); }
      })();
    </script>
  </body>
</html>
