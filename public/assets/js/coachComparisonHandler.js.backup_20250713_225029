/**
 * Coach Comparison Handler
 * Manages player and team comparison functionality with modern event handling
 */

class CoachComparisonHandler {
  constructor() {
    this.selectedPlayers = [];
    this.selectedTeams = [];
    this.initializeEventListeners();
  }

  /**
   * Initialize all event listeners
   */
  initializeEventListeners() {
    document.addEventListener('DOMContentLoaded', () => {
      this.setupPlayerComparison();
      this.setupTeamComparison();
      this.setupPlayerSelection();
      this.setupTeamSelection();
    });
  }

  /**
   * Set up player comparison functionality
   */
  setupPlayerComparison() {
    const compareButton = document.querySelector(
      '[data-action="compare-players"]'
    );
    if (compareButton) {
      compareButton.addEventListener('click', e => {
        e.preventDefault();
        this.comparePlayers();
      });
    }
  }

  /**
   * Set up team comparison functionality
   */
  setupTeamComparison() {
    const compareButton = document.querySelector(
      '[data-action="compare-teams"]'
    );
    if (compareButton) {
      compareButton.addEventListener('click', e => {
        e.preventDefault();
        this.compareTeams();
      });
    }
  }

  /**
   * Set up player selection checkboxes
   */
  setupPlayerSelection() {
    document.addEventListener('change', e => {
      if (e.target.matches('.player-select')) {
        this.handlePlayerSelection(e.target);
      }
    });
  }

  /**
   * Set up team selection checkboxes
   */
  setupTeamSelection() {
    document.addEventListener('change', e => {
      if (e.target.matches('.team-select')) {
        this.handleTeamSelection(e.target);
      }
    });
  }

  /**
   * Handle individual player selection
   * @param {HTMLInputElement} checkbox - The player selection checkbox
   */
  handlePlayerSelection(checkbox) {
    const playerId = checkbox.value;
    const playerName =
      checkbox.getAttribute('data-player-name') || 'Unknown Player';

    if (checkbox.checked) {
      if (this.selectedPlayers.length >= 4) {
        checkbox.checked = false;
        window.errorHandler?.showWarning(
          'You can only compare up to 4 players at once.'
        );
        return;
      }

      this.selectedPlayers.push({ id: playerId, name: playerName });
    } else {
      this.selectedPlayers = this.selectedPlayers.filter(
        p => p.id !== playerId
      );
    }

    this.updatePlayerCompareButton();
  }

  /**
   * Handle individual team selection
   * @param {HTMLInputElement} checkbox - The team selection checkbox
   */
  handleTeamSelection(checkbox) {
    const teamId = checkbox.value;
    const teamName = checkbox.getAttribute('data-team-name') || 'Unknown Team';

    if (checkbox.checked) {
      if (this.selectedTeams.length >= 2) {
        checkbox.checked = false;
        window.errorHandler?.showWarning(
          'You can only compare up to 2 teams at once.'
        );
        return;
      }

      this.selectedTeams.push({ id: teamId, name: teamName });
    } else {
      this.selectedTeams = this.selectedTeams.filter(t => t.id !== teamId);
    }

    this.updateTeamCompareButton();
  }

  /**
   * Update the player compare button state
   */
  updatePlayerCompareButton() {
    const button = document.querySelector('[data-action="compare-players"]');
    if (!button) return;

    if (this.selectedPlayers.length < 2) {
      button.disabled = true;
      button.textContent = 'Compare (Select 2+ players)';
    } else {
      button.disabled = false;
      button.textContent = `Compare ${this.selectedPlayers.length} Players`;
    }
  }

  /**
   * Update the team compare button state
   */
  updateTeamCompareButton() {
    const button = document.querySelector('[data-action="compare-teams"]');
    if (!button) return;

    if (this.selectedTeams.length < 2) {
      button.disabled = true;
      button.textContent = 'Compare (Select 2 teams)';
    } else {
      button.disabled = false;
      button.textContent = `Compare ${this.selectedTeams.length} Teams`;
    }
  }

  /**
   * Execute player comparison
   */
  async comparePlayers() {
    if (this.selectedPlayers.length < 2) {
      window.errorHandler?.showWarning(
        'Please select at least 2 players to compare.'
      );
      return;
    }

    try {
      window.errorHandler?.showInfo('Loading player comparison...', 2000);

      const comparisonData = await this.fetchPlayerComparisonData(
        this.selectedPlayers
      );
      this.displayPlayerComparison(comparisonData);

      window.errorHandler?.showSuccess(
        'Player comparison loaded successfully!'
      );
    } catch (error) {
      console.error('Player comparison error:', error);
      window.errorHandler?.showError(
        'Failed to load player comparison. Please try again.'
      );
    }
  }

  /**
   * Execute team comparison
   */
  async compareTeams() {
    if (this.selectedTeams.length !== 2) {
      window.errorHandler?.showWarning(
        'Please select exactly 2 teams to compare.'
      );
      return;
    }

    try {
      window.errorHandler?.showInfo('Loading team comparison...', 2000);

      const comparisonData = await this.fetchTeamComparisonData(
        this.selectedTeams
      );
      this.displayTeamComparison(comparisonData);

      window.errorHandler?.showSuccess('Team comparison loaded successfully!');
    } catch (error) {
      console.error('Team comparison error:', error);
      window.errorHandler?.showError(
        'Failed to load team comparison. Please try again.'
      );
    }
  }

  /**
   * Fetch player comparison data from Firebase
   * @param {Array} players - Array of selected players
   */
  async fetchPlayerComparisonData(players) {
    // Simulate API call - replace with actual Firebase integration
    await new Promise(resolve => setTimeout(resolve, 1500));

    return players.map(player => ({
      ...player,
      stats: {
        points: Math.floor(Math.random() * 30) + 10,
        assists: Math.floor(Math.random() * 12) + 2,
        rebounds: Math.floor(Math.random() * 15) + 3,
        steals: Math.floor(Math.random() * 5) + 1,
        blocks: Math.floor(Math.random() * 4) + 1,
        fieldGoalPercentage: (Math.random() * 0.3 + 0.4).toFixed(3),
      },
    }));
  }

  /**
   * Fetch team comparison data from Firebase
   * @param {Array} teams - Array of selected teams
   */
  async fetchTeamComparisonData(teams) {
    // Simulate API call - replace with actual Firebase integration
    await new Promise(resolve => setTimeout(resolve, 1500));

    return teams.map(team => ({
      ...team,
      stats: {
        wins: Math.floor(Math.random() * 20) + 5,
        losses: Math.floor(Math.random() * 15) + 2,
        pointsPerGame: (Math.random() * 30 + 70).toFixed(1),
        assistsPerGame: (Math.random() * 10 + 15).toFixed(1),
        reboundsPerGame: (Math.random() * 15 + 35).toFixed(1),
        fieldGoalPercentage: (Math.random() * 0.2 + 0.4).toFixed(3),
      },
    }));
  }

  /**
   * Display player comparison results
   * @param {Array} comparisonData - The fetched comparison data
   */
  displayPlayerComparison(comparisonData) {
    const container =
      document.getElementById('playerComparisonResults') ||
      this.createResultsContainer('player');

    const html = `
      <div class="comparison-results">
        <h3>üèÄ Player Comparison Results</h3>
        <div class="comparison-grid">
          ${comparisonData
            .map(
              player => `
            <div class="player-card">
              <h4>${player.name}</h4>
              <div class="stats">
                <div class="stat">
                  <span class="label">Points:</span>
                  <span class="value">${player.stats.points}</span>
                </div>
                <div class="stat">
                  <span class="label">Assists:</span>
                  <span class="value">${player.stats.assists}</span>
                </div>
                <div class="stat">
                  <span class="label">Rebounds:</span>
                  <span class="value">${player.stats.rebounds}</span>
                </div>
                <div class="stat">
                  <span class="label">Steals:</span>
                  <span class="value">${player.stats.steals}</span>
                </div>
                <div class="stat">
                  <span class="label">Blocks:</span>
                  <span class="value">${player.stats.blocks}</span>
                </div>
                <div class="stat">
                  <span class="label">FG%:</span>
                  <span class="value">${player.stats.fieldGoalPercentage}</span>
                </div>
              </div>
            </div>
          `
            )
            .join('')}
        </div>
      </div>
    `;

    container.innerHTML = html;
  }

  /**
   * Display team comparison results
   * @param {Array} comparisonData - The fetched comparison data
   */
  displayTeamComparison(comparisonData) {
    const container =
      document.getElementById('teamComparisonResults') ||
      this.createResultsContainer('team');

    const html = `
      <div class="comparison-results">
        <h3>üèÜ Team Comparison Results</h3>
        <div class="comparison-grid">
          ${comparisonData
            .map(
              team => `
            <div class="team-card">
              <h4>${team.name}</h4>
              <div class="stats">
                <div class="stat">
                  <span class="label">Record:</span>
                  <span class="value">${team.stats.wins}-${team.stats.losses}</span>
                </div>
                <div class="stat">
                  <span class="label">PPG:</span>
                  <span class="value">${team.stats.pointsPerGame}</span>
                </div>
                <div class="stat">
                  <span class="label">APG:</span>
                  <span class="value">${team.stats.assistsPerGame}</span>
                </div>
                <div class="stat">
                  <span class="label">RPG:</span>
                  <span class="value">${team.stats.reboundsPerGame}</span>
                </div>
                <div class="stat">
                  <span class="label">FG%:</span>
                  <span class="value">${team.stats.fieldGoalPercentage}</span>
                </div>
              </div>
            </div>
          `
            )
            .join('')}
        </div>
      </div>
    `;

    container.innerHTML = html;
  }

  /**
   * Create a results container if it doesn't exist
   * @param {string} type - 'player' or 'team'
   */
  createResultsContainer(type) {
    const container = document.createElement('div');
    container.id = `${type}ComparisonResults`;
    container.className = 'comparison-results-container';

    // Try to insert after the comparison controls
    const controlsContainer = document.querySelector(
      `.${type}-comparison-controls`
    );
    if (controlsContainer && controlsContainer.parentNode) {
      controlsContainer.parentNode.insertBefore(
        container,
        controlsContainer.nextSibling
      );
    } else {
      // Fallback: append to main content area
      const main = document.querySelector('main') || document.body;
      main.appendChild(container);
    }

    return container;
  }

  /**
   * Clear all selections
   */
  clearSelections() {
    this.selectedPlayers = [];
    this.selectedTeams = [];

    document
      .querySelectorAll('.player-select, .team-select')
      .forEach(checkbox => {
        checkbox.checked = false;
      });

    this.updatePlayerCompareButton();
    this.updateTeamCompareButton();
  }
}

// Initialize when DOM is ready
const coachComparisonHandler = new CoachComparisonHandler();

// Export for ES6 modules
export { CoachComparisonHandler, coachComparisonHandler };

// Make available globally for legacy code
window.coachComparisonHandler = coachComparisonHandler;
window.comparePlayers = () => coachComparisonHandler.comparePlayers();
window.compareTeams = () => coachComparisonHandler.compareTeams();
