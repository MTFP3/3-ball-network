{"version":3,"file":"playerAnalytics-BQgY2Ufz.js","sources":["../../../public/assets/js/playerAnalytics.js"],"sourcesContent":["// Advanced Player Analytics System\n// Real-time performance tracking and AI insights\n\nclass PlayerAnalytics {\n  constructor() {\n    this.performanceData = [];\n    this.insights = [];\n    this.comparisons = {};\n    this.trends = {};\n  }\n\n  // Real-time performance tracking\n  trackPerformance(gameData) {\n    const performance = {\n      gameId: gameData.id,\n      date: gameData.date,\n      opponent: gameData.opponent,\n      minutes: gameData.minutes,\n      stats: gameData.stats,\n      situational: this.analyzeSituationalPerformance(gameData),\n      efficiency: this.calculateAdvancedEfficiency(gameData.stats),\n      impact: this.calculateGameImpact(gameData),\n      timestamp: new Date().toISOString(),\n    };\n\n    this.performanceData.push(performance);\n    this.generateInsights(performance);\n    return performance;\n  }\n\n  // AI-powered insights generation\n  generateInsights(performance) {\n    const insights = [];\n\n    // Shooting analysis\n    if (performance.stats.fga >= 8) {\n      const fgPct = (performance.stats.fgm / performance.stats.fga) * 100;\n      if (fgPct < 35) {\n        insights.push({\n          type: 'shooting',\n          severity: 'warning',\n          message: `Shot selection needs improvement - ${fgPct.toFixed(1)}% FG on ${performance.stats.fga} attempts`,\n          recommendation:\n            'Focus on high-percentage shots near the basket and open looks',\n        });\n      }\n    }\n\n    // Turnover analysis\n    const turnoverRate =\n      (performance.stats.turnovers /\n        (performance.stats.assists + performance.stats.points / 2)) *\n      100;\n    if (turnoverRate > 20) {\n      insights.push({\n        type: 'ballhandling',\n        severity: 'alert',\n        message: `High turnover rate: ${turnoverRate.toFixed(1)}%`,\n        recommendation:\n          'Work on ball security drills and decision-making under pressure',\n      });\n    }\n\n    // Clutch performance\n    if (\n      performance.situational.fourthQuarter &&\n      performance.situational.closeGame\n    ) {\n      insights.push({\n        type: 'clutch',\n        severity: 'info',\n        message: 'Strong clutch performance in close game',\n        recommendation:\n          'Continue developing late-game composure and leadership',\n      });\n    }\n\n    this.insights.push(...insights);\n    return insights;\n  }\n\n  // Calculate advanced efficiency metrics\n  calculateAdvancedEfficiency(stats) {\n    const possessions = stats.fga + stats.fta * 0.44 + stats.turnovers;\n    const points = stats.points;\n\n    return {\n      effectiveFG:\n        stats.fga > 0\n          ? ((stats.fgm + stats.threePM * 0.5) / stats.fga) * 100\n          : 0,\n      trueShootingPct: possessions > 0 ? (points / (2 * possessions)) * 100 : 0,\n      assistToTurnoverRatio:\n        stats.turnovers > 0 ? stats.assists / stats.turnovers : stats.assists,\n      reboundRate: ((stats.rebounds * 5) / 40) * 100, // Estimated based on team rebounds\n      usageRate: possessions > 0 ? (possessions / 80) * 100 : 0, // Estimated team possessions\n    };\n  }\n\n  // Analyze situational performance\n  analyzeSituationalPerformance(gameData) {\n    return {\n      fourthQuarter: gameData.situational?.fourthQuarter || false,\n      closeGame: gameData.situational?.closeGame || false,\n      pressure: gameData.situational?.pressure || 'normal',\n      location: gameData.situational?.location || 'home',\n      restDays: gameData.situational?.restDays || 1,\n    };\n  }\n\n  // Calculate game impact score\n  calculateGameImpact(gameData) {\n    const stats = gameData.stats;\n    const minutes = gameData.minutes;\n\n    // Impact formula considering per-minute production\n    const rawImpact =\n      stats.points * 1.0 +\n      stats.rebounds * 1.2 +\n      stats.assists * 1.5 +\n      stats.steals * 2.0 +\n      stats.blocks * 2.0 -\n      stats.turnovers * 1.5 -\n      stats.fouls * 0.5;\n\n    const perMinuteImpact = minutes > 0 ? rawImpact / minutes : 0;\n    const scaledImpact = perMinuteImpact * 36; // Per 36 minutes\n\n    return {\n      raw: rawImpact,\n      perMinute: perMinuteImpact,\n      per36: scaledImpact,\n      rating: this.getImpactRating(scaledImpact),\n    };\n  }\n\n  getImpactRating(impact) {\n    if (impact >= 25) return 'Elite';\n    if (impact >= 20) return 'Excellent';\n    if (impact >= 15) return 'Good';\n    if (impact >= 10) return 'Average';\n    return 'Below Average';\n  }\n\n  // Trend analysis\n  analyzeTrends(gameCount = 10) {\n    const recentGames = this.performanceData.slice(-gameCount);\n    if (recentGames.length < 3) return null;\n\n    const trends = {};\n\n    // Shooting trend\n    const shootingTrend = this.calculateTrend(\n      recentGames.map(g =>\n        g.stats.fga > 0 ? (g.stats.fgm / g.stats.fga) * 100 : 0\n      )\n    );\n    trends.shooting = {\n      direction:\n        shootingTrend > 5\n          ? 'improving'\n          : shootingTrend < -5\n            ? 'declining'\n            : 'stable',\n      value: shootingTrend,\n      message: this.getTrendMessage('shooting', shootingTrend),\n    };\n\n    // Impact trend\n    const impactTrend = this.calculateTrend(\n      recentGames.map(g => g.impact.per36)\n    );\n    trends.impact = {\n      direction:\n        impactTrend > 2\n          ? 'improving'\n          : impactTrend < -2\n            ? 'declining'\n            : 'stable',\n      value: impactTrend,\n      message: this.getTrendMessage('impact', impactTrend),\n    };\n\n    return trends;\n  }\n\n  calculateTrend(values) {\n    if (values.length < 2) return 0;\n\n    const n = values.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = values.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * values[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    return slope;\n  }\n\n  getTrendMessage(type, trend) {\n    const direction = trend > 0 ? 'improving' : 'declining';\n    const magnitude = Math.abs(trend);\n\n    if (type === 'shooting') {\n      if (magnitude > 10)\n        return `Shooting ${direction} significantly (${trend.toFixed(1)}% trend)`;\n      if (magnitude > 5) return `Shooting ${direction} moderately`;\n      return 'Shooting consistency maintained';\n    }\n\n    if (type === 'impact') {\n      if (magnitude > 5) return `Overall impact ${direction} significantly`;\n      if (magnitude > 2) return `Overall impact ${direction} moderately`;\n      return 'Impact level consistent';\n    }\n\n    return `${type} trend: ${direction}`;\n  }\n\n  // Comparison with league/team averages\n  generateComparisons(position, level = 'high_school') {\n    const benchmarks = this.getBenchmarks(position, level);\n    const playerAvg = this.calculateAverages();\n\n    const comparisons = {};\n\n    Object.keys(benchmarks).forEach(stat => {\n      const playerValue = playerAvg[stat] || 0;\n      const benchmark = benchmarks[stat];\n      const percentile = this.calculatePercentile(playerValue, benchmark);\n\n      comparisons[stat] = {\n        player: playerValue,\n        benchmark: benchmark.average,\n        percentile: percentile,\n        status:\n          percentile >= 75\n            ? 'excellent'\n            : percentile >= 50\n              ? 'above_average'\n              : percentile >= 25\n                ? 'below_average'\n                : 'needs_improvement',\n      };\n    });\n\n    return comparisons;\n  }\n\n  getBenchmarks(position, level) {\n    // Sample benchmarks - in real implementation, these would come from database\n    const benchmarks = {\n      high_school: {\n        point_guard: {\n          points: { average: 12.5, std: 5.2 },\n          assists: { average: 4.8, std: 2.1 },\n          rebounds: { average: 3.2, std: 1.5 },\n          steals: { average: 1.8, std: 0.9 },\n          turnovers: { average: 2.5, std: 1.2 },\n        },\n      },\n    };\n\n    return benchmarks[level]?.[position] || benchmarks.high_school.point_guard;\n  }\n\n  calculatePercentile(value, benchmark) {\n    // Simple percentile calculation - could be more sophisticated\n    const zScore = (value - benchmark.average) / benchmark.std;\n    return Math.max(0, Math.min(100, 50 + zScore * 15));\n  }\n\n  calculateAverages() {\n    if (this.performanceData.length === 0) return {};\n\n    const totals = this.performanceData.reduce((acc, game) => {\n      Object.keys(game.stats).forEach(stat => {\n        acc[stat] = (acc[stat] || 0) + (game.stats[stat] || 0);\n      });\n      return acc;\n    }, {});\n\n    const averages = {};\n    Object.keys(totals).forEach(stat => {\n      averages[stat] = totals[stat] / this.performanceData.length;\n    });\n\n    return averages;\n  }\n\n  // Get actionable recommendations\n  getRecommendations() {\n    const recent = this.performanceData.slice(-5);\n    const recommendations = [];\n\n    if (recent.length === 0) return recommendations;\n\n    const avgTurnovers =\n      recent.reduce((sum, g) => sum + (g.stats.turnovers || 0), 0) /\n      recent.length;\n    const avgShooting =\n      recent.reduce((sum, g) => {\n        const fga = g.stats.fga || 0;\n        return sum + (fga > 0 ? (g.stats.fgm / fga) * 100 : 0);\n      }, 0) / recent.length;\n\n    if (avgTurnovers > 3) {\n      recommendations.push({\n        area: 'Ball Security',\n        priority: 'high',\n        issue: 'Above average turnovers in recent games',\n        drills: [\n          'Two-ball dribbling',\n          'Pressure passing',\n          'Decision-making scenarios',\n        ],\n        goal: 'Reduce turnovers to under 2.5 per game',\n      });\n    }\n\n    if (avgShooting < 40) {\n      recommendations.push({\n        area: 'Shooting Efficiency',\n        priority: 'medium',\n        issue: 'Shooting percentage below optimal range',\n        drills: ['Form shooting', 'Catch and shoot', 'Shot selection training'],\n        goal: 'Increase field goal percentage to 45%+',\n      });\n    }\n\n    return recommendations;\n  }\n}\n\n// Export for ES modules\nexport { PlayerAnalytics };\n\n// Also make available globally for backward compatibility\nif (typeof window !== 'undefined') {\n  window.PlayerAnalytics = PlayerAnalytics;\n}\n"],"names":["PlayerAnalytics","gameData","performance","insights","fgPct","turnoverRate","stats","possessions","points","minutes","rawImpact","perMinuteImpact","scaledImpact","impact","gameCount","recentGames","trends","shootingTrend","g","impactTrend","values","n","x","_","i","sumX","b","sumY","sumXY","sum","xi","sumXX","type","trend","direction","magnitude","position","level","benchmarks","playerAvg","comparisons","stat","playerValue","benchmark","percentile","value","zScore","totals","acc","game","averages","recent","recommendations","avgTurnovers","avgShooting","fga"],"mappings":"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"}