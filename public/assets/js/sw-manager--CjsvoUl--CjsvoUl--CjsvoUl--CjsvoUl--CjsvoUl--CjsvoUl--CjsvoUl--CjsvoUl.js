class a{constructor(){this.registering=!1,this.registration=null}async initialize(){if(!(!("serviceWorker"in navigator)||this.registering)){this.registering=!0;try{this.registration=await navigator.serviceWorker.register("/sw.js"),console.log("SW registered: ",this.registration),this.startUpdateChecking(),this.setupUpdateHandling(),this.setupControllerChangeHandling()}catch(e){console.error("SW registration failed: ",e)}}}startUpdateChecking(){this.registration.update(),setInterval(()=>{this.registration.update()},5e3)}setupUpdateHandling(){this.registration.addEventListener("updatefound",()=>{const e=this.registration.installing;console.log("New service worker found, installing..."),e.addEventListener("statechange",()=>{e.state==="installed"&&(navigator.serviceWorker.controller?(console.log("New version available, updating immediately..."),e.postMessage({type:"SKIP_WAITING"})):console.log("App is cached for the first time"))})})}setupControllerChangeHandling(){navigator.serviceWorker.addEventListener("controllerchange",()=>{console.log("Service worker controller changed, reloading page..."),window.location.reload()})}async clearAllCaches(){if(console.log("Clearing all caches..."),this.registration?.active&&this.registration.active.postMessage({type:"CLEAR_CACHE"}),"caches"in window){const e=await caches.keys();await Promise.all(e.map(i=>caches.delete(i)))}console.log("All caches cleared, reloading..."),window.location.reload()}async forceUpdate(){this.registration&&(await this.registration.update(),console.log("Forced service worker update check"))}}const t=new a;document.readyState==="loading"?document.addEventListener("DOMContentLoaded",()=>t.initialize()):t.initialize();window.clearAllCaches=()=>t.clearAllCaches();window.forceUpdate=()=>t.forceUpdate();window.swManager=t;
//# sourceMappingURL=sw-manager--CjsvoUl--CjsvoUl--CjsvoUl--CjsvoUl--CjsvoUl--CjsvoUl--CjsvoUl--CjsvoUl.js.map
