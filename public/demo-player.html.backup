<!doctype html><html lang="en"><head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="dns-prefetch" href="https://www.gstatic.com">
    <link rel="dns-prefetch" href="https://firebaseapp.com">
    <meta name="referrer" content="strict-origin-when-cross-origin">
    <meta name="format-detection" content="telephone=no">
    <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://www.gstatic.com"><link rel="dns-prefetch" href="https://firebaseapp.com"><meta name="referrer" content="strict-origin-when-cross-origin"><meta name="format-detection" content="telephone=no"><meta charset="UTF-8" /><meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://firestore.googleapis.com https://identitytoolkit.googleapis.com; frame-src 'self' https://www.google.com"><meta http-equiv="X-Content-Type-Options" content="nosniff"><meta http-equiv="X-Frame-Options" content="DENY"><meta http-equiv="X-XSS-Protection" content="1; mode=block"><meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin"><meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()"><meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
<!-- Security Headers -->
<meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://www.googleapis.com https://apis.google.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://firestore.googleapis.com https://identitytoolkit.googleapis.com; frame-src 'self' https://www.google.com">
<meta http-equiv="X-Content-Type-Options" content="nosniff">
<meta http-equiv="X-Frame-Options" content="DENY">
<meta http-equiv="X-XSS-Protection" content="1; mode=block">
<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin">
<meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()">
<meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
<meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>Player Portal Demo | 3 Ball Network</title><meta
name="description"
content="Experience the Player Dashboard - Track your performance, view game grades, and showcase your highlights on 3 Ball Network."
/><meta property="og:title" content="Player Portal Demo | 3 Ball Network" /><meta
property="og:description"
content="Experience the Player Dashboard - Track your performance, view game grades, and showcase your highlights."
/><meta property="og:url" content="https://3ballnetwork.com/demo-player" /><meta property="og:type" content="website" /><meta name="twitter:card" content="summary_large_image" /><link rel="canonical" href="https://3ballnetwork.com/demo-player" /><link
href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;900&family=Urbanist:wght@400;700;900&display=swap"
rel="stylesheet"
/><script src="https://cdn.jsdelivr.net/npm/chart.js"></script><link rel="stylesheet" href="/assets/css/demo-player.css"><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager.js"
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-0j_2LXoh-C5W5Tc3C.js"
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-DAV1RrA1-JVRntdH9.js"
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-DpocxIhM-B4Ehg4gA.js"
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-C005TVuN-8droooaP.js"
/><link
rel="modulepreload"
crossorigin
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-Bvdin3t6-Dh2LTHj9.js"
/><link
rel="modulepreload"
crossorigin
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-BpiNB33m-DZaRoQqh.js"
/><link
rel="modulepreload"
crossorigin
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-BPOGcxLr-Dte6F16m.js"
/><link
rel="modulepreload"
crossorigin
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-gKgsdMp8-DOXTs-WI.js"
/><link
rel="modulepreload"
crossorigin
/><link
rel="modulepreload"
crossorigin
href="/assets/js/platformManager-CMGNxMqx-BgtAjZPx-ChYnJq5S-Bf_eaMq8-B9ciSY_J.js"
src="/logo.png"
alt="3 Ball Network"
style="height:60px; margin-bottom:1em"
/><h1>Player Portal Demo<span class="demo-badge">DEMO MODE</span></h1><p style="color:#64748b; margin-top:1em">
Experience the Player Dashboard - Track your performance, view game
grades, and showcase your highlights
</p></div><div class="demo-nav"><div class="nav-tab active" >
Overview
</div><div class="nav-tab" >
Advanced Analytics
</div><div class="nav-tab" >
Recruiting Hub
</div><div class="nav-tab" >Game History</div><div class="nav-tab" >Highlights</div><div class="nav-tab" >Profile</div></div><div id="overview" class="demo-section active"><h2>Player Profile</h2><div class="player-card-2k"><div class="player-card-header"><div class="player-avatar"><img
src="/assets/images/default-avatar.png"
alt="Player"
id="playerAvatar"
/></div><div class="player-info"><h3 class="player-name" id="playerName">Marcus Johnson</h3><div class="player-details"><span class="player-position" id="playerPosition"
>Point Guard</span
><span class="player-school" id="playerSchool"
>Central High School</span
></div><div class="player-specs"><span id="playerHeight">6'2"</span> â€¢
<span id="playerWeight">180 lbs</span> â€¢
<span id="playerClass">Class of 2025</span></div></div><div class="overall-rating"><div class="ovr-number" id="overallRating">87</div><div class="ovr-label">OVR</div></div></div></div><h2>Season Overview</h2><div class="stats-grid"><div class="stat-card"><div class="stat-value">24</div><div class="stat-label">Games Played</div></div><div class="stat-card"><div class="stat-value" id="avgGradeDisplay">B+</div><div class="stat-label">Avg Grade</div></div><div class="stat-card"><div class="stat-value">15.8</div><div class="stat-label">PPG</div></div><div class="stat-card"><div class="stat-value">4.1</div><div class="stat-label">RPG</div></div><div class="stat-card"><div class="stat-value">7.3</div><div class="stat-label">APG</div></div><div class="stat-card"><div class="stat-value">43%</div><div class="stat-label">FG%</div></div></div><div class="chart-container"><h3>Performance Trend</h3><canvas id="performanceChart" width="400" height="200"></canvas></div><div class="chart-container"><h3>Position Analysis</h3><canvas id="positionChart" width="400" height="200"></canvas></div></div><div id="analytics" class="demo-section"><h2>Advanced Analytics Dashboard</h2><div id="playerAnalyticsContainer"><div class="analytics-loading"><p>Loading advanced analytics...</p></div></div></div><div id="recruiting" class="demo-section"><h2>Recruiting Hub</h2><div id="recruitingHubContainer"><div class="recruiting-loading"><p>Loading recruiting tools...</p></div></div></div><div id="games" class="demo-section"><h2>Game History & Grades</h2><div class="games-list" id="gamesList"></div></div><div id="highlights" class="demo-section"><h2>Player Highlights</h2><div class="highlight-video"><h3>Season Highlight Reel</h3><div class="video-placeholder">
ðŸŽ¥ Video Content<br /><small>Demo highlights would appear here</small></div><button class="btn">Upload New Highlight</button><button class="btn">Share Reel</button></div><div class="highlight-video"><h3>Best Plays - March 2025</h3><div class="video-placeholder">
ðŸŽ¬ Monthly Compilation<br /><small>Auto-generated from game footage</small></div><button class="btn">Download</button><button class="btn">Share</button></div><div class="highlight-video"><h3>Skill Development Progress</h3><div class="video-placeholder">
ðŸ“Š Progress Analytics<br /><small>Side-by-side improvement videos</small></div><button class="btn">View Analysis</button></div></div><div id="profile" class="demo-section"><h2>Player Profile</h2><div class="stats-grid"><div class="stat-card"><div style="color:#1e293b; margin-bottom:1em; line-height:1.8"><strong style="color:#007cba">Name:</strong> Alex Johnson<br /><strong style="color:#007cba">Position:</strong> Point Guard<br /><strong style="color:#007cba">Height:</strong> 6'2"<br /><strong style="color:#007cba">Weight:</strong> 185 lbs<br /><strong style="color:#007cba">School:</strong> Lincoln High
School
</div></div><div class="stat-card"><div style="color:#1e293b; margin-bottom:1em; line-height:1.8"><strong style="color:#007cba">Team:</strong> Lincoln Lions<br /><strong style="color:#007cba">Jersey #:</strong> 23<br /><strong style="color:#007cba">Class:</strong> 2026<br /><strong style="color:#007cba">GPA:</strong> 3.8<br /><strong style="color:#007cba">Coach:</strong> Mike Thompson
</div></div><div class="stat-card"><div style="color:#1e293b; margin-bottom:1em; line-height:1.8"><strong style="color:#007cba">Achievements:</strong><br />
â€¢ All-District Team 2024<br />
â€¢ Team Captain<br />
â€¢ Honor Roll Student<br />
â€¢ Community Service 100+ hrs
</div></div></div><div class="games-list"><h3>College Interest</h3><div class="game-item"><div><strong>University of California</strong><br /><span style="color:#64748b">Recruiting Interest - High</span></div><div><span class="grade grade-a">Interested</span></div></div><div class="game-item"><div><strong>Duke University</strong><br /><span style="color:#64748b">Recruiting Interest - Medium</span></div><div><span class="grade grade-b">Watching</span></div></div><div class="game-item"><div><strong>Arizona State</strong><br /><span style="color:#d0d0d0">Recruiting Interest - High</span></div><div><span class="grade grade-a">Offer Extended</span></div></div></div></div></div><script>
// Import the game grading system (for demo purposes, we'll include it inline)
// Basketball Game Grade Calculator - Realistic Coach/Scout Perspective
function calculateGameGrade(stats, minutesPlayed, gameLength = 32) {
const pts = stats.points || 0;
const reb = stats.rebounds || 0;
const ast = stats.assists || 0;
const stl = stats.steals || 0;
const blk = stats.blocks || 0;
const to = stats.turnovers || 0;
const fouls = stats.fouls || 0;
const fgm = stats.fgm || 0;
const fga = stats.fga || 0;
const ftm = stats.ftm || 0;
const fta = stats.fta || 0;
// Calculate efficiency metrics
const fgPct = fga > 0 ? fgm / fga :0;
const ftPct = fta > 0 ? ftm / fta :1;
const turnoverRatio = ast + pts > 0 ? to / (ast + pts / 2) :0;
// Base production score (40% of grade)
let productionScore =
pts * 1.0 + reb * 1.2 + ast * 1.5 + stl * 2.0 + blk * 2.0;
// Efficiency bonuses/penalties (30% of grade)
let efficiencyScore = 50; // Start neutral
if (fgPct >= .5) efficiencyScore += 25;
else if (fgPct >= .4) efficiencyScore += 10;
else if (fgPct < .3 && fga >= 5) efficiencyScore -= 20;
if (ftPct >= .8) efficiencyScore += 10;
else if (ftPct < .6 && fta >= 3) efficiencyScore -= 10;
// Turnovers hurt badly
efficiencyScore -= to * 8;
// Foul trouble
if (fouls >= 4) efficiencyScore -= 15;
else if (fouls >= 3) efficiencyScore -= 5;
// Playing time context (30% of grade)
let impactScore = 50; // Start neutral
const minuteRatio = minutesPlayed / gameLength;
// Reward consistent production relative to minutes
if (minuteRatio >= .75) {
// Starter minutes
if (pts >= 15 || reb >= 8 || ast >= 6) impactScore += 20;
else if (pts >= 10 || reb >= 5 || ast >= 4) impactScore += 10;
else impactScore -= 10; // Expected more from starter
} else if (minuteRatio >= .4) {
// Role player minutes
if (pts >= 8 || reb >= 4 || ast >= 3) impactScore += 15;
else if (pts >= 5 || reb >= 3 || ast >= 2) impactScore += 5} else {
// Limited minutes
if (pts >= 6 || reb >= 3 || ast >= 2) impactScore += 20; // Great per-minute impact
impactScore = Math.min(impactScore, 75); // Cap for limited minutes
}
// Final calculation
const finalScore =
productionScore * .4 + efficiencyScore * .3 + impactScore * .3;
// Convert to letter grade (realistic basketball standards)
if (finalScore >= 85) return 'A+';
else if (finalScore >= 75) return 'A';
else if (finalScore >= 70) return 'A-';
else if (finalScore >= 65) return 'B+';
else if (finalScore >= 60) return 'B';
else if (finalScore >= 55) return 'B-';
else if (finalScore >= 50) return 'C+';
else if (finalScore >= 45) return 'C';
else if (finalScore >= 40) return 'C-';
else if (finalScore >= 35) return 'D+';
else if (finalScore >= 30) return 'D';
else return 'F'}
// 3Ball Network Basketball Game Grade Calculator
// Based on percentage system with minutes played factor
function calculate3BallGrade(stats) {
const {
points = 0,
rebounds = 0,
assists = 0,
fieldGoalsMade = 0,
freeThrowsMade = 0,
steals = 0,
blocks = 0,
charges = 0,
deflections = 0,
turnovers = 0,
fouls = 0,
missedFieldGoals = 0,
missedFreeThrows = 0,
minutesPlayed = 0,
gameLength = 32,
} = stats;
// Step 1:Calculate Good Credits
const basicStats =
points + rebounds + assists + fieldGoalsMade + freeThrowsMade;
const premiumStats = steals + blocks + charges + deflections;
const goodCredits = basicStats * 2 + premiumStats * 5;
// Step 2:Calculate Bad Credits
const badCredits =
turnovers + fouls + missedFieldGoals + missedFreeThrows;
// Step 3:Calculate Possible Credits
const possibleCredits = goodCredits + badCredits + gameLength;
// Step 4:Calculate Actual Credits
const actualCredits = minutesPlayed + goodCredits - badCredits;
// Step 5:Calculate Game Grade Percentage
const gameGradePercentage =
possibleCredits > 0 ? (actualCredits / possibleCredits) * 100 :0;
// Step 6:Convert to Letter Grade
let letterGrade;
if (gameGradePercentage >= 70) letterGrade = 'A';
else if (gameGradePercentage >= 60) letterGrade = 'B';
else if (gameGradePercentage >= 50) letterGrade = 'C';
else if (gameGradePercentage >= 40) letterGrade = 'D';
else letterGrade = 'F';
return {
letterGrade,
percentage:Math.round(gameGradePercentage),
}}
// Realistic game data - Point Guard perspective
const gameData = [
{
opponent:'Lakers Academy',
date:'March 15, 2025',
minutes:28,
result:'W 78-72',
stats:{
points:18,
rebounds:4,
assists:9,
fgm:7,
fga:13,
ftm:4,
fta:5,
steals:3,
blocks:0,
turnovers:2,
fouls:2,
},
},
{
opponent:'Warriors Elite',
date:'March 12, 2025',
minutes:32,
result:'L 65-68',
stats:{
points:22,
rebounds:5,
assists:7,
fgm:8,
fga:18,
ftm:6,
fta:8,
steals:2,
blocks:0,
turnovers:5,
fouls:3,
},
},
{
opponent:'Celtics Youth',
date:'March 8, 2025',
minutes:30,
result:'W 88-76',
stats:{
points:25,
rebounds:6,
assists:11,
fgm:10,
fga:16,
ftm:5,
fta:6,
steals:4,
blocks:1,
turnovers:1,
fouls:1,
},
},
{
opponent:'Bulls Academy',
date:'March 5, 2025',
minutes:25,
result:'L 58-62',
stats:{
points:12,
rebounds:3,
assists:6,
fgm:4,
fga:12,
ftm:4,
fta:6,
steals:1,
blocks:0,
turnovers:4,
fouls:3,
},
},
{
opponent:'Heat Select',
date:'March 1, 2025',
minutes:29,
result:'W 73-69',
stats:{
points:16,
rebounds:5,
assists:8,
fgm:6,
fga:11,
ftm:4,
fta:4,
steals:2,
blocks:0,
turnovers:3,
fouls:2,
},
},
{
opponent:'Spurs Academy',
date:'February 25, 2025',
minutes:12,
result:'W 84-79',
stats:{
points:8,
rebounds:2,
assists:4,
fgm:3,
fga:5,
ftm:2,
fta:2,
steals:1,
blocks:0,
turnovers:1,
fouls:1,
},
},
{
opponent:'Rockets Elite',
date:'February 22, 2025',
minutes:27,
result:'L 59-82',
stats:{
points:9,
rebounds:2,
assists:3,
fgm:3,
fga:14,
ftm:3,
fta:4,
steals:1,
blocks:0,
turnovers:6,
fouls:4,
},
},
{
opponent:'Nets Academy',
date:'February 18, 2025',
minutes:31,
result:'W 71-64',
stats:{
points:14,
rebounds:6,
assists:10,
fgm:5,
fga:9,
ftm:4,
fta:5,
steals:3,
blocks:0,
turnovers:2,
fouls:2,
},
},
];
// Populate games list with realistic basketball stats
function populateGamesList() {
const gamesList = document.getElementById('gamesList');
if (!gamesList) return;
gamesList.textContent = "";
gameData.forEach(game => {
// Convert to new format and get grade using 3Ball Network system
const convertedStats = {
points:game.stats.points || 0,
rebounds:game.stats.rebounds || 0,
assists:game.stats.assists || 0,
fieldGoalsMade:game.stats.fgm || 0,
freeThrowsMade:game.stats.ftm || 0,
steals:game.stats.steals || 0,
blocks:game.stats.blocks || 0,
charges:game.stats.charges || 0,
deflections:game.stats.deflections || 0,
turnovers:game.stats.turnovers || 0,
fouls:game.stats.fouls || 0,
missedFieldGoals:(game.stats.fga || 0) - (game.stats.fgm || 0),
missedFreeThrows:(game.stats.fta || 0) - (game.stats.ftm || 0),
minutesPlayed:game.minutes || 0,
gameLength:32,
};
const gradeResult = calculate3BallGrade(convertedStats);
const grade = gradeResult.letterGrade;
const gradeClass = `grade-${grade.toLowerCase().replace('+', '-plus').replace('-', '-minus')}`;
const fgPct = ((game.stats.fgm / game.stats.fga) * 100).toFixed(1);
const ftPct =
game.stats.fta > 0
? ((game.stats.ftm / game.stats.fta) * 100).toFixed(1)
:'10.0';
const resultClass = game.result.startsWith('W') ? 'win' :'loss';
const gameItem = document.createElement('div');
gameItem.className = 'game-item';
gameItem.textContent = `
<div><strong>vs. ${game.opponent}</strong><div class="game-result ${resultClass}">${game.result}</div><span style="color:#d0d0d0; font-size:.9em;">${game.date}</span><div class="game-details">
FG:${game.stats.fgm}/${game.stats.fga} (${fgPct}%) â€¢
FT:${game.stats.ftm}/${game.stats.fta} (${ftPct}%) â€¢
TO:${game.stats.turnovers} â€¢ PF:${game.stats.fouls}
</div></div><div><div style="text-align:right;"><div style="margin-bottom:.3em;"><span style="margin-right:1em;">${game.stats.points}/${game.stats.rebounds}/${game.stats.assists}</span></div><div style="font-size:.85em; color:#90e0ef; margin-bottom:.5em;"><span class="minutes-played">${game.minutes} MIN</span></div><span class="grade ${gradeClass}">${grade}</span></div></div>
`;
gamesList.appendChild(gameItem)})}
// Calculate and update 2K-style player ratings
function updatePlayerRatings() {
// Calculate averages from game data
const totalGames = gameData.length;
const avgStats = gameData.reduce(
(acc, game) => {
acc.points += game.stats.points || 0;
acc.rebounds += game.stats.rebounds || 0;
acc.assists += game.stats.assists || 0;
acc.steals += game.stats.steals || 0;
acc.blocks += game.stats.blocks || 0;
acc.fgm += game.stats.fgm || 0;
acc.fga += game.stats.fga || 0;
acc.ftm += game.stats.ftm || 0;
acc.fta += game.stats.fta || 0;
acc.turnovers += game.stats.turnovers || 0;
acc.fouls += game.stats.fouls || 0;
return acc},
{
points:0,
rebounds:0,
assists:0,
steals:0,
blocks:0,
fgm:0,
fga:0,
ftm:0,
fta:0,
turnovers:0,
fouls:0,
}
);
// Calculate per-game averages
Object.keys(avgStats).forEach(key => {
avgStats[key] = avgStats[key] / totalGames});
// Calculate shooting percentages
const fgPct = avgStats.fga > 0 ? avgStats.fgm / avgStats.fga :0;
const ftPct = avgStats.fta > 0 ? avgStats.ftm / avgStats.fta :0;
// Calculate 2K-style ratings (0-100 scale)
const ratings = {
// Offense ratings
shooting:Math.min(
100,
Math.max(40, fgPct * 150 + avgStats.points * 2)
),
finishing:Math.min(
100,
Math.max(40, fgPct * 100 + avgStats.points * 3)
),
playmaking:Math.min(100, Math.max(40, avgStats.assists * 8 + 50)),
// Defense ratings
perimeterD:Math.min(
100,
Math.max(40, avgStats.steals * 10 + (5 - avgStats.fouls) * 5 + 50)
),
steal:Math.min(100, Math.max(40, avgStats.steals * 15 + 40)),
block:Math.min(100, Math.max(40, avgStats.blocks * 20 + 45)),
// Physical ratings
speed:Math.min(100, Math.max(60, 85 + avgStats.steals * 2)), // Base speed with steal bonus
athleticism:Math.min(
100,
Math.max(60, 80 + avgStats.blocks * 3 + avgStats.rebounds * 1)
),
stamina:Math.min(100, Math.max(60, 85 - avgStats.fouls * 2)), // Fouls suggest tiredness
};
// Calculate overall rating (weighted average)
const overall = Math.round(
ratings.shooting * .15 +
ratings.finishing * .12 +
ratings.playmaking * .18 +
ratings.perimeterD * .15 +
ratings.steal * .1 +
ratings.block * .08 +
ratings.speed * .1 +
ratings.athleticism * .07 +
ratings.stamina * .05
);
// Update the display elements
document.getElementById('overallRating').textContent = overall}
// Calculate and display average letter grade
function updateAverageGrade() {
const letterGrades = gameData.map(game => {
// Convert old format to new format for the new grading function
const convertedStats = {
points:game.stats.points,
rebounds:game.stats.rebounds,
assists:game.stats.assists,
fieldGoalsMade:game.stats.fgm,
freeThrowsMade:game.stats.ftm,
steals:game.stats.steals,
blocks:game.stats.blocks,
charges:game.stats.charges || 0,
deflections:game.stats.deflections || 0,
turnovers:game.stats.turnovers,
fouls:game.stats.fouls,
missedFieldGoals:game.stats.fga - game.stats.fgm,
missedFreeThrows:game.stats.fta - game.stats.ftm,
minutesPlayed:game.minutes,
gameLength:32,
};
const result = calculate3BallGrade(convertedStats);
return result.letterGrade});
// Calculate average letter grade (convert to numbers, average, convert back)
const gradeValues = letterGrades.map(grade => {
switch (grade) {
case 'A':return 4.0;
case 'B':return 3.0;
case 'C':return 2.0;
case 'D':return 1.0;
case 'F':return .0;
default:return .0}
});
const avgValue =
gradeValues.reduce((sum, val) => sum + val, 0) / gradeValues.length;
// Convert back to letter grade
let avgLetterGrade;
if (avgValue >= 3.5) avgLetterGrade = 'A';
else if (avgValue >= 2.5) avgLetterGrade = 'B';
else if (avgValue >= 1.5) avgLetterGrade = 'C';
else if (avgValue >= .5) avgLetterGrade = 'D';
else avgLetterGrade = 'F';
// Update the display
const avgGradeElement = document.getElementById('avgGradeDisplay');
if (avgGradeElement) {
avgGradeElement.textContent = avgLetterGrade}
}
// Tab switching functionality
function switchTab(tabName) {
// Update nav tabs
document
.querySelectorAll('.nav-tab')
.forEach(tab => tab.classList.remove('active'));
event.target.classList.add('active');
// Update sections
document
.querySelectorAll('.demo-section')
.forEach(section => section.classList.remove('active'));
document.getElementById(tabName).classList.add('active');
// Initialize charts if needed
if (tabName === 'overview') {
setTimeout(() => {
initCharts();
updateAverageGrade();
updatePlayerRatings()}, 100)} else if (tabName === 'games') {
populateGamesList()}
}
// Initialize charts
function initCharts() {
// Performance trend chart with realistic grades
const perfCtx = document.getElementById('performanceChart');
if (perfCtx) {
// Calculate letter grades using the new 3Ball Network system
const letterGrades = gameData.map(game => {
// Convert old format to new format for the new grading function
const convertedStats = {
points:game.stats.points || 0,
rebounds:game.stats.rebounds || 0,
assists:game.stats.assists || 0,
fieldGoalsMade:game.stats.fgm || 0,
freeThrowsMade:game.stats.ftm || 0,
steals:game.stats.steals || 0,
blocks:game.stats.blocks || 0,
charges:game.stats.charges || 0,
deflections:game.stats.deflections || 0,
turnovers:game.stats.turnovers || 0,
fouls:game.stats.fouls || 0,
missedFieldGoals:(game.stats.fga || 0) - (game.stats.fgm || 0),
missedFreeThrows:(game.stats.fta || 0) - (game.stats.ftm || 0),
minutesPlayed:game.minutes || 0,
gameLength:32,
};
// Use the new 3Ball Network grading function
const result = calculate3BallGrade(convertedStats);
return result.letterGrade});
// Map letter grades to numeric values for chart positioning
const gradeValues = letterGrades.map(grade => {
const gradeMap = {
A:5,
B:4,
C:3,
D:2,
F:1,
};
return gradeMap[grade] || 1});
new Chart(perfCtx, {
type:'line',
data:{
labels:gameData.map((_, i) => `Game ${i + 1}`),
datasets:[
{
label:'Game Grade',
data:gradeValues,
borderColor:'#00b4d8',
backgroundColor:'rgba(0, 180, 216, .1)',
tension:.4,
fill:true,
},
],
},
options:{
responsive:true,
plugins:{
legend:{
labels:{ color:'#e0e0e0' },
},
tooltip:{
callbacks:{
label:function (context) {
return `Game Grade:${letterGrades[context.dataIndex]}`},
},
},
},
scales:{
x:{ ticks:{ color:'#d0d0d0' } },
y:{
ticks:{
color:'#d0d0d0',
callback:function (value) {
const gradeLabels = {
5:'A',
4:'B',
3:'C',
2:'D',
1:'F',
};
return gradeLabels[value] || ''},
stepSize:1,
includeBounds:false,
},
min:1,
max:5,
// Only display ticks at grade positions
afterBuildTicks:function (axis) {
axis.ticks = [
{ value:1, label:'F' },
{ value:2, label:'D' },
{ value:3, label:'C' },
{ value:4, label:'B' },
{ value:5, label:'A' },
]},
},
},
},
})}
// Position analysis chart
const posCtx = document.getElementById('positionChart');
if (posCtx) {
new Chart(posCtx, {
type:'radar',
data:{
labels:[
'Shooting',
'Defense',
'Passing',
'Rebounding',
'Speed',
'Court Vision',
],
datasets:[
{
label:'Current Level',
data:[75, 82, 88, 78, 85, 87],
borderColor:'#00b4d8',
backgroundColor:'rgba(0, 180, 216, .2)',
borderWidth:2,
},
],
},
options:{
responsive:true,
plugins:{
legend:{
labels:{ color:'#e0e0e0' },
},
},
scales:{
r:{
beginAtZero:true,
max:100,
ticks:{ color:'#d0d0d0' },
grid:{ color:'rgba(255,255,255,.1)' },
angleLines:{ color:'rgba(255,255,255,.1)' },
pointLabels:{ color:'#e0e0e0' },
},
},
},
})}
}
// Initialize on page load
document.addEventListener('DOMContentLoaded', function () {
setTimeout(initCharts, 500);
populateGamesList();
initAdvancedFeatures()});
// Initialize advanced features
async function initAdvancedFeatures() {
try {
// Import and initialize Player Analytics
try {
const { PlayerAnalytics } = await import(
'/assets/js/playerAnalytics.js'
);
if (PlayerAnalytics) {
initPlayerAnalytics()}
} catch (error) {
console.log(
'PlayerAnalytics module not available, using demo content'
);
initPlayerAnalytics()}
// Import and initialize Recruiting Hub
try {
const { RecruitingHub } = await import(
'/assets/js/recruitingHub.js'
);
if (RecruitingHub) {
initRecruitingHub()}
} catch (error) {
console.log(
'RecruitingHub module not available, using demo content'
);
initRecruitingHub()}
} catch (error) {
console.error('Error initializing advanced features:', error)}
}
// Initialize Player Analytics UI
function initPlayerAnalytics() {
const analyticsContainer = document.getElementById(
'playerAnalyticsContainer'
);
if (analyticsContainer) {
// Create a simplified analytics view for the demo
analyticsContainer.textContent = `
<div class="analytics-dashboard"><div class="analytics-section"><h3>Real-Time Performance Tracking</h3><div class="analytics-grid"><div class="analytics-card"><div class="analytics-value">87.3%</div><div class="analytics-label">Efficiency Rating</div></div><div class="analytics-card"><div class="analytics-value">+12.5</div><div class="analytics-label">Plus/Minus Trend</div></div><div class="analytics-card"><div class="analytics-value">Top 5%</div><div class="analytics-label">League Ranking</div></div></div></div><div class="analytics-section"><h3>AI Insights & Recommendations</h3><div class="ai-insight"><p><strong>ðŸŽ¯ Focus Area:</strong> Improve free throw consistency (currently 73%, target 80%)</p><p><strong>ðŸ’ª Strength:</strong> Exceptional court vision and assist-to-turnover ratio</p><p><strong>ðŸ“ˆ Growth Trend:</strong> 15% improvement in defensive rating over last 10 games</p></div></div></div>
`}
}
// Initialize Recruiting Hub UI
function initRecruitingHub() {
const recruitingContainer = document.getElementById(
'recruitingHubContainer'
);
if (recruitingContainer) {
// Create a simplified recruiting view for the demo
recruitingContainer.textContent = `
<div class="recruiting-dashboard"><div class="recruiting-section"><h3>College Matches</h3><div class="match-list"><div class="match-item high-match"><div class="match-info"><strong>Stanford University</strong><span class="match-score">96% Match</span></div><div class="match-details">Academic excellence + Basketball program fit</div></div><div class="match-item medium-match"><strong>University of North Carolina</strong><span class="match-score">88% Match</span><div class="match-details">Strong basketball tradition, good academic fit</div></div></div></div><div class="recruiting-section"><h3>Communication Center</h3><div class="communication-summary"><p><strong>3 active conversations</strong> with college coaches</p><p><strong>2 camp invitations</strong> pending response</p><p><strong>1 official visit</strong> scheduled for next month</p></div></div><div class="recruiting-section"><h3>Scholarship Calculator</h3><div class="scholarship-info"><p><strong>Estimated Value Range:</strong> $15,000 - $45,000 per year</p><p><strong>Academic Scholarships:</strong> Eligible for merit-based aid</p><p><strong>Athletic Scholarships:</strong> High potential based on performance</p></div></div></div>
`}
}
// Initialize average grade and player ratings on page load
document.addEventListener('DOMContentLoaded', function () {
updateAverageGrade();
updatePlayerRatings()});
</script><section
style="background:rgba(255, 255, 255, .95);
padding:3em 2em;
border-radius:22px;
margin:2em auto;
max-width:1200px;
text-align:center;"
><h2
style="color:#000;
font-family:'Montserrat', Arial, sans-serif;
font-size:2.2em;
font-weight:900;
margin-bottom:1em;
text-transform:uppercase;"
>
Ready to Experience the Future?
</h2><p
style="color:#000;
font-size:1.3em;
margin-bottom:2em;
max-width:800px;
margin-left:auto;
margin-right:auto;"
>
Join thousands of players, coaches, scouts, and fans already using 3
Ball Network to revolutionize their basketball experience.
</p><div
style="display:flex;
flex-wrap:wrap;
justify-content:center;
gap:1.5em;"
><a
href="/overview.html"
style="background:linear-gradient(90deg, #007cba 0%, #00b4d8 100%);
color:#fff;
padding:1.2em 2.5em;
border-radius:16px;
text-decoration:none;
font-weight:900;
font-size:1.18em;
text-transform:uppercase;
transition:all .3s ease;"

onmouseout="this.style.transform=''; this.style.boxShadow=''"
>
ðŸ“‹ Platform Info
</a><a
href="/register.html"
style="background:rgba(0, 180, 216, .1);
color:#007cba;
padding:1.2em 2.5em;
border-radius:16px;
text-decoration:none;
font-weight:900;
font-size:1.18em;
text-transform:uppercase;
border:2px solid #007cba;
transition:all .3s ease;"

onmouseout="this.style.background='rgba(0,180,216,.1)'; this.style.color='#007cba'"
>
ðŸš€ Get Started
</a></div></section><script>
// Performance monitoring for 3 Ball Network
(function() { 'use strict'; // Track Core Web Vitals function trackWebVitals() { // Largest Contentful Paint new PerformanceObserver((list) => { const entries = list.getEntries(); const lastEntry = entries[entries.length - 1]; console.log('LCP:', lastEntry.startTime); // Send to analytics if needed if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'LCP', value: Math.round(lastEntry.startTime) }); } }).observe({ type: 'largest-contentful-paint', buffered: true }); // Cumulative Layout Shift new PerformanceObserver((list) => { let clsValue = 0; for (const entry of list.getEntries()) { if (!entry.hadRecentInput) { clsValue += entry.value; } } console.log('CLS:', clsValue); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'CLS', value: Math.round(clsValue * 1000) }); } }).observe({ type: 'layout-shift', buffered: true }); // First Input Delay new PerformanceObserver((list) => { const firstInput = list.getEntries()[0]; console.log('FID:', firstInput.processingStart - firstInput.startTime); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'FID', value: Math.round(firstInput.processingStart - firstInput.startTime) }); } }).observe({ type: 'first-input', buffered: true }); } // Track page load times function trackPageLoad() { window.addEventListener('load', () => { const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart; console.log('Page Load Time:', loadTime + 'ms'); const perfData = { loadTime, domContentLoaded: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart, firstPaint: performance.getEntriesByType('paint')[0]?.startTime || 0, firstContentfulPaint: performance.getEntriesByType('paint')[1]?.startTime || 0 }; // Store in localStorage for admin dashboard localStorage.setItem('pagePerformance', JSON.stringify(perfData)); }); } // Track resource loading function trackResourceLoading() { const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.duration > 1000) { // Slow resources > 1s console.warn('Slow resource:', entry.name, entry.duration + 'ms'); } } }); observer.observe({ type: 'resource', buffered: true }); } // Initialize monitoring if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }); } else { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }
})();
</script><script>
// Accessibility enhancements
(function() { 'use strict'; // Add focus management function enhanceFocus() { // Skip to main content link const skipLink = document.createElement('a'); skipLink.href = '#main-content'; skipLink.textContent = 'Skip to main content'; skipLink.className = 'skip-link'; skipLink.style.cssText = 'position:absolute;top:-40px;left:0;background:#00b4d8;color:#fff;padding:8px;text-decoration:none;z-index:1000'; skipLink.addEventListener('focus', () => { skipLink.style.top = '0'; }); skipLink.addEventListener('blur', () => { skipLink.style.top = '-40px'; }); document.body.insertBefore(skipLink, document.body.firstChild); // Add main content landmark const mainContent = document.querySelector('main') || document.querySelector('.main-content'); if (mainContent) { mainContent.id = 'main-content'; mainContent.setAttribute('tabindex', '-1'); } } // Add ARIA labels and descriptions function enhanceARIA() { // Add ARIA labels to buttons without text const buttons = document.querySelectorAll('button:not([aria-label])'); buttons.forEach(button => { const text = button.textContent || button.innerHTML; if (text.trim() && !button.getAttribute('aria-label')) { button.setAttribute('aria-label', text.trim()); } }); // Add ARIA labels to form inputs const inputs = document.querySelectorAll('input:not([aria-label]):not([id])'); inputs.forEach(input => { const placeholder = input.getAttribute('placeholder'); if (placeholder) { input.setAttribute('aria-label', placeholder); } }); // Add role to navigation const navs = document.querySelectorAll('nav:not([role])'); navs.forEach(nav => { nav.setAttribute('role', 'navigation'); }); } // Add keyboard navigation function enhanceKeyboardNavigation() { // Add keyboard shortcuts document.addEventListener('keydown', (e) => { // Alt + M for main menu if (e.altKey && e.key === 'm') { e.preventDefault(); const menu = document.querySelector('.menu, .navigation, nav'); if (menu) menu.focus(); } // Alt + S for search if (e.altKey && e.key === 's') { e.preventDefault(); const search = document.querySelector('input[type="search"], .search-input'); if (search) search.focus(); } // Escape to close modals if (e.key === 'Escape') { const modals = document.querySelectorAll('.modal.active, .popup.active'); modals.forEach(modal => { modal.classList.remove('active'); }); } }); } // Add screen reader announcements function addScreenReaderSupport() { // Create announcement region const announcer = document.createElement('div'); announcer.id = 'screen-reader-announcer'; announcer.setAttribute('aria-live', 'polite'); announcer.setAttribute('aria-atomic', 'true'); announcer.style.cssText = 'position:absolute;left:-10000px;width:1px;height:1px;overflow:hidden'; document.body.appendChild(announcer); // Function to announce messages window.announceToScreenReader = function(message) { announcer.textContent = message; setTimeout(() => { announcer.textContent = ''; }, 1000); }; } // Initialize accessibility features if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }); } else { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }
})();
</script><script>
// Enhanced error handling
(function() { 'use strict'; // Global error handler window.addEventListener('error', (e) => { console.error('Global error:', e.error); showUserFriendlyError('Something went wrong. Please try again.'); }); // Unhandled promise rejection handler window.addEventListener('unhandledrejection', (e) => { console.error('Unhandled promise rejection:', e.reason); showUserFriendlyError('Network error. Please check your connection.'); }); // Show user-friendly error messages function showUserFriendlyError(message) { const errorDiv = document.createElement('div'); errorDiv.className = 'error-message'; errorDiv.style.cssText = 'position:fixed;top:20px;right:20px;background:#ff4444;color:#fff;padding:15px;border-radius:8px;z-index:10000;max-width:300px;box-shadow:0 2px 10px rgba(0,0,0,0.2)'; errorDiv.textContent = message + '<button data-action="close-message" style="background:none;border:none;color:#fff;float:right;font-size:16px;cursor:pointer">Ã—</button>'; document.body.appendChild(errorDiv); // Auto-remove after 5 seconds setTimeout(() => { if (errorDiv.parentNode) { errorDiv.parentNode.removeChild(errorDiv); } }, 5000); } // Form validation function enhanceFormValidation() { const forms = document.querySelectorAll('form'); forms.forEach(form => { form.addEventListener('submit', (e) => { const inputs = form.querySelectorAll('input[required], textarea[required]'); let hasErrors = false; inputs.forEach(input => { if (!input.value.trim()) { hasErrors = true; input.style.borderColor = '#ff4444'; input.setAttribute('aria-invalid', 'true'); } else { input.style.borderColor = ''; input.setAttribute('aria-invalid', 'false'); } }); if (hasErrors) { e.preventDefault(); showUserFriendlyError('Please fill in all required fields.'); } }); }); } // Network status monitoring function monitorNetworkStatus() { function updateNetworkStatus() { if (!navigator.onLine) { showUserFriendlyError('You are offline. Some features may not work.'); } } window.addEventListener('online', () => { showUserFriendlyError('Connection restored!'); }); window.addEventListener('offline', updateNetworkStatus); // Check initial status updateNetworkStatus(); } // Initialize error handling if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { enhanceFormValidation(); monitorNetworkStatus(); }); } else { enhanceFormValidation(); monitorNetworkStatus(); } // Export function for use in other scripts window.showUserFriendlyError = showUserFriendlyError;
})();
</script></body></html>