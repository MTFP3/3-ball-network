<!doctype html>
<html lang="en">
  <head><meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https:; font-src 'self'; object-src 'none'; base-uri 'self'; form-action 'self';">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="https://www.gstatic.com" />
    <link rel="dns-prefetch" href="https://firebaseapp.com" />
    <meta name="referrer" content="strict-origin-when-cross-origin" />
    <meta name="format-detection" content="telephone=no" />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Player Portal | 3 Ball Network</title>
    <meta
      name="description"
      content="Player portal for 3 Ball Network - manage your profile, stats, and game history"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700;900&family=Urbanist:wght@400;700;900&family=Bebas+Neue&display=swap"
      rel="stylesheet"
    />

    <style>
      body {
        font-family: 'Urbanist', 'Montserrat', Arial, sans-serif;
        margin: 0;
        background: linear-gradient(135deg, #007cba 0%, #00b4d8 100%);
        color: #222;
        min-height: 100vh;
        overflow-x: hidden;
        letter-spacing: 0.02em;
      }

      .banner-logo {
        width: 100vw;
        background: #111;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 1.5em 0 1em 0;
        margin: 0;
      }

      .banner-logo-img {
        max-width: 320px;
        width: 90vw;
        height: auto;
        display: block;
        filter: drop-shadow(0 8px 32px rgba(0, 0, 0, 0.18));
        border-radius: 24px;
        background: none;
        padding: 0.5em 1.5em;
        box-shadow: 0 2px 16px rgba(0, 0, 0, 0.1);
        border: none;
      }

      @media (max-width: 700px) {
        .banner-logo-img {
          max-width: 90vw;
          padding: 0.5em;
        }
        .banner-logo {
          padding: 1em 0 0.5em 0;
        }
      }

      header {
        background: transparent;
        text-align: center;
        padding: 3em 1em 1.5em 1em;
        position: relative;
      }

      .site-title {
        font-family: 'Montserrat', 'Urbanist', Arial, sans-serif;
        font-size: 3em;
        font-weight: 900;
        letter-spacing: 3px;
        color: #fff;
        margin: 0.2em 0 0.1em 0;
        text-shadow: 0 6px 24px rgba(0, 0, 0, 0.18);
        text-transform: uppercase;
      }

      .site-tagline {
        font-family: 'Urbanist', Arial, sans-serif;
        color: #e0fbfc;
        font-size: 1.35em;
        margin-bottom: 0.7em;
        letter-spacing: 1.5px;
        font-weight: 700;
        text-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      }

      nav {
        background: rgba(255, 255, 255, 0.98);
        padding: 1.1em 0;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
        text-align: center;
        border-radius: 0 0 22px 22px;
        margin: 0 auto 2em auto;
        max-width: 720px;
        font-size: 1.18em;
        font-family: 'Montserrat', Arial, sans-serif;
      }

      nav a {
        margin: 0 1.5em;
        color: #007cba;
        text-decoration: none;
        font-weight: 900;
        letter-spacing: 0.5px;
        transition: color 0.2s;
        position: relative;
        text-transform: uppercase;
      }

      nav a::after {
        content: '';
        display: block;
        width: 0;
        height: 2.5px;
        background: linear-gradient(90deg, #00b4d8 0%, #007cba 100%);
        transition: width 0.3s;
        margin: 0 auto;
        border-radius: 2px;
      }

      nav a:hover {
        color: #00b4d8;
      }

      nav a:hover::after {
        width: 100%;
      }

      .main-content {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2em;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
      }

      h1 {
        font-family: 'Bebas Neue', 'Montserrat', Arial, sans-serif;
        font-size: 3rem;
        color: #007cba;
        text-align: center;
        margin-bottom: 1em;
        text-transform: uppercase;
        letter-spacing: 2px;
      }

      .player-dashboard {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2em;
        margin-top: 2em;
      }

      .dashboard-card {
        background: #fff;
        border-radius: 12px;
        padding: 2em;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
      }

      .dashboard-card:hover {
        transform: translateY(-4px);
      }

      .dashboard-card h3 {
        color: #007cba;
        margin-bottom: 1em;
        font-size: 1.3em;
      }

      @media (max-width: 768px) {
        .main-content {
          padding: 1em;
          margin: 1em;
        }

        .site-title {
          font-size: 2em;
        }

        h1 {
          font-size: 2rem;
        }
      }
    </style>
  <script src="/assets/js/securityFixesComprehensive.js"></script></head>

  <body>
    <div class="banner-logo">
      <img src="/logo.png" alt="3 Ball Network Logo" class="banner-logo-img" />
    </div>

    <header>
      <div class="site-title">3 Ball Network</div>
      <div class="site-tagline">
        Connecting Players, Coaches, Scouts, and Fans
      </div>
    </header>

    <nav>
      <a href="/">Home</a>
      <a href="/about.html">About Us</a>
      <a href="/overview.html">Overview</a>
      <a href="/player.html">Player</a>
      <a href="/coach.html">Coach</a>
      <a href="/scout.html">Scout</a>
      <a href="/fan.html">Fan</a>
      <a href="/login.html">Log In</a>
      <a href="/register.html">Register</a>
    </nav>

    <div class="main-content">
      <h1>üèÄ Player Portal</h1>

      <div class="player-dashboard">
        <div class="dashboard-card">
          <h3>üìä Player Stats</h3>
          <p>
            View your game statistics, performance metrics, and player ratings.
          </p>
        </div>

        <div class="dashboard-card">
          <h3>üéØ Game History</h3>
          <p>Access your complete game history and performance trends.</p>
        </div>

        <div class="dashboard-card">
          <h3>üìà Performance Analysis</h3>
          <p>
            Get detailed analysis of your gameplay and areas for improvement.
          </p>
        </div>

        <div class="dashboard-card">
          <h3>üèÜ Achievements</h3>
          <p>Track your progress and unlock new achievements.</p>
        </div>

        <div class="dashboard-card">
          <h3>üë• Team & Roster</h3>
          <p>Connect with your team and manage your roster status.</p>
        </div>

        <div class="dashboard-card">
          <h3>üîç Scout Interest</h3>
          <p>See which scouts and coaches are interested in your profile.</p>
        </div>
      </div>
    </div>

    <footer
      style="
        padding: 40px 20px;
        background-color: #111;
        color: #fff;
        text-align: center;
        font-size: 1.1em;
        letter-spacing: 1px;
        margin-top: 3em;
      "
    >
      Built by hoopers. Built for hoopers. Built for what's next.<br />
      ¬© 2025 The 3 Ball Network
    </footer>

    <script type="module" src="/assets/js/player.js"></script>
  </body>
</html>
<script>
  // Performance monitoring for 3 Ball Network
  (function () {
    'use strict'; // Track Core Web Vitals function trackWebVitals() { // Largest Contentful Paint new PerformanceObserver((list) => { const entries = list.getEntries(); const lastEntry = entries[entries.length - 1]; console.log('LCP:', lastEntry.startTime); // Send to analytics if needed if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'LCP', value: Math.round(lastEntry.startTime) }); } }).observe({ type: 'largest-contentful-paint', buffered: true }); // Cumulative Layout Shift new PerformanceObserver((list) => { let clsValue = 0; for (const entry of list.getEntries()) { if (!entry.hadRecentInput) { clsValue += entry.value; } } console.log('CLS:', clsValue); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'CLS', value: Math.round(clsValue * 1000) }); } }).observe({ type: 'layout-shift', buffered: true }); // First Input Delay new PerformanceObserver((list) => { const firstInput = list.getEntries()[0]; console.log('FID:', firstInput.processingStart - firstInput.startTime); if (typeof gtag !== 'undefined') { gtag('event', 'web_vitals', { event_category: 'Performance', event_label: 'FID', value: Math.round(firstInput.processingStart - firstInput.startTime) }); } }).observe({ type: 'first-input', buffered: true }); } // Track page load times function trackPageLoad() { window.addEventListener('load', () => { const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart; console.log('Page Load Time:', loadTime + 'ms'); const perfData = { loadTime, domContentLoaded: performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart, firstPaint: performance.getEntriesByType('paint')[0]?.startTime || 0, firstContentfulPaint: performance.getEntriesByType('paint')[1]?.startTime || 0 }; // Store in localStorage for admin dashboard localStorage.setItem('pagePerformance', JSON.stringify(perfData)); }); } // Track resource loading function trackResourceLoading() { const observer = new PerformanceObserver((list) => { for (const entry of list.getEntries()) { if (entry.duration > 1000) { // Slow resources > 1s console.warn('Slow resource:', entry.name, entry.duration + 'ms'); } } }); observer.observe({ type: 'resource', buffered: true }); } // Initialize monitoring if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }); } else { trackWebVitals(); trackPageLoad(); trackResourceLoading(); }
  })();
</script>
<script>
  // Accessibility enhancements
  (function () {
    'use strict'; // Add focus management function enhanceFocus() { // Skip to main content link const skipLink = document.createElement('a'); skipLink.href = '#main-content'; skipLink.textContent = 'Skip to main content'; skipLink.className = 'skip-link'; skipLink.style.cssText = 'position:absolute;top:-40px;left:0;background:#00b4d8;color:#fff;padding:8px;text-decoration:none;z-index:1000'; skipLink.addEventListener('focus', () => { skipLink.style.top = '0'; }); skipLink.addEventListener('blur', () => { skipLink.style.top = '-40px'; }); document.body.insertBefore(skipLink, document.body.firstChild); // Add main content landmark const mainContent = document.querySelector('main') || document.querySelector('.main-content'); if (mainContent) { mainContent.id = 'main-content'; mainContent.setAttribute('tabindex', '-1'); } } // Add ARIA labels and descriptions function enhanceARIA() { // Add ARIA labels to buttons without text const buttons = document.querySelectorAll('button:not([aria-label])'); buttons.forEach(button => { const text = button.textContent || button.innerHTML; if (text.trim() && !button.getAttribute('aria-label')) { button.setAttribute('aria-label', text.trim()); } }); // Add ARIA labels to form inputs const inputs = document.querySelectorAll('input:not([aria-label]):not([id])'); inputs.forEach(input => { const placeholder = input.getAttribute('placeholder'); if (placeholder) { input.setAttribute('aria-label', placeholder); } }); // Add role to navigation const navs = document.querySelectorAll('nav:not([role])'); navs.forEach(nav => { nav.setAttribute('role', 'navigation'); }); } // Add keyboard navigation function enhanceKeyboardNavigation() { // Add keyboard shortcuts document.addEventListener('keydown', (e) => { // Alt + M for main menu if (e.altKey && e.key === 'm') { e.preventDefault(); const menu = document.querySelector('.menu, .navigation, nav'); if (menu) menu.focus(); } // Alt + S for search if (e.altKey && e.key === 's') { e.preventDefault(); const search = document.querySelector('input[type="search"], .search-input'); if (search) search.focus(); } // Escape to close modals if (e.key === 'Escape') { const modals = document.querySelectorAll('.modal.active, .popup.active'); modals.forEach(modal => { modal.classList.remove('active'); }); } }); } // Add screen reader announcements function addScreenReaderSupport() { // Create announcement region const announcer = document.createElement('div'); announcer.id = 'screen-reader-announcer'; announcer.setAttribute('aria-live', 'polite'); announcer.setAttribute('aria-atomic', 'true'); announcer.style.cssText = 'position:absolute;left:-10000px;width:1px;height:1px;overflow:hidden'; document.body.appendChild(announcer); // Function to announce messages window.announceToScreenReader = function(message) { announcer.textContent = message; setTimeout(() => { announcer.textContent = ''; }, 1000); }; } // Initialize accessibility features if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }); } else { enhanceFocus(); enhanceARIA(); enhanceKeyboardNavigation(); addScreenReaderSupport(); }
  })();
</script>
<script>
  // Mobile experience enhancements
  (function () {
    'use strict'; // Add touch gestures function addTouchGestures() { let touchStartX = 0; let touchStartY = 0; document.addEventListener('touchstart', (e) => { touchStartX = e.touches[0].clientX; touchStartY = e.touches[0].clientY; }); document.addEventListener('touchend', (e) => { const touchEndX = e.changedTouches[0].clientX; const touchEndY = e.changedTouches[0].clientY; const deltaX = touchEndX - touchStartX; const deltaY = touchEndY - touchStartY; // Swipe detection if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) { if (deltaX > 0) { // Swipe right const event = new CustomEvent('swipeRight'); document.dispatchEvent(event); } else { // Swipe left const event = new CustomEvent('swipeLeft'); document.dispatchEvent(event); } } }); } // Optimize touch targets function optimizeTouchTargets() { const buttons = document.querySelectorAll('button, a, input[type="button"], input[type="submit"]'); buttons.forEach(button => { const rect = button.getBoundingClientRect(); if (rect.width < 44 || rect.height < 44) { button.style.minWidth = '44px'; button.style.minHeight = '44px'; button.style.display = 'inline-flex'; button.style.alignItems = 'center'; button.style.justifyContent = 'center'; } }); } // Add mobile menu toggle function addMobileMenu() { const nav = document.querySelector('nav, .navigation'); if (nav && window.innerWidth <= 768) { const toggleButton = document.createElement('button'); toggleButton.textContent = ""; toggleButton.className = 'mobile-menu-toggle'; toggleButton.style.cssText = 'position:fixed;top:10px;left:10px;z-index:1000;background:#00b4d8;color:#fff;border:none;padding:10px;border-radius:4px;font-size:18px'; toggleButton.setAttribute('aria-label', 'Toggle mobile menu'); toggleButton.addEventListener('click', () => { nav.classList.toggle('mobile-menu-active'); toggleButton.textContent = nav.classList.contains('mobile-menu-active') ? '‚úï' : '‚ò∞'; }); document.body.appendChild(toggleButton); } } // Add viewport adjustments function optimizeViewport() { // Prevent zoom on input focus const inputs = document.querySelectorAll('input, textarea, select'); inputs.forEach(input => { input.addEventListener('focus', () => { const viewport = document.querySelector('meta[name="viewport"]'); if (viewport) { viewport.content = 'width=device-width, initial-scale=1, maximum-scale=1'; } }); input.addEventListener('blur', () => { const viewport = document.querySelector('meta[name="viewport"]'); if (viewport) { viewport.content = 'width=device-width, initial-scale=1'; } }); }); } // Initialize mobile enhancements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addTouchGestures(); optimizeTouchTargets(); addMobileMenu(); optimizeViewport(); }); } else { addTouchGestures(); optimizeTouchTargets(); addMobileMenu(); optimizeViewport(); }
  })();
</script>
<script>
  // Loading states management
  (function () {
    'use strict'; // Show loading spinner window.showLoading = function(element) { if (typeof element === 'string') { element = document.querySelector(element); } if (element) { element.textContent = ""; element.disabled = true; } }; // Hide loading spinner window.hideLoading = function(element, originalText) { if (typeof element === 'string') { element = document.querySelector(element); } if (element) { element.textContent = originalText || 'Submit'; element.disabled = false; } }; // Add loading overlay window.showLoadingOverlay = function(message = 'Loading...') { let overlay = document.getElementById('loading-overlay'); if (!overlay) { overlay = document.createElement('div'); overlay.id = 'loading-overlay'; overlay.className = 'loading-overlay'; overlay.textContent = "" + message + '</p></div>'; document.body.appendChild(overlay); } overlay.classList.remove('hidden'); }; // Hide loading overlay window.hideLoadingOverlay = function() { const overlay = document.getElementById('loading-overlay'); if (overlay) { overlay.classList.add('hidden'); } }; // Add skeleton loading to cards function addSkeletonLoading() { const cards = document.querySelectorAll('.card:empty, .player-card:empty, .game-card:empty'); cards.forEach(card => { card.textContent = ""; }); } // Initialize loading states if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addSkeletonLoading(); }); } else { addSkeletonLoading(); }
  })();
</script>
<script>
  // Navigation improvements
  (function () {
    'use strict'; // Add breadcrumb navigation function addBreadcrumbs() { const path = window.location.pathname; const parts = path.split('/').filter(part => part); if (parts.length > 0) { const breadcrumbContainer = document.createElement('nav'); breadcrumbContainer.className = 'breadcrumb'; breadcrumbContainer.setAttribute('aria-label', 'Breadcrumb'); let breadcrumbHTML = '<ol>'; breadcrumbHTML += '<li><a href="/">Home</a></li>'; let currentPath = ''; parts.forEach((part, index) => { currentPath += '/' + part; const isLast = index === parts.length - 1; const displayName = part.replace('.html', '').replace('-', ' '); if (isLast) { breadcrumbHTML += '<li aria-current="page">' + displayName + '</li>'; } else { breadcrumbHTML += '<li><a href="' + currentPath + '">' + displayName + '</a></li>'; } }); breadcrumbHTML += '</ol>'; breadcrumbContainer.textContent = breadcrumbHTML; const main = document.querySelector('main') || document.body; main.insertBefore(breadcrumbContainer, main.firstChild); } } // Add search functionality function enhanceSearch() { const searchInputs = document.querySelectorAll('input[type="search"], .search-input'); searchInputs.forEach(input => { // Add search suggestions const suggestions = document.createElement('div'); suggestions.className = 'search-suggestions'; suggestions.style.cssText = 'position:absolute;background:#fff;border:1px solid #ccc;border-top:none;max-height:200px;overflow-y:auto;z-index:1000;display:none'; input.parentNode.style.position = 'relative'; input.parentNode.appendChild(suggestions); input.addEventListener('input', (e) => { const query = e.target.value.toLowerCase(); if (query.length > 2) { // Show suggestions (mock data) const mockSuggestions = ['player profile', 'game statistics', 'team roster', 'coach dashboard']; const filteredSuggestions = mockSuggestions.filter(s => s.includes(query)); if (filteredSuggestions.length > 0) { suggestions.textContent = filteredSuggestions.map(s => '<div class="suggestion-item" style="padding:8px;cursor:pointer;border-bottom:1px solid #eee">' + s + '</div>' ).join(''); suggestions.style.display = 'block'; } else { suggestions.style.display = 'none'; } } else { suggestions.style.display = 'none'; } }); // Hide suggestions when clicking outside document.addEventListener('click', (e) => { if (!input.contains(e.target) && !suggestions.contains(e.target)) { suggestions.style.display = 'none'; } }); }); } // Add quick navigation function addQuickNavigation() { const quickNav = document.createElement('div'); quickNav.className = 'quick-nav'; quickNav.style.cssText = 'position:fixed;top:50%;right:20px;transform:translateY(-50%);z-index:1000;background:#fff;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1);padding:10px'; const quickLinks = [ { href: '/', text: 'üè†', title: 'Home' }, { href: '/player.html', text: 'üèÄ', title: 'Player' }, { href: '/coach.html', text: 'üë®‚Äçüè´', title: 'Coach' }, { href: '/admin.html', text: '‚öôÔ∏è', title: 'Admin' } ]; quickLinks.forEach(link => { const a = document.createElement('a'); a.href = link.href; a.textContent = link.text; a.title = link.title; a.style.cssText = 'display:block;padding:8px;text-decoration:none;font-size:20px;text-align:center;margin:2px 0;border-radius:4px;transition:background 0.2s'; a.addEventListener('mouseenter', () => { a.style.background = '#f0f0f0'; }); a.addEventListener('mouseleave', () => { a.style.background = 'transparent'; }); quickNav.appendChild(a); }); document.body.appendChild(quickNav); } // Initialize navigation improvements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addBreadcrumbs(); enhanceSearch(); addQuickNavigation(); }); } else { addBreadcrumbs(); enhanceSearch(); addQuickNavigation(); }
  })();
</script>
<script>
  // Enhanced error handling
  (function () {
    'use strict'; // Global error handler window.addEventListener('error', (e) => { console.error('Global error:', e.error); showUserFriendlyError('Something went wrong. Please try again.'); }); // Unhandled promise rejection handler window.addEventListener('unhandledrejection', (e) => { console.error('Unhandled promise rejection:', e.reason); showUserFriendlyError('Network error. Please check your connection.'); }); // Show user-friendly error messages function showUserFriendlyError(message) { const errorDiv = document.createElement('div'); errorDiv.className = 'error-message'; errorDiv.style.cssText = 'position:fixed;top:20px;right:20px;background:#ff4444;color:#fff;padding:15px;border-radius:8px;z-index:10000;max-width:300px;box-shadow:0 2px 10px rgba(0,0,0,0.2)'; errorDiv.textContent = message + '<button data-action="close-message" style="background:none;border:none;color:#fff;float:right;font-size:16px;cursor:pointer">√ó</button>'; document.body.appendChild(errorDiv); // Auto-remove after 5 seconds setTimeout(() => { if (errorDiv.parentNode) { errorDiv.parentNode.removeChild(errorDiv); } }, 5000); } // Form validation function enhanceFormValidation() { const forms = document.querySelectorAll('form'); forms.forEach(form => { form.addEventListener('submit', (e) => { const inputs = form.querySelectorAll('input[required], textarea[required]'); let hasErrors = false; inputs.forEach(input => { if (!input.value.trim()) { hasErrors = true; input.style.borderColor = '#ff4444'; input.setAttribute('aria-invalid', 'true'); } else { input.style.borderColor = ''; input.setAttribute('aria-invalid', 'false'); } }); if (hasErrors) { e.preventDefault(); showUserFriendlyError('Please fill in all required fields.'); } }); }); } // Network status monitoring function monitorNetworkStatus() { function updateNetworkStatus() { if (!navigator.onLine) { showUserFriendlyError('You are offline. Some features may not work.'); } } window.addEventListener('online', () => { showUserFriendlyError('Connection restored!'); }); window.addEventListener('offline', updateNetworkStatus); // Check initial status updateNetworkStatus(); } // Initialize error handling if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { enhanceFormValidation(); monitorNetworkStatus(); }); } else { enhanceFormValidation(); monitorNetworkStatus(); } // Export function for use in other scripts window.showUserFriendlyError = showUserFriendlyError;
  })();
</script>
<script>
  // Enhanced interactivity
  (function () {
    'use strict'; // Add smooth scrolling function addSmoothScrolling() { document.documentElement.style.scrollBehavior = 'smooth'; // Smooth scroll to top button const scrollToTopBtn = document.createElement('button'); scrollToTopBtn.textContent = ""; scrollToTopBtn.className = 'scroll-to-top'; scrollToTopBtn.style.cssText = 'position:fixed;bottom:20px;right:20px;background:#00b4d8;color:#fff;border:none;width:50px;height:50px;border-radius:50%;font-size:20px;cursor:pointer;opacity:0;transition:opacity 0.3s;z-index:1000'; scrollToTopBtn.setAttribute('aria-label', 'Scroll to top'); scrollToTopBtn.addEventListener('click', () => { window.scrollTo({ top: 0, behavior: 'smooth' }); }); window.addEventListener('scroll', () => { if (window.scrollY > 300) { scrollToTopBtn.style.opacity = '1'; } else { scrollToTopBtn.style.opacity = '0'; } }); document.body.appendChild(scrollToTopBtn); } // Add hover effects function addHoverEffects() { const cards = document.querySelectorAll('.card, .player-card, .game-card'); cards.forEach(card => { card.style.transition = 'transform 0.2s, box-shadow 0.2s'; card.addEventListener('mouseenter', () => { card.style.transform = 'translateY(-2px)'; card.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)'; }); card.addEventListener('mouseleave', () => { card.style.transform = 'translateY(0)'; card.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)'; }); }); } // Add button feedback function addButtonFeedback() { const buttons = document.querySelectorAll('button, .btn'); buttons.forEach(button => { button.style.transition = 'all 0.2s'; button.addEventListener('mousedown', () => { button.style.transform = 'scale(0.95)'; }); button.addEventListener('mouseup', () => { button.style.transform = 'scale(1)'; }); button.addEventListener('mouseleave', () => { button.style.transform = 'scale(1)'; }); }); } // Add progress indicators function addProgressIndicators() { const forms = document.querySelectorAll('form'); forms.forEach(form => { const steps = form.querySelectorAll('.step, .form-step'); if (steps.length > 1) { const progressBar = document.createElement('div'); progressBar.className = 'progress-bar'; progressBar.style.cssText = 'width:100%;height:4px;background:#e0e0e0;border-radius:2px;margin-bottom:20px;overflow:hidden'; const progressFill = document.createElement('div'); progressFill.className = 'progress-fill'; progressFill.style.cssText = 'height:100%;background:#00b4d8;transition:width 0.3s;width:0%'; progressBar.appendChild(progressFill); form.insertBefore(progressBar, form.firstChild); // Update progress on step change const updateProgress = () => { const activeStep = form.querySelector('.step.active, .form-step.active'); if (activeStep) { const stepIndex = Array.from(steps).indexOf(activeStep); const progress = ((stepIndex + 1) / steps.length) * 100; progressFill.style.width = progress + '%'; } }; updateProgress(); // Watch for step changes const observer = new MutationObserver(updateProgress); observer.observe(form, { childList: true, subtree: true, attributes: true }); } }); } // Add tooltips function addTooltips() { const elementsWithTitle = document.querySelectorAll('[title]'); elementsWithTitle.forEach(element => { const title = element.getAttribute('title'); element.removeAttribute('title'); const tooltip = document.createElement('div'); tooltip.className = 'tooltip'; tooltip.textContent = title; tooltip.style.cssText = 'position:absolute;background:#333;color:#fff;padding:8px;border-radius:4px;font-size:12px;z-index:1000;opacity:0;pointer-events:none;transition:opacity 0.2s;white-space:nowrap'; element.appendChild(tooltip); element.addEventListener('mouseenter', () => { tooltip.style.opacity = '1'; }); element.addEventListener('mouseleave', () => { tooltip.style.opacity = '0'; }); }); } // Initialize interactivity enhancements if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { addSmoothScrolling(); addHoverEffects(); addButtonFeedback(); addProgressIndicators(); addTooltips(); }); } else { addSmoothScrolling(); addHoverEffects(); addButtonFeedback(); addProgressIndicators(); addTooltips(); }
  })();
</script>
