rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Videos can be uploaded by authenticated users only
    match /videos/{userId}/{fileName} {
      // Allow read access to all users
      allow read: if true;
      
      // Allow write access only to authenticated users uploading to their own folder
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   // Ensure file is a video and under 500MB
                   request.resource.contentType.matches('video/.*') &&
                   request.resource.size < 500 * 1024 * 1024;
      
      // Allow delete only by the owner
      allow delete: if request.auth != null && 
                    request.auth.uid == userId;
    }
    
    // Profile pictures
    match /profile-pictures/{userId}/{fileName} {
      // Allow read access to all users
      allow read: if true;
      
      // Allow write access only to the user updating their own profile picture
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   // Ensure file is an image and under 5MB
                   request.resource.contentType.matches('image/.*') &&
                   request.resource.size < 5 * 1024 * 1024;
      
      // Allow delete only by the owner
      allow delete: if request.auth != null && 
                    request.auth.uid == userId;
    }
    
    // Team assets (logos, etc.) - only coaches and admins
    match /teams/{teamId}/{fileName} {
      allow read: if true;
      allow write, delete: if request.auth != null && 
                           getUserRole(request.auth.uid) in ['coach', 'admin'];
    }
  }
  
  // Helper function to get user role (requires Firestore read)
  function getUserRole(userId) {
    return firestore.get(/databases/(default)/documents/users/$(userId)).data.role;
  }
}
